{"ast":null,"code":"import { NotificationType } from 'angular2-notifications';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular2-notifications\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    constructor(servicePNotify) {\n      this.servicePNotify = servicePNotify;\n      this.options = {\n        position: ['bottom', 'right']\n      };\n    }\n\n    info(mssg) {\n      this.addNotify(mssg, NotificationType.Info, 'Info');\n    }\n\n    success(mssg) {\n      this.addNotify(mssg, NotificationType.Success, 'Success');\n    }\n\n    warning(mssg) {\n      this.addNotify(mssg, NotificationType.Warn, 'Warning');\n    }\n\n    danger(mssg) {\n      this.addNotify(mssg, NotificationType.Error, 'Error');\n    }\n\n    addNotify(mssg, type, title) {\n      this.servicePNotify.remove();\n      this.options = {\n        position: ['bottom', 'right'],\n        maxStack: 8,\n        timeOut: 15000,\n        showProgressBar: false,\n        pauseOnHover: true,\n        lastOnBottom: true,\n        clickToClose: true,\n        preventDuplicates: false,\n        preventLastDuplicates: false,\n        animate: 'fromRight'\n      };\n      this.servicePNotify.create(title, mssg, type, this.options);\n    }\n\n  }\n\n  NotificationService.ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)(i0.ɵɵinject(i1.NotificationsService));\n  };\n\n  NotificationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac\n  });\n  return NotificationService;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/services/shared/notification.service.ts"],"names":["NotificationType","i0","i1","NotificationService","constructor","servicePNotify","options","position","info","mssg","addNotify","Info","success","Success","warning","Warn","danger","Error","type","title","remove","maxStack","timeOut","showProgressBar","pauseOnHover","lastOnBottom","clickToClose","preventDuplicates","preventLastDuplicates","animate","create","ɵfac","NotificationService_Factory","t","ɵɵinject","NotificationsService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,wBAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,WAAaC,mBAAb;AAAO,QAAMA,mBAAN,CAA0B;AAC7BC,IAAAA,WAAW,CAACC,cAAD,EAAiB;AACxB,WAAKA,cAAL,GAAsBA,cAAtB;AACA,WAAKC,OAAL,GAAe;AACXC,QAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,OAAX;AADC,OAAf;AAGH;;AACDC,IAAAA,IAAI,CAACC,IAAD,EAAO;AACP,WAAKC,SAAL,CAAeD,IAAf,EAAqBT,gBAAgB,CAACW,IAAtC,EAA4C,MAA5C;AACH;;AACDC,IAAAA,OAAO,CAACH,IAAD,EAAO;AACV,WAAKC,SAAL,CAAeD,IAAf,EAAqBT,gBAAgB,CAACa,OAAtC,EAA+C,SAA/C;AACH;;AACDC,IAAAA,OAAO,CAACL,IAAD,EAAO;AACV,WAAKC,SAAL,CAAeD,IAAf,EAAqBT,gBAAgB,CAACe,IAAtC,EAA4C,SAA5C;AACH;;AACDC,IAAAA,MAAM,CAACP,IAAD,EAAO;AACT,WAAKC,SAAL,CAAeD,IAAf,EAAqBT,gBAAgB,CAACiB,KAAtC,EAA6C,OAA7C;AACH;;AACDP,IAAAA,SAAS,CAACD,IAAD,EAAOS,IAAP,EAAaC,KAAb,EAAoB;AACzB,WAAKd,cAAL,CAAoBe,MAApB;AACA,WAAKd,OAAL,GAAe;AACXC,QAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,OAAX,CADC;AAEXc,QAAAA,QAAQ,EAAE,CAFC;AAGXC,QAAAA,OAAO,EAAE,KAHE;AAIXC,QAAAA,eAAe,EAAE,KAJN;AAKXC,QAAAA,YAAY,EAAE,IALH;AAMXC,QAAAA,YAAY,EAAE,IANH;AAOXC,QAAAA,YAAY,EAAE,IAPH;AAQXC,QAAAA,iBAAiB,EAAE,KARR;AASXC,QAAAA,qBAAqB,EAAE,KATZ;AAUXC,QAAAA,OAAO,EAAE;AAVE,OAAf;AAYA,WAAKxB,cAAL,CAAoByB,MAApB,CAA2BX,KAA3B,EAAkCV,IAAlC,EAAwCS,IAAxC,EAA8C,KAAKZ,OAAnD;AACH;;AAlC4B;;AAoCjCH,EAAAA,mBAAmB,CAAC4B,IAApB,GAA2B,SAASC,2BAAT,CAAqCC,CAArC,EAAwC;AAAE,WAAO,KAAKA,CAAC,IAAI9B,mBAAV,EAA+BF,EAAE,CAACiC,QAAH,CAAYhC,EAAE,CAACiC,oBAAf,CAA/B,CAAP;AAA8E,GAAnJ;;AACAhC,EAAAA,mBAAmB,CAACiC,KAApB,GAA4B,aAAcnC,EAAE,CAACoC,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAEnC,mBAAT;AAA8BoC,IAAAA,OAAO,EAAEpC,mBAAmB,CAAC4B;AAA3D,GAAtB,CAA1C;AArCA,SAAa5B,mBAAb;AAAA","sourcesContent":["import { NotificationType } from 'angular2-notifications';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"angular2-notifications\";\r\nexport class NotificationService {\r\n    constructor(servicePNotify) {\r\n        this.servicePNotify = servicePNotify;\r\n        this.options = {\r\n            position: ['bottom', 'right'],\r\n        };\r\n    }\r\n    info(mssg) {\r\n        this.addNotify(mssg, NotificationType.Info, 'Info');\r\n    }\r\n    success(mssg) {\r\n        this.addNotify(mssg, NotificationType.Success, 'Success');\r\n    }\r\n    warning(mssg) {\r\n        this.addNotify(mssg, NotificationType.Warn, 'Warning');\r\n    }\r\n    danger(mssg) {\r\n        this.addNotify(mssg, NotificationType.Error, 'Error');\r\n    }\r\n    addNotify(mssg, type, title) {\r\n        this.servicePNotify.remove();\r\n        this.options = {\r\n            position: ['bottom', 'right'],\r\n            maxStack: 8,\r\n            timeOut: 15000,\r\n            showProgressBar: false,\r\n            pauseOnHover: true,\r\n            lastOnBottom: true,\r\n            clickToClose: true,\r\n            preventDuplicates: false,\r\n            preventLastDuplicates: false,\r\n            animate: 'fromRight'\r\n        };\r\n        this.servicePNotify.create(title, mssg, type, this.options);\r\n    }\r\n}\r\nNotificationService.ɵfac = function NotificationService_Factory(t) { return new (t || NotificationService)(i0.ɵɵinject(i1.NotificationsService)); };\r\nNotificationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NotificationService, factory: NotificationService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}