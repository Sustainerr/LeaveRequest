{"ast":null,"code":"import { EventEmitter, Injectable, NgZone, NgModule } from '@angular/core';\nimport { HttpRequest, HttpClient } from '@angular/common/http';\nimport { KeepaliveSvc, NgIdleModule } from '@ng-idle/core';\n/**\n * An example of an injectable service.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@ng-idle/core';\nlet Keepalive = /*#__PURE__*/(() => {\n  class Keepalive extends KeepaliveSvc {\n    /*\n     * Initializes a new instance of Keepalive\n     * @param http - The HTTP service.\n     */\n    constructor(http, zone) {\n      super();\n      this.http = http;\n      this.zone = zone;\n      this.pingInterval = 10 * 60;\n      /*\n       * An event emitted when the service is pinging.\n       */\n\n      this.onPing = new EventEmitter();\n      /*\n       * An event emitted when the service has pinged an HTTP endpoint and received a response.\n       */\n\n      this.onPingResponse = new EventEmitter();\n    }\n    /*\n     * Sets the string or Request that should be used when pinging.\n     * @param url - The URL or Request object to use when pinging.\n     * @return The current Request used when pinging.\n     */\n\n\n    request(url) {\n      if (typeof url === 'string') {\n        this.pingRequest = new HttpRequest('GET', url);\n      } else if (url instanceof HttpRequest) {\n        this.pingRequest = url;\n      } else if (url === null) {\n        this.pingRequest = null;\n      }\n\n      return this.pingRequest;\n    }\n    /*\n     * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n     * @param seconds - The ping interval in seconds.\n     * @return The current interval value.\n     */\n\n\n    interval(seconds) {\n      if (!isNaN(seconds) && seconds > 0) {\n        this.pingInterval = seconds;\n      } else if (!isNaN(seconds) && seconds <= 0) {\n        throw new Error('Interval value must be greater than zero.');\n      }\n\n      return this.pingInterval;\n    }\n    /*\n     * Immediately performs the ping operation. If a request has been set, an HTTP\n     * request will be made and the response will be emitted via the\n     * onPingResponse event.\n     */\n\n\n    ping() {\n      this.onPing.emit(null);\n\n      if (this.pingRequest) {\n        this.http.request(this.pingRequest).subscribe(response => {\n          this.onPingResponse.emit(response);\n        }, error => {\n          this.onPingResponse.emit(error);\n        });\n      }\n    }\n    /*\n     * Starts pinging on an interval.\n     */\n\n\n    start() {\n      this.stop();\n      this.zone.runOutsideAngular(() => {\n        this.pingHandle = setInterval(() => {\n          this.zone.run(() => {\n            this.ping();\n          });\n        }, this.pingInterval * 1000);\n      });\n    }\n    /*\n     * Stops pinging on an interval.\n     */\n\n\n    stop() {\n      if (this.hasPingHandle()) {\n        clearInterval(this.pingHandle);\n        this.pingHandle = null;\n      }\n    }\n    /*\n     * Performs any cleanup tasks when Angular destroys the instance.\n     */\n\n\n    ngOnDestroy() {\n      this.stop();\n    }\n    /*\n     * Returns whether or not the service will ping automatically at the specified interval.\n     * @return True if the service will ping at the specified interval; otherwise, false.\n     */\n\n\n    isRunning() {\n      return this.hasPingHandle();\n    }\n\n    hasPingHandle() {\n      return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';\n    }\n\n  }\n\n  Keepalive.ɵfac = function Keepalive_Factory(t) {\n    return new (t || Keepalive)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  Keepalive.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Keepalive,\n    factory: Keepalive.ɵfac\n  });\n  return Keepalive;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgIdleKeepaliveModule = /*#__PURE__*/(() => {\n  class NgIdleKeepaliveModule {\n    static forRoot() {\n      return {\n        ngModule: NgIdleKeepaliveModule,\n        providers: [Keepalive, {\n          provide: KeepaliveSvc,\n          useExisting: Keepalive\n        }]\n      };\n    }\n\n  }\n\n  NgIdleKeepaliveModule.ɵfac = function NgIdleKeepaliveModule_Factory(t) {\n    return new (t || NgIdleKeepaliveModule)();\n  };\n\n  NgIdleKeepaliveModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgIdleKeepaliveModule\n  });\n  NgIdleKeepaliveModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[NgIdleModule.forRoot()]]\n  });\n  return NgIdleKeepaliveModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIdleKeepaliveModule, {\n    imports: [ɵngcc2.NgIdleModule]\n  });\n})();\n/*\n * Public API Surface of keepalive\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Keepalive, NgIdleKeepaliveModule };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/@ng-idle/keepalive/__ivy_ngcc__/fesm2015/ng-idle-keepalive.js"],"names":["EventEmitter","Injectable","NgZone","NgModule","HttpRequest","HttpClient","KeepaliveSvc","NgIdleModule","ɵngcc0","ɵngcc1","ɵngcc2","Keepalive","constructor","http","zone","pingInterval","onPing","onPingResponse","request","url","pingRequest","interval","seconds","isNaN","Error","ping","emit","subscribe","response","error","start","stop","runOutsideAngular","pingHandle","setInterval","run","hasPingHandle","clearInterval","ngOnDestroy","isRunning","ɵfac","Keepalive_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","NgIdleKeepaliveModule","forRoot","ngModule","providers","provide","useExisting","NgIdleKeepaliveModule_Factory","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["import { EventEmitter, Injectable, NgZone, NgModule } from '@angular/core';\nimport { HttpRequest, HttpClient } from '@angular/common/http';\nimport { KeepaliveSvc, NgIdleModule } from '@ng-idle/core';\n\n/**\n * An example of an injectable service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@ng-idle/core';\nclass Keepalive extends KeepaliveSvc {\n    /*\n     * Initializes a new instance of Keepalive\n     * @param http - The HTTP service.\n     */\n    constructor(http, zone) {\n        super();\n        this.http = http;\n        this.zone = zone;\n        this.pingInterval = 10 * 60;\n        /*\n         * An event emitted when the service is pinging.\n         */\n        this.onPing = new EventEmitter();\n        /*\n         * An event emitted when the service has pinged an HTTP endpoint and received a response.\n         */\n        this.onPingResponse = new EventEmitter();\n    }\n    /*\n     * Sets the string or Request that should be used when pinging.\n     * @param url - The URL or Request object to use when pinging.\n     * @return The current Request used when pinging.\n     */\n    request(url) {\n        if (typeof url === 'string') {\n            this.pingRequest = new HttpRequest('GET', url);\n        }\n        else if (url instanceof HttpRequest) {\n            this.pingRequest = url;\n        }\n        else if (url === null) {\n            this.pingRequest = null;\n        }\n        return this.pingRequest;\n    }\n    /*\n     * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n     * @param seconds - The ping interval in seconds.\n     * @return The current interval value.\n     */\n    interval(seconds) {\n        if (!isNaN(seconds) && seconds > 0) {\n            this.pingInterval = seconds;\n        }\n        else if (!isNaN(seconds) && seconds <= 0) {\n            throw new Error('Interval value must be greater than zero.');\n        }\n        return this.pingInterval;\n    }\n    /*\n     * Immediately performs the ping operation. If a request has been set, an HTTP\n     * request will be made and the response will be emitted via the\n     * onPingResponse event.\n     */\n    ping() {\n        this.onPing.emit(null);\n        if (this.pingRequest) {\n            this.http.request(this.pingRequest).subscribe((response) => {\n                this.onPingResponse.emit(response);\n            }, (error) => {\n                this.onPingResponse.emit(error);\n            });\n        }\n    }\n    /*\n     * Starts pinging on an interval.\n     */\n    start() {\n        this.stop();\n        this.zone.runOutsideAngular(() => {\n            this.pingHandle = setInterval(() => {\n                this.zone.run(() => {\n                    this.ping();\n                });\n            }, this.pingInterval * 1000);\n        });\n    }\n    /*\n     * Stops pinging on an interval.\n     */\n    stop() {\n        if (this.hasPingHandle()) {\n            clearInterval(this.pingHandle);\n            this.pingHandle = null;\n        }\n    }\n    /*\n     * Performs any cleanup tasks when Angular destroys the instance.\n     */\n    ngOnDestroy() {\n        this.stop();\n    }\n    /*\n     * Returns whether or not the service will ping automatically at the specified interval.\n     * @return True if the service will ping at the specified interval; otherwise, false.\n     */\n    isRunning() {\n        return this.hasPingHandle();\n    }\n    hasPingHandle() {\n        return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';\n    }\n}\nKeepalive.ɵfac = function Keepalive_Factory(t) { return new (t || Keepalive)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nKeepalive.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Keepalive, factory: Keepalive.ɵfac });\nKeepalive.ctorParameters = () => [\n    { type: HttpClient },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Keepalive, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: ɵngcc0.NgZone }]; }, null); })();\n\nclass NgIdleKeepaliveModule {\n    static forRoot() {\n        return {\n            ngModule: NgIdleKeepaliveModule,\n            providers: [Keepalive, { provide: KeepaliveSvc, useExisting: Keepalive }]\n        };\n    }\n}\nNgIdleKeepaliveModule.ɵfac = function NgIdleKeepaliveModule_Factory(t) { return new (t || NgIdleKeepaliveModule)(); };\nNgIdleKeepaliveModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgIdleKeepaliveModule });\nNgIdleKeepaliveModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[NgIdleModule.forRoot()]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgIdleKeepaliveModule, [{\n        type: NgModule,\n        args: [{ imports: [NgIdleModule.forRoot()] }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgIdleKeepaliveModule, { imports: [ɵngcc2.NgIdleModule] }); })();\n\n/*\n * Public API Surface of keepalive\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Keepalive, NgIdleKeepaliveModule };\n\n"]},"metadata":{},"sourceType":"module"}