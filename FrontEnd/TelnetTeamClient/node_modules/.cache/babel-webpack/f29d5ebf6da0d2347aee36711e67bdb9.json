{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"../auth.service\";\nimport * as i6 from \"../services/data.service\";\nexport let AddEmpSomeoneComponent = /*#__PURE__*/(() => {\n  class AddEmpSomeoneComponent {\n    constructor(fb, http, snackBar, dialogRef, authService, dataService) {\n      this.fb = fb;\n      this.http = http;\n      this.snackBar = snackBar;\n      this.dialogRef = dialogRef;\n      this.authService = authService;\n      this.dataService = dataService;\n      this.typeCongeUrl = 'https://localhost:7216/api/TypeConges/byRole';\n      this.congesUrl = 'https://localhost:7216/api/conges';\n      this.userRole = '';\n      this.leaveTypes = [];\n      this.leaveForm = this.fb.group({\n        dateDebut: ['', Validators.required],\n        dateFin: ['', Validators.required],\n        type: ['', Validators.required],\n        matricule: ['', Validators.required]\n      });\n    }\n\n    ngOnInit() {\n      const token = this.authService.getToken();\n\n      if (token) {\n        const parsedToken = this.parseToken(token);\n        const userId = parsedToken === null || parsedToken === void 0 ? void 0 : parsedToken.nameid;\n\n        if (userId) {\n          this.authService.getUserById(userId).subscribe(data => {\n            this.userRole = data.role;\n            this.userGroupId = data.groupe_Id; // Assuming the API response contains groupe_Id\n\n            this.getLeaveTypesForRoles(this.userRole);\n          }, error => {\n            console.error('Error fetching user data:', error);\n          });\n        } else {\n          console.error('userId is undefined.');\n        }\n      } else {\n        console.error('Token is not available.');\n      }\n    }\n\n    parseToken(token) {\n      try {\n        const payload = atob(token.split('.')[1]);\n        return JSON.parse(payload);\n      } catch (error) {\n        console.error('Error parsing token:', error);\n        return null;\n      }\n    }\n\n    getLeaveTypesForRoles(role) {\n      this.getLeaveTypesByRole('utilisateur').pipe(switchMap(utilisateurTypes => {\n        this.leaveTypes = utilisateurTypes;\n\n        if (role === 'Chef') {\n          return this.getLeaveTypesByRole('Chef');\n        } else if (role === 'Admin') {\n          return this.getLeaveTypesByRole('Chef').pipe(switchMap(chefTypes => {\n            this.leaveTypes = this.leaveTypes.concat(chefTypes);\n            return this.getLeaveTypesByRole('Admin');\n          }));\n        } else {\n          return of([]); // No additional types to fetch\n        }\n      }), catchError(error => {\n        console.error('Error fetching leave types:', error);\n        return of([]); // Return an empty array on error\n      })).subscribe(additionalTypes => {\n        if (role === 'Chef' || role === 'Admin') {\n          this.leaveTypes = this.leaveTypes.concat(additionalTypes);\n        }\n      });\n    }\n\n    getLeaveTypesByRole(role) {\n      const url = `${this.typeCongeUrl}/${role}`;\n      return this.http.get(url).pipe(catchError(error => {\n        console.error(`Error fetching leave types for role ${role}:`, error);\n        return of([]);\n      }));\n    }\n\n    onSubmit() {\n      if (this.leaveForm.valid) {\n        const token = this.authService.getToken();\n\n        if (token) {\n          const parsedToken = this.parseToken(token);\n          const userId = parsedToken === null || parsedToken === void 0 ? void 0 : parsedToken.nameid;\n          const leaveRequest = {\n            date_Debut: this.leaveForm.value.dateDebut,\n            date_Fin: this.leaveForm.value.dateFin,\n            statut: 'Approved',\n            type_Conge_Id: this.leaveForm.value.type,\n            matricule: this.leaveForm.value.matricule // Use the matricule from the form\n\n          };\n\n          if (this.userRole === 'Admin') {\n            // Admin can add leave request for any user\n            this.submitLeaveRequest(leaveRequest);\n          } else if (this.userRole === 'Chef') {\n            if (this.userGroupId !== undefined) {\n              this.dataService.getUserByMatricule(this.leaveForm.value.matricule).subscribe(data => {\n                if (data.groupe_Id === this.userGroupId) {\n                  this.submitLeaveRequest(leaveRequest);\n                } else {\n                  console.error('Error: The selected user is not in the same group.'); // Display error message to the user\n                }\n              }, error => {\n                console.error('Error fetching user data by matricule:', error);\n              });\n            } else {\n              console.error('Error: Group ID is undefined.'); // Display error message to the user\n            }\n          }\n        } else {\n          console.error('Token is not available.');\n        }\n      } else {\n        console.error('Form is invalid.');\n      }\n    }\n\n    submitLeaveRequest(leaveRequest) {\n      this.http.post(this.congesUrl, leaveRequest).subscribe(response => {\n        this.snackBar.open(`A request has been added for the user with matricule: ${leaveRequest.matricule}`, 'Close', {\n          duration: 3000\n        });\n        this.dialogRef.close(); // Close the dialog after successful submission\n      }, error => {\n        console.error('Error submitting leave request:', error); // Optionally: Display error message to the user\n      });\n    }\n\n  }\n\n  AddEmpSomeoneComponent.ɵfac = function AddEmpSomeoneComponent_Factory(t) {\n    return new (t || AddEmpSomeoneComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(i5.AuthService), i0.ɵɵdirectiveInject(i6.DataService));\n  };\n\n  AddEmpSomeoneComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEmpSomeoneComponent,\n    selectors: [[\"app-add-emp-someone\"]],\n    decls: 1,\n    vars: 0,\n    template: function AddEmpSomeoneComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0, \"d\");\n      }\n    },\n    styles: [\".form-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;padding:35px}.date-inputs[_ngcontent-%COMP%]{display:flex;justify-content:space-between;width:100%;max-width:500px;margin-bottom:20px}.date-inputs[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]{flex:1;margin-right:10px}.date-inputs[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]:last-child{margin-right:0}.type-input[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;width:100%;max-width:500px;margin-bottom:20px}button[_ngcontent-%COMP%]{display:block;margin:0 auto}\"]\n  });\n  return AddEmpSomeoneComponent;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/add-emp-someone/add-emp-someone.component.ts"],"names":["Validators","of","catchError","switchMap","i0","i1","i2","i3","i4","i5","i6","AddEmpSomeoneComponent","constructor","fb","http","snackBar","dialogRef","authService","dataService","typeCongeUrl","congesUrl","userRole","leaveTypes","leaveForm","group","dateDebut","required","dateFin","type","matricule","ngOnInit","token","getToken","parsedToken","parseToken","userId","nameid","getUserById","subscribe","data","role","userGroupId","groupe_Id","getLeaveTypesForRoles","error","console","payload","atob","split","JSON","parse","getLeaveTypesByRole","pipe","utilisateurTypes","chefTypes","concat","additionalTypes","url","get","onSubmit","valid","leaveRequest","date_Debut","value","date_Fin","statut","type_Conge_Id","submitLeaveRequest","undefined","getUserByMatricule","post","response","open","duration","close","ɵfac","AddEmpSomeoneComponent_Factory","t","ɵɵdirectiveInject","FormBuilder","HttpClient","MatSnackBar","MatDialogRef","AuthService","DataService","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","template","AddEmpSomeoneComponent_Template","rf","ctx","ɵɵtext","styles"],"mappings":"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","sourcesContent":["import { Validators } from '@angular/forms';\r\nimport { of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/forms\";\r\nimport * as i2 from \"@angular/common/http\";\r\nimport * as i3 from \"@angular/material/snack-bar\";\r\nimport * as i4 from \"@angular/material/dialog\";\r\nimport * as i5 from \"../auth.service\";\r\nimport * as i6 from \"../services/data.service\";\r\nexport class AddEmpSomeoneComponent {\r\n    constructor(fb, http, snackBar, dialogRef, authService, dataService) {\r\n        this.fb = fb;\r\n        this.http = http;\r\n        this.snackBar = snackBar;\r\n        this.dialogRef = dialogRef;\r\n        this.authService = authService;\r\n        this.dataService = dataService;\r\n        this.typeCongeUrl = 'https://localhost:7216/api/TypeConges/byRole';\r\n        this.congesUrl = 'https://localhost:7216/api/conges';\r\n        this.userRole = '';\r\n        this.leaveTypes = [];\r\n        this.leaveForm = this.fb.group({\r\n            dateDebut: ['', Validators.required],\r\n            dateFin: ['', Validators.required],\r\n            type: ['', Validators.required],\r\n            matricule: ['', Validators.required]\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        const token = this.authService.getToken();\r\n        if (token) {\r\n            const parsedToken = this.parseToken(token);\r\n            const userId = parsedToken === null || parsedToken === void 0 ? void 0 : parsedToken.nameid;\r\n            if (userId) {\r\n                this.authService.getUserById(userId).subscribe((data) => {\r\n                    this.userRole = data.role;\r\n                    this.userGroupId = data.groupe_Id; // Assuming the API response contains groupe_Id\r\n                    this.getLeaveTypesForRoles(this.userRole);\r\n                }, (error) => {\r\n                    console.error('Error fetching user data:', error);\r\n                });\r\n            }\r\n            else {\r\n                console.error('userId is undefined.');\r\n            }\r\n        }\r\n        else {\r\n            console.error('Token is not available.');\r\n        }\r\n    }\r\n    parseToken(token) {\r\n        try {\r\n            const payload = atob(token.split('.')[1]);\r\n            return JSON.parse(payload);\r\n        }\r\n        catch (error) {\r\n            console.error('Error parsing token:', error);\r\n            return null;\r\n        }\r\n    }\r\n    getLeaveTypesForRoles(role) {\r\n        this.getLeaveTypesByRole('utilisateur').pipe(switchMap((utilisateurTypes) => {\r\n            this.leaveTypes = utilisateurTypes;\r\n            if (role === 'Chef') {\r\n                return this.getLeaveTypesByRole('Chef');\r\n            }\r\n            else if (role === 'Admin') {\r\n                return this.getLeaveTypesByRole('Chef').pipe(switchMap((chefTypes) => {\r\n                    this.leaveTypes = this.leaveTypes.concat(chefTypes);\r\n                    return this.getLeaveTypesByRole('Admin');\r\n                }));\r\n            }\r\n            else {\r\n                return of([]); // No additional types to fetch\r\n            }\r\n        }), catchError((error) => {\r\n            console.error('Error fetching leave types:', error);\r\n            return of([]); // Return an empty array on error\r\n        })).subscribe((additionalTypes) => {\r\n            if (role === 'Chef' || role === 'Admin') {\r\n                this.leaveTypes = this.leaveTypes.concat(additionalTypes);\r\n            }\r\n        });\r\n    }\r\n    getLeaveTypesByRole(role) {\r\n        const url = `${this.typeCongeUrl}/${role}`;\r\n        return this.http.get(url).pipe(catchError((error) => {\r\n            console.error(`Error fetching leave types for role ${role}:`, error);\r\n            return of([]);\r\n        }));\r\n    }\r\n    onSubmit() {\r\n        if (this.leaveForm.valid) {\r\n            const token = this.authService.getToken();\r\n            if (token) {\r\n                const parsedToken = this.parseToken(token);\r\n                const userId = parsedToken === null || parsedToken === void 0 ? void 0 : parsedToken.nameid;\r\n                const leaveRequest = {\r\n                    date_Debut: this.leaveForm.value.dateDebut,\r\n                    date_Fin: this.leaveForm.value.dateFin,\r\n                    statut: 'Approved',\r\n                    type_Conge_Id: this.leaveForm.value.type,\r\n                    matricule: this.leaveForm.value.matricule // Use the matricule from the form\r\n                };\r\n                if (this.userRole === 'Admin') {\r\n                    // Admin can add leave request for any user\r\n                    this.submitLeaveRequest(leaveRequest);\r\n                }\r\n                else if (this.userRole === 'Chef') {\r\n                    if (this.userGroupId !== undefined) {\r\n                        this.dataService.getUserByMatricule(this.leaveForm.value.matricule).subscribe((data) => {\r\n                            if (data.groupe_Id === this.userGroupId) {\r\n                                this.submitLeaveRequest(leaveRequest);\r\n                            }\r\n                            else {\r\n                                console.error('Error: The selected user is not in the same group.');\r\n                                // Display error message to the user\r\n                            }\r\n                        }, (error) => {\r\n                            console.error('Error fetching user data by matricule:', error);\r\n                        });\r\n                    }\r\n                    else {\r\n                        console.error('Error: Group ID is undefined.');\r\n                        // Display error message to the user\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                console.error('Token is not available.');\r\n            }\r\n        }\r\n        else {\r\n            console.error('Form is invalid.');\r\n        }\r\n    }\r\n    submitLeaveRequest(leaveRequest) {\r\n        this.http.post(this.congesUrl, leaveRequest).subscribe((response) => {\r\n            this.snackBar.open(`A request has been added for the user with matricule: ${leaveRequest.matricule}`, 'Close', {\r\n                duration: 3000,\r\n            });\r\n            this.dialogRef.close(); // Close the dialog after successful submission\r\n        }, (error) => {\r\n            console.error('Error submitting leave request:', error);\r\n            // Optionally: Display error message to the user\r\n        });\r\n    }\r\n}\r\nAddEmpSomeoneComponent.ɵfac = function AddEmpSomeoneComponent_Factory(t) { return new (t || AddEmpSomeoneComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(i5.AuthService), i0.ɵɵdirectiveInject(i6.DataService)); };\r\nAddEmpSomeoneComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AddEmpSomeoneComponent, selectors: [[\"app-add-emp-someone\"]], decls: 1, vars: 0, template: function AddEmpSomeoneComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtext(0, \"d\");\r\n    } }, styles: [\".form-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;padding:35px}.date-inputs[_ngcontent-%COMP%]{display:flex;justify-content:space-between;width:100%;max-width:500px;margin-bottom:20px}.date-inputs[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]{flex:1;margin-right:10px}.date-inputs[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]:last-child{margin-right:0}.type-input[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;width:100%;max-width:500px;margin-bottom:20px}button[_ngcontent-%COMP%]{display:block;margin:0 auto}\"] });\r\n"]},"metadata":{},"sourceType":"module"}