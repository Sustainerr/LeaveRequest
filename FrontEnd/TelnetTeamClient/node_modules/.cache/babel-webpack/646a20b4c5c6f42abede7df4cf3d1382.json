{"ast":null,"code":"import * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nconst localCode = 'fr';\nexport let DateTimeService = /*#__PURE__*/(() => {\n  class DateTimeService {\n    constructor() {\n      this.nullDate = '0001-01-01T00:00:00+01:00';\n      this.nullDate2 = '0001-01-01T00:00:00';\n      this.startOfWeek = moment().startOf('isoWeek');\n      this.endOfWeek = moment().endOf('isoWeek');\n    }\n\n    isNullDate(date) {\n      return date === null || date === undefined || date === this.nullDate || date === this.nullDate2;\n    }\n\n    getShortestFormat(date) {\n      if (this.isNullDate(date)) {\n        return '';\n      } else {\n        return moment(date).format('DD/MM');\n      }\n    }\n\n    getShortFormat(date) {\n      if (this.isNullDate(date)) {\n        return '';\n      } else {\n        return moment(date).locale(localCode).format('L');\n      }\n    }\n\n    getShortFormatWithDay(date) {\n      if (this.isNullDate(date)) {\n        return '';\n      } else {\n        const d = moment(date).locale(localCode);\n        return d.format('dddd') + ' ' + d.format('L');\n      }\n    }\n\n    getShortestFormatWithTime(date) {\n      if (this.isNullDate(date)) {\n        return '';\n      } else {\n        return moment(date).format('DD/MM-HH:mm');\n      }\n    }\n\n    getDayName(date) {\n      if (!this.isNullDate(date)) {\n        return moment(date).locale(localCode).format('dddd');\n      } else {\n        return '';\n      }\n    }\n\n    FormatDateToString(dateToFormat) {\n      return dateToFormat.isValid() ? dateToFormat.locale(localCode).format('L') : '';\n    }\n\n    GetDate(dateToFormat) {\n      return moment(new Date(dateToFormat)).isValid() ? moment(new Date(dateToFormat)).locale(localCode).format('L') : '';\n    }\n\n    ConvertDateToNumber(dateToFormat) {\n      return moment(dateToFormat).valueOf();\n    }\n\n    getMaxDate(day1, day2) {\n      if (this.isNullDate(day1)) {\n        return day2;\n      }\n\n      if (this.isNullDate(day2)) {\n        return day1;\n      } // Initiallize variables\n\n\n      const d1 = moment(day1);\n      const d2 = moment(day2);\n\n      if (d1.isBefore(d2)) {\n        return day2;\n      } else {\n        return day1;\n      }\n    }\n\n    getMinDate(day1, day2) {\n      if (this.isNullDate(day1)) {\n        return day2;\n      }\n\n      if (this.isNullDate(day2)) {\n        return day1;\n      } // Initiallize variables\n\n\n      const d1 = moment(day1);\n      const d2 = moment(day2);\n\n      if (d1.isAfter(d2)) {\n        return day2;\n      } else {\n        return day1;\n      }\n    }\n\n    today() {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      return today;\n    }\n\n    getCurrentMonth() {\n      return moment().startOf('month');\n    }\n\n    getDiff(date1, date2) {\n      const d1 = moment(date1).valueOf();\n      const d2 = moment(date2).valueOf();\n      return d1 - d2;\n    }\n\n    getSum(date1, date2) {\n      const d1 = moment(date1).valueOf();\n      const d2 = moment(date2).valueOf();\n      return d1 + d2;\n    }\n\n    getDate(date) {\n      return moment(date);\n    }\n\n    getBusinessDays(startDate, endDate, lastDayIncluded = true) {\n      // Initiallize variables\n      let day1 = moment(startDate);\n      let day2 = moment(endDate);\n      day1.locale('fr');\n      day2.locale('fr');\n      let adjust = lastDayIncluded ? 1 : 0;\n\n      if (day1.weekday() === 5 && day2.weekday() === 6 && day2.diff(day1, 'days') === 1) {\n        return 0;\n      }\n\n      if (day1.weekday() === 5 && day2.weekday() === 5 && day2.diff(day1, 'days') === 0) {\n        return 0;\n      }\n\n      if (day1.weekday() === 6 && day2.weekday() === 6 && day2.diff(day1, 'days') === 0) {\n        return 0;\n      }\n\n      if (day1.dayOfYear() === day2.dayOfYear() && day1.year() === day2.year()) {\n        return 1;\n      } // Check if second date is before first date to switch\n\n\n      if (day2.isBefore(day1)) {\n        day2 = moment(startDate);\n        day1 = moment(endDate);\n      } // Check if first date starts on weekends\n\n\n      if (day1.day() === 6) {\n        // Saturday\n        // Move date to next week monday\n        day1.day(8);\n      } else if (day1.day() === 0) {\n        // Sunday\n        // Move date to current week monday\n        day1.day(1);\n      } // Check if second date starts on weekends\n\n\n      if (day2.day() === 6) {\n        // Saturday\n        // Move date to current week friday\n        day2.day(5);\n      } else if (day2.day() === 0) {\n        // Sunday\n        // Move date to previous week friday\n        day2.day(-2);\n      }\n\n      const day1Week = day1.week();\n      let day2Week = day2.week(); // Check if second date's year is different from first date's year\n\n      if (day2Week < day1Week) {\n        day2Week += day1Week;\n      } // Calculate adjust value to be substracted from difference between two dates\n\n\n      adjust = -2 * (day2Week - day1Week) + 1;\n      return day2.diff(day1, 'days') + adjust;\n    }\n\n    isBefore(date1, date2) {\n      date1 = moment(date1);\n      date2 = moment(date2);\n      return date1.isBefore(date2);\n    }\n\n    isAfter(date1, date2) {\n      date1 = moment(date1);\n      date2 = moment(date2);\n      return date1.isAfter(date2);\n    }\n\n    areEqual(date1, date2) {\n      date1 = moment(date1);\n      date2 = moment(date2);\n      return date1.dayOfYear() === date2.dayOfYear() && date1.year() === date2.year();\n    }\n\n    getWeekNumber(date = this.today()) {\n      return moment(date).week();\n    }\n\n    getWeekDays(date = this.today()) {\n      const startOfWeek = moment(date).startOf('isoWeek');\n      const endOfWeek = moment(date).endOf('isoWeek');\n      let day = startOfWeek;\n      const days = [];\n\n      while (day <= endOfWeek) {\n        days.push(this.FormatDateToString(day));\n        day = day.clone().add(1, 'd');\n      }\n\n      return days;\n    }\n\n    dateOnly(date) {\n      const charCode = date.which ? date.which : date.keyCode;\n\n      if (charCode > 31 && (charCode < 47 || charCode > 57)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    getFirstDayFromPreviousMonth() {\n      const previousDate = new Date();\n      previousDate.setMonth(previousDate.getMonth() - 1);\n      return new Date(previousDate.getFullYear(), previousDate.getMonth(), 1);\n    }\n\n  }\n\n  DateTimeService.ɵfac = function DateTimeService_Factory(t) {\n    return new (t || DateTimeService)();\n  };\n\n  DateTimeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DateTimeService,\n    factory: DateTimeService.ɵfac\n  });\n  return DateTimeService;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/services/shared/date-time.service.ts"],"names":["moment","i0","localCode","DateTimeService","constructor","nullDate","nullDate2","startOfWeek","startOf","endOfWeek","endOf","isNullDate","date","undefined","getShortestFormat","format","getShortFormat","locale","getShortFormatWithDay","d","getShortestFormatWithTime","getDayName","FormatDateToString","dateToFormat","isValid","GetDate","Date","ConvertDateToNumber","valueOf","getMaxDate","day1","day2","d1","d2","isBefore","getMinDate","isAfter","today","setHours","getCurrentMonth","getDiff","date1","date2","getSum","getDate","getBusinessDays","startDate","endDate","lastDayIncluded","adjust","weekday","diff","dayOfYear","year","day","day1Week","week","day2Week","areEqual","getWeekNumber","getWeekDays","days","push","clone","add","dateOnly","charCode","which","keyCode","getFirstDayFromPreviousMonth","previousDate","setMonth","getMonth","getFullYear","ɵfac","DateTimeService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\r\nimport * as i0 from \"@angular/core\";\r\nconst localCode = 'fr';\r\nexport class DateTimeService {\r\n    constructor() {\r\n        this.nullDate = '0001-01-01T00:00:00+01:00';\r\n        this.nullDate2 = '0001-01-01T00:00:00';\r\n        this.startOfWeek = moment().startOf('isoWeek');\r\n        this.endOfWeek = moment().endOf('isoWeek');\r\n    }\r\n    isNullDate(date) {\r\n        return date === null || date === undefined || date === this.nullDate || date === this.nullDate2;\r\n    }\r\n    getShortestFormat(date) {\r\n        if (this.isNullDate(date)) {\r\n            return '';\r\n        }\r\n        else {\r\n            return moment(date).format('DD/MM');\r\n        }\r\n    }\r\n    getShortFormat(date) {\r\n        if (this.isNullDate(date)) {\r\n            return '';\r\n        }\r\n        else {\r\n            return moment(date).locale(localCode).format('L');\r\n        }\r\n    }\r\n    getShortFormatWithDay(date) {\r\n        if (this.isNullDate(date)) {\r\n            return '';\r\n        }\r\n        else {\r\n            const d = moment(date).locale(localCode);\r\n            return d.format('dddd') + ' ' + d.format('L');\r\n        }\r\n    }\r\n    getShortestFormatWithTime(date) {\r\n        if (this.isNullDate(date)) {\r\n            return '';\r\n        }\r\n        else {\r\n            return moment(date).format('DD/MM-HH:mm');\r\n        }\r\n    }\r\n    getDayName(date) {\r\n        if (!this.isNullDate(date)) {\r\n            return moment(date).locale(localCode).format('dddd');\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    FormatDateToString(dateToFormat) {\r\n        return dateToFormat.isValid() ? dateToFormat.locale(localCode).format('L') : '';\r\n    }\r\n    GetDate(dateToFormat) {\r\n        return moment(new Date(dateToFormat)).isValid() ? moment(new Date(dateToFormat)).locale(localCode).format('L') : '';\r\n    }\r\n    ConvertDateToNumber(dateToFormat) {\r\n        return moment(dateToFormat).valueOf();\r\n    }\r\n    getMaxDate(day1, day2) {\r\n        if (this.isNullDate(day1)) {\r\n            return day2;\r\n        }\r\n        if (this.isNullDate(day2)) {\r\n            return day1;\r\n        }\r\n        // Initiallize variables\r\n        const d1 = moment(day1);\r\n        const d2 = moment(day2);\r\n        if (d1.isBefore(d2)) {\r\n            return day2;\r\n        }\r\n        else {\r\n            return day1;\r\n        }\r\n    }\r\n    getMinDate(day1, day2) {\r\n        if (this.isNullDate(day1)) {\r\n            return day2;\r\n        }\r\n        if (this.isNullDate(day2)) {\r\n            return day1;\r\n        }\r\n        // Initiallize variables\r\n        const d1 = moment(day1);\r\n        const d2 = moment(day2);\r\n        if (d1.isAfter(d2)) {\r\n            return day2;\r\n        }\r\n        else {\r\n            return day1;\r\n        }\r\n    }\r\n    today() {\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        return today;\r\n    }\r\n    getCurrentMonth() {\r\n        return moment().startOf('month');\r\n    }\r\n    getDiff(date1, date2) {\r\n        const d1 = moment(date1).valueOf();\r\n        const d2 = moment(date2).valueOf();\r\n        return d1 - d2;\r\n    }\r\n    getSum(date1, date2) {\r\n        const d1 = moment(date1).valueOf();\r\n        const d2 = moment(date2).valueOf();\r\n        return d1 + d2;\r\n    }\r\n    getDate(date) {\r\n        return moment(date);\r\n    }\r\n    getBusinessDays(startDate, endDate, lastDayIncluded = true) {\r\n        // Initiallize variables\r\n        let day1 = moment(startDate);\r\n        let day2 = moment(endDate);\r\n        day1.locale('fr');\r\n        day2.locale('fr');\r\n        let adjust = lastDayIncluded ? 1 : 0;\r\n        if (day1.weekday() === 5 && day2.weekday() === 6 && day2.diff(day1, 'days') === 1) {\r\n            return 0;\r\n        }\r\n        if (day1.weekday() === 5 && day2.weekday() === 5 && day2.diff(day1, 'days') === 0) {\r\n            return 0;\r\n        }\r\n        if (day1.weekday() === 6 && day2.weekday() === 6 && day2.diff(day1, 'days') === 0) {\r\n            return 0;\r\n        }\r\n        if ((day1.dayOfYear() === day2.dayOfYear()) && (day1.year() === day2.year())) {\r\n            return 1;\r\n        }\r\n        // Check if second date is before first date to switch\r\n        if (day2.isBefore(day1)) {\r\n            day2 = moment(startDate);\r\n            day1 = moment(endDate);\r\n        }\r\n        // Check if first date starts on weekends\r\n        if (day1.day() === 6) { // Saturday\r\n            // Move date to next week monday\r\n            day1.day(8);\r\n        }\r\n        else if (day1.day() === 0) { // Sunday\r\n            // Move date to current week monday\r\n            day1.day(1);\r\n        }\r\n        // Check if second date starts on weekends\r\n        if (day2.day() === 6) { // Saturday\r\n            // Move date to current week friday\r\n            day2.day(5);\r\n        }\r\n        else if (day2.day() === 0) { // Sunday\r\n            // Move date to previous week friday\r\n            day2.day(-2);\r\n        }\r\n        const day1Week = day1.week();\r\n        let day2Week = day2.week();\r\n        // Check if second date's year is different from first date's year\r\n        if (day2Week < day1Week) {\r\n            day2Week += day1Week;\r\n        }\r\n        // Calculate adjust value to be substracted from difference between two dates\r\n        adjust = -2 * (day2Week - day1Week) + 1;\r\n        return (day2.diff(day1, 'days') + adjust);\r\n    }\r\n    isBefore(date1, date2) {\r\n        date1 = moment(date1);\r\n        date2 = moment(date2);\r\n        return date1.isBefore(date2);\r\n    }\r\n    isAfter(date1, date2) {\r\n        date1 = moment(date1);\r\n        date2 = moment(date2);\r\n        return date1.isAfter(date2);\r\n    }\r\n    areEqual(date1, date2) {\r\n        date1 = moment(date1);\r\n        date2 = moment(date2);\r\n        return ((date1.dayOfYear() === date2.dayOfYear()) && (date1.year() === date2.year()));\r\n    }\r\n    getWeekNumber(date = this.today()) {\r\n        return moment(date).week();\r\n    }\r\n    getWeekDays(date = this.today()) {\r\n        const startOfWeek = moment(date).startOf('isoWeek');\r\n        const endOfWeek = moment(date).endOf('isoWeek');\r\n        let day = startOfWeek;\r\n        const days = [];\r\n        while (day <= endOfWeek) {\r\n            days.push(this.FormatDateToString(day));\r\n            day = day.clone().add(1, 'd');\r\n        }\r\n        return (days);\r\n    }\r\n    dateOnly(date) {\r\n        const charCode = (date.which) ? date.which : date.keyCode;\r\n        if (charCode > 31 && (charCode < 47 || charCode > 57)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    getFirstDayFromPreviousMonth() {\r\n        const previousDate = new Date();\r\n        previousDate.setMonth(previousDate.getMonth() - 1);\r\n        return new Date(previousDate.getFullYear(), previousDate.getMonth(), 1);\r\n    }\r\n}\r\nDateTimeService.ɵfac = function DateTimeService_Factory(t) { return new (t || DateTimeService)(); };\r\nDateTimeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DateTimeService, factory: DateTimeService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}