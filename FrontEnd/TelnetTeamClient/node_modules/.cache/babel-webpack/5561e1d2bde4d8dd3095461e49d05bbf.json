{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@angular/core\");\n\nvar captcha_service_1 = require(\"./captcha.service\");\n\nvar captcha_helper_service_1 = require(\"./captcha-helper.service\");\n\nvar ɵngcc0 = require('@angular/core');\n\nvar ɵngcc1 = require('./captcha.service');\n\nvar ɵngcc2 = require('./captcha-helper.service');\n\nvar CaptchaComponent =\n/** @class */\nfunction () {\n  function CaptchaComponent(elementRef, captchaService, captchaHelper) {\n    this.elementRef = elementRef;\n    this.captchaService = captchaService;\n    this.captchaHelper = captchaHelper;\n  }\n\n  Object.defineProperty(CaptchaComponent.prototype, \"captchaEndpoint\", {\n    // provide captchaEndpoint for getting captcha challenge.\n    set: function (captchaEndpoint) {\n      this.captchaService.captchaEndpoint = captchaEndpoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CaptchaComponent.prototype, \"captchaId\", {\n    // the current captcha id, which will be used for validation purpose.\n    get: function () {\n      return this.captchaService.botdetectInstance.captchaId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CaptchaComponent.prototype, \"captchaCode\", {\n    // the user entered captcha code value.\n    // keep this method for backward compatibility\n    get: function () {\n      return this.captchaService.botdetectInstance.userInput.value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CaptchaComponent.prototype, \"userEnteredCaptchaCode\", {\n    get: function () {\n      return this.captchaCode;\n    },\n    enumerable: true,\n    configurable: true\n  }); // display captcha html markup on component initialization.\n\n  CaptchaComponent.prototype.ngOnInit = function () {\n    this.captchaStyleName = this.getCaptchaStyleName(); // set captcha style name to CaptchaService for creating BotDetect object\n\n    this.captchaService.captchaStyleName = this.captchaStyleName; // display captcha html markup on view\n\n    this.displayHtml();\n  }; // get captcha style name.\n\n\n  CaptchaComponent.prototype.getCaptchaStyleName = function () {\n    var styleName;\n    styleName = this.captchaStyleName;\n\n    if (styleName) {\n      return styleName;\n    } // backward compatible\n\n\n    styleName = this.styleName;\n\n    if (styleName) {\n      return styleName;\n    }\n\n    throw new Error('The captchaStyleName attribute is not found or its value is not set.');\n  }; // display captcha html markup in the <botdetect-captcha> tag.\n\n\n  CaptchaComponent.prototype.displayHtml = function () {\n    var _this = this;\n\n    this.captchaService.getHtml().subscribe(function (captchaHtml) {\n      // display captcha html markup\n      captchaHtml = _this.captchaHelper.changeRelativeToAbsoluteUrls(captchaHtml, _this.captchaService.captchaEndpoint);\n      _this.elementRef.nativeElement.innerHTML = captchaHtml; // load botdetect scripts\n\n      _this.loadScriptIncludes();\n    }, function (error) {\n      throw new Error(error);\n    });\n  }; // reload a new captcha image.\n\n\n  CaptchaComponent.prototype.reloadImage = function () {\n    this.captchaService.botdetectInstance.reloadImage();\n  }; // validate captcha on client-side and execute user callback function on ajax success\n\n\n  CaptchaComponent.prototype.validateUnsafe = function (callback) {\n    var _this = this;\n\n    var userInput = this.captchaService.botdetectInstance.userInput;\n    var captchaCode = userInput.value;\n\n    if (captchaCode.length !== 0) {\n      this.captchaService.validateUnsafe(captchaCode).subscribe(function (isHuman) {\n        callback(isHuman);\n\n        if (!_this.captchaHelper.useUserInputBlurValidation(userInput) && !isHuman) {\n          _this.reloadImage();\n        }\n      }, function (error) {\n        throw new Error(error);\n      });\n    } else {\n      var isHuman = false;\n      callback(isHuman);\n    }\n  }; // load botdetect scripts.\n\n\n  CaptchaComponent.prototype.loadScriptIncludes = function () {\n    var captchaId = this.elementRef.nativeElement.querySelector('#BDC_VCID_' + this.captchaStyleName).value;\n    var scriptIncludeUrl = this.captchaService.captchaEndpoint + '?get=script-include&c=' + this.captchaStyleName + '&t=' + captchaId + '&cs=201';\n    this.captchaHelper.getScript(scriptIncludeUrl);\n  };\n  /** @nocollapse */\n\n\n  CaptchaComponent.ctorParameters = function () {\n    return [{\n      type: core_1.ElementRef\n    }, {\n      type: captcha_service_1.CaptchaService\n    }, {\n      type: captcha_helper_service_1.CaptchaHelperService\n    }];\n  };\n\n  CaptchaComponent.propDecorators = {\n    'styleName': [{\n      type: core_1.Input\n    }],\n    'captchaStyleName': [{\n      type: core_1.Input\n    }]\n  };\n\n  CaptchaComponent.ɵfac = function CaptchaComponent_Factory(t) {\n    return new (t || CaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CaptchaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.CaptchaHelperService));\n  };\n\n  CaptchaComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CaptchaComponent,\n    selectors: [[\"botdetect-captcha\"]],\n    inputs: {\n      captchaStyleName: \"captchaStyleName\",\n      styleName: \"styleName\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function CaptchaComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return CaptchaComponent;\n}();\n\nexports.CaptchaComponent = CaptchaComponent;","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/angular-captcha/__ivy_ngcc__/src/captcha.component.js"],"names":["Object","defineProperty","exports","value","core_1","require","captcha_service_1","captcha_helper_service_1","ɵngcc0","ɵngcc1","ɵngcc2","CaptchaComponent","elementRef","captchaService","captchaHelper","prototype","set","captchaEndpoint","enumerable","configurable","get","botdetectInstance","captchaId","userInput","captchaCode","ngOnInit","captchaStyleName","getCaptchaStyleName","displayHtml","styleName","Error","_this","getHtml","subscribe","captchaHtml","changeRelativeToAbsoluteUrls","nativeElement","innerHTML","loadScriptIncludes","error","reloadImage","validateUnsafe","callback","length","isHuman","useUserInputBlurValidation","querySelector","scriptIncludeUrl","getScript","ctorParameters","type","ElementRef","CaptchaService","CaptchaHelperService","propDecorators","Input","ɵfac","CaptchaComponent_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","inputs","decls","vars","template","CaptchaComponent_Template","rf","ctx","encapsulation","ngDevMode"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AACA,IAAIE,wBAAwB,GAAGF,OAAO,CAAC,0BAAD,CAAtC;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,eAAD,CAApB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,mBAAD,CAApB;;AACA,IAAIK,MAAM,GAAGL,OAAO,CAAC,0BAAD,CAApB;;AACA,IAAIM,gBAAgB;AAAG;AAAe,YAAY;AAC9C,WAASA,gBAAT,CAA0BC,UAA1B,EAAsCC,cAAtC,EAAsDC,aAAtD,EAAqE;AACjE,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACH;;AACDd,EAAAA,MAAM,CAACC,cAAP,CAAsBU,gBAAgB,CAACI,SAAvC,EAAkD,iBAAlD,EAAqE;AACjE;AACAC,IAAAA,GAAG,EAAE,UAAUC,eAAV,EAA2B;AAC5B,WAAKJ,cAAL,CAAoBI,eAApB,GAAsCA,eAAtC;AACH,KAJgE;AAKjEC,IAAAA,UAAU,EAAE,IALqD;AAMjEC,IAAAA,YAAY,EAAE;AANmD,GAArE;AAQAnB,EAAAA,MAAM,CAACC,cAAP,CAAsBU,gBAAgB,CAACI,SAAvC,EAAkD,WAAlD,EAA+D;AAC3D;AACAK,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKP,cAAL,CAAoBQ,iBAApB,CAAsCC,SAA7C;AACH,KAJ0D;AAK3DJ,IAAAA,UAAU,EAAE,IAL+C;AAM3DC,IAAAA,YAAY,EAAE;AAN6C,GAA/D;AAQAnB,EAAAA,MAAM,CAACC,cAAP,CAAsBU,gBAAgB,CAACI,SAAvC,EAAkD,aAAlD,EAAiE;AAC7D;AACA;AACAK,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKP,cAAL,CAAoBQ,iBAApB,CAAsCE,SAAtC,CAAgDpB,KAAvD;AACH,KAL4D;AAM7De,IAAAA,UAAU,EAAE,IANiD;AAO7DC,IAAAA,YAAY,EAAE;AAP+C,GAAjE;AASAnB,EAAAA,MAAM,CAACC,cAAP,CAAsBU,gBAAgB,CAACI,SAAvC,EAAkD,wBAAlD,EAA4E;AACxEK,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,WAAZ;AACH,KAHuE;AAIxEN,IAAAA,UAAU,EAAE,IAJ4D;AAKxEC,IAAAA,YAAY,EAAE;AAL0D,GAA5E,EA/B8C,CAsC9C;;AACAR,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BU,QAA3B,GAAsC,YAAY;AAC9C,SAAKC,gBAAL,GAAwB,KAAKC,mBAAL,EAAxB,CAD8C,CAE9C;;AACA,SAAKd,cAAL,CAAoBa,gBAApB,GAAuC,KAAKA,gBAA5C,CAH8C,CAI9C;;AACA,SAAKE,WAAL;AACH,GAND,CAvC8C,CA8C9C;;;AACAjB,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BY,mBAA3B,GAAiD,YAAY;AACzD,QAAIE,SAAJ;AACAA,IAAAA,SAAS,GAAG,KAAKH,gBAAjB;;AACA,QAAIG,SAAJ,EAAe;AACX,aAAOA,SAAP;AACH,KALwD,CAMzD;;;AACAA,IAAAA,SAAS,GAAG,KAAKA,SAAjB;;AACA,QAAIA,SAAJ,EAAe;AACX,aAAOA,SAAP;AACH;;AACD,UAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACH,GAZD,CA/C8C,CA4D9C;;;AACAnB,EAAAA,gBAAgB,CAACI,SAAjB,CAA2Ba,WAA3B,GAAyC,YAAY;AACjD,QAAIG,KAAK,GAAG,IAAZ;;AACA,SAAKlB,cAAL,CAAoBmB,OAApB,GACKC,SADL,CACe,UAAUC,WAAV,EAAuB;AAClC;AACAA,MAAAA,WAAW,GAAGH,KAAK,CAACjB,aAAN,CAAoBqB,4BAApB,CAAiDD,WAAjD,EAA8DH,KAAK,CAAClB,cAAN,CAAqBI,eAAnF,CAAd;AACAc,MAAAA,KAAK,CAACnB,UAAN,CAAiBwB,aAAjB,CAA+BC,SAA/B,GAA2CH,WAA3C,CAHkC,CAIlC;;AACAH,MAAAA,KAAK,CAACO,kBAAN;AACH,KAPD,EAOG,UAAUC,KAAV,EAAiB;AAChB,YAAM,IAAIT,KAAJ,CAAUS,KAAV,CAAN;AACH,KATD;AAUH,GAZD,CA7D8C,CA0E9C;;;AACA5B,EAAAA,gBAAgB,CAACI,SAAjB,CAA2ByB,WAA3B,GAAyC,YAAY;AACjD,SAAK3B,cAAL,CAAoBQ,iBAApB,CAAsCmB,WAAtC;AACH,GAFD,CA3E8C,CA8E9C;;;AACA7B,EAAAA,gBAAgB,CAACI,SAAjB,CAA2B0B,cAA3B,GAA4C,UAAUC,QAAV,EAAoB;AAC5D,QAAIX,KAAK,GAAG,IAAZ;;AACA,QAAIR,SAAS,GAAG,KAAKV,cAAL,CAAoBQ,iBAApB,CAAsCE,SAAtD;AACA,QAAIC,WAAW,GAAGD,SAAS,CAACpB,KAA5B;;AACA,QAAIqB,WAAW,CAACmB,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,WAAK9B,cAAL,CAAoB4B,cAApB,CAAmCjB,WAAnC,EACKS,SADL,CACe,UAAUW,OAAV,EAAmB;AAC9BF,QAAAA,QAAQ,CAACE,OAAD,CAAR;;AACA,YAAI,CAACb,KAAK,CAACjB,aAAN,CAAoB+B,0BAApB,CAA+CtB,SAA/C,CAAD,IAA8D,CAACqB,OAAnE,EAA4E;AACxEb,UAAAA,KAAK,CAACS,WAAN;AACH;AACJ,OAND,EAMG,UAAUD,KAAV,EAAiB;AAChB,cAAM,IAAIT,KAAJ,CAAUS,KAAV,CAAN;AACH,OARD;AASH,KAVD,MAWK;AACD,UAAIK,OAAO,GAAG,KAAd;AACAF,MAAAA,QAAQ,CAACE,OAAD,CAAR;AACH;AACJ,GAnBD,CA/E8C,CAmG9C;;;AACAjC,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BuB,kBAA3B,GAAgD,YAAY;AACxD,QAAIhB,SAAS,GAAG,KAAKV,UAAL,CAAgBwB,aAAhB,CAA8BU,aAA9B,CAA4C,eAAe,KAAKpB,gBAAhE,EAAkFvB,KAAlG;AACA,QAAI4C,gBAAgB,GAAG,KAAKlC,cAAL,CAAoBI,eAApB,GAAsC,wBAAtC,GAAiE,KAAKS,gBAAtE,GAAyF,KAAzF,GAAiGJ,SAAjG,GAA6G,SAApI;AACA,SAAKR,aAAL,CAAmBkC,SAAnB,CAA6BD,gBAA7B;AACH,GAJD;AAKA;;;AACApC,EAAAA,gBAAgB,CAACsC,cAAjB,GAAkC,YAAY;AAAE,WAAO,CACnD;AAAEC,MAAAA,IAAI,EAAE9C,MAAM,CAAC+C;AAAf,KADmD,EAEnD;AAAED,MAAAA,IAAI,EAAE5C,iBAAiB,CAAC8C;AAA1B,KAFmD,EAGnD;AAAEF,MAAAA,IAAI,EAAE3C,wBAAwB,CAAC8C;AAAjC,KAHmD,CAAP;AAI5C,GAJJ;;AAKA1C,EAAAA,gBAAgB,CAAC2C,cAAjB,GAAkC;AAC9B,iBAAa,CAAC;AAAEJ,MAAAA,IAAI,EAAE9C,MAAM,CAACmD;AAAf,KAAD,CADiB;AAE9B,wBAAoB,CAAC;AAAEL,MAAAA,IAAI,EAAE9C,MAAM,CAACmD;AAAf,KAAD;AAFU,GAAlC;;AAIJ5C,EAAAA,gBAAgB,CAAC6C,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,WAAO,KAAKA,CAAC,IAAI/C,gBAAV,EAA4BH,MAAM,CAACmD,iBAAP,CAAyBnD,MAAM,CAAC2C,UAAhC,CAA5B,EAAyE3C,MAAM,CAACmD,iBAAP,CAAyBlD,MAAM,CAAC2C,cAAhC,CAAzE,EAA0H5C,MAAM,CAACmD,iBAAP,CAAyBjD,MAAM,CAAC2C,oBAAhC,CAA1H,CAAP;AAA0L,GAAzP;;AACA1C,EAAAA,gBAAgB,CAACiD,IAAjB,GAAwB,aAAcpD,MAAM,CAACqD,iBAAP,CAAyB;AAAEX,IAAAA,IAAI,EAAEvC,gBAAR;AAA0BmD,IAAAA,SAAS,EAAE,CAAC,CAAC,mBAAD,CAAD,CAArC;AAA8DC,IAAAA,MAAM,EAAE;AAAErC,MAAAA,gBAAgB,EAAE,kBAApB;AAAwCG,MAAAA,SAAS,EAAE;AAAnD,KAAtE;AAAwImC,IAAAA,KAAK,EAAE,CAA/I;AAAkJC,IAAAA,IAAI,EAAE,CAAxJ;AAA2JC,IAAAA,QAAQ,EAAE,SAASC,yBAAT,CAAmCC,EAAnC,EAAuCC,GAAvC,EAA4C,CAAG,CAApN;AAAsNC,IAAAA,aAAa,EAAE;AAArO,GAAzB,CAAtC;;AACA,GAAC,YAAY;AAAE,KAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAUC,GAVhB;;AAWI,SAAO5D,gBAAP;AACH,CAjIqC,EAAtC;;AAkIAT,OAAO,CAACS,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar captcha_service_1 = require(\"./captcha.service\");\r\nvar captcha_helper_service_1 = require(\"./captcha-helper.service\");\r\nvar ɵngcc0 = require('@angular/core');\nvar ɵngcc1 = require('./captcha.service');\nvar ɵngcc2 = require('./captcha-helper.service');\nvar CaptchaComponent = /** @class */ (function () {\r\n    function CaptchaComponent(elementRef, captchaService, captchaHelper) {\r\n        this.elementRef = elementRef;\r\n        this.captchaService = captchaService;\r\n        this.captchaHelper = captchaHelper;\r\n    }\r\n    Object.defineProperty(CaptchaComponent.prototype, \"captchaEndpoint\", {\r\n        // provide captchaEndpoint for getting captcha challenge.\r\n        set: function (captchaEndpoint) {\r\n            this.captchaService.captchaEndpoint = captchaEndpoint;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CaptchaComponent.prototype, \"captchaId\", {\r\n        // the current captcha id, which will be used for validation purpose.\r\n        get: function () {\r\n            return this.captchaService.botdetectInstance.captchaId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CaptchaComponent.prototype, \"captchaCode\", {\r\n        // the user entered captcha code value.\r\n        // keep this method for backward compatibility\r\n        get: function () {\r\n            return this.captchaService.botdetectInstance.userInput.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CaptchaComponent.prototype, \"userEnteredCaptchaCode\", {\r\n        get: function () {\r\n            return this.captchaCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // display captcha html markup on component initialization.\r\n    CaptchaComponent.prototype.ngOnInit = function () {\r\n        this.captchaStyleName = this.getCaptchaStyleName();\r\n        // set captcha style name to CaptchaService for creating BotDetect object\r\n        this.captchaService.captchaStyleName = this.captchaStyleName;\r\n        // display captcha html markup on view\r\n        this.displayHtml();\r\n    };\r\n    // get captcha style name.\r\n    CaptchaComponent.prototype.getCaptchaStyleName = function () {\r\n        var styleName;\r\n        styleName = this.captchaStyleName;\r\n        if (styleName) {\r\n            return styleName;\r\n        }\r\n        // backward compatible\r\n        styleName = this.styleName;\r\n        if (styleName) {\r\n            return styleName;\r\n        }\r\n        throw new Error('The captchaStyleName attribute is not found or its value is not set.');\r\n    };\r\n    // display captcha html markup in the <botdetect-captcha> tag.\r\n    CaptchaComponent.prototype.displayHtml = function () {\r\n        var _this = this;\r\n        this.captchaService.getHtml()\r\n            .subscribe(function (captchaHtml) {\r\n            // display captcha html markup\r\n            captchaHtml = _this.captchaHelper.changeRelativeToAbsoluteUrls(captchaHtml, _this.captchaService.captchaEndpoint);\r\n            _this.elementRef.nativeElement.innerHTML = captchaHtml;\r\n            // load botdetect scripts\r\n            _this.loadScriptIncludes();\r\n        }, function (error) {\r\n            throw new Error(error);\r\n        });\r\n    };\r\n    // reload a new captcha image.\r\n    CaptchaComponent.prototype.reloadImage = function () {\r\n        this.captchaService.botdetectInstance.reloadImage();\r\n    };\r\n    // validate captcha on client-side and execute user callback function on ajax success\r\n    CaptchaComponent.prototype.validateUnsafe = function (callback) {\r\n        var _this = this;\r\n        var userInput = this.captchaService.botdetectInstance.userInput;\r\n        var captchaCode = userInput.value;\r\n        if (captchaCode.length !== 0) {\r\n            this.captchaService.validateUnsafe(captchaCode)\r\n                .subscribe(function (isHuman) {\r\n                callback(isHuman);\r\n                if (!_this.captchaHelper.useUserInputBlurValidation(userInput) && !isHuman) {\r\n                    _this.reloadImage();\r\n                }\r\n            }, function (error) {\r\n                throw new Error(error);\r\n            });\r\n        }\r\n        else {\r\n            var isHuman = false;\r\n            callback(isHuman);\r\n        }\r\n    };\r\n    // load botdetect scripts.\r\n    CaptchaComponent.prototype.loadScriptIncludes = function () {\r\n        var captchaId = this.elementRef.nativeElement.querySelector('#BDC_VCID_' + this.captchaStyleName).value;\r\n        var scriptIncludeUrl = this.captchaService.captchaEndpoint + '?get=script-include&c=' + this.captchaStyleName + '&t=' + captchaId + '&cs=201';\r\n        this.captchaHelper.getScript(scriptIncludeUrl);\r\n    };\r\n    /** @nocollapse */\r\n    CaptchaComponent.ctorParameters = function () { return [\r\n        { type: core_1.ElementRef, },\r\n        { type: captcha_service_1.CaptchaService, },\r\n        { type: captcha_helper_service_1.CaptchaHelperService, },\r\n    ]; };\r\n    CaptchaComponent.propDecorators = {\r\n        'styleName': [{ type: core_1.Input },],\r\n        'captchaStyleName': [{ type: core_1.Input },],\r\n    };\nCaptchaComponent.ɵfac = function CaptchaComponent_Factory(t) { return new (t || CaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CaptchaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.CaptchaHelperService)); };\nCaptchaComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CaptchaComponent, selectors: [[\"botdetect-captcha\"]], inputs: { captchaStyleName: \"captchaStyleName\", styleName: \"styleName\" }, decls: 0, vars: 0, template: function CaptchaComponent_Template(rf, ctx) { }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CaptchaComponent, [{\n        type: core_1.Component,\n        args: [{\n                selector: 'botdetect-captcha',\n                template: ''\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CaptchaService }, { type: ɵngcc2.CaptchaHelperService }]; }, { captchaStyleName: [{\n            type: core_1.Input\n        }], styleName: [{\n            type: core_1.Input\n        }] }); })();\r\n    return CaptchaComponent;\r\n}());\r\nexports.CaptchaComponent = CaptchaComponent;\r\n\n"]},"metadata":{},"sourceType":"script"}