{"ast":null,"code":"import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\nconst _c0 = [\"body\"];\n\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) {}\n\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\n\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n  }\n}\n\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = /*#__PURE__*/new InjectionToken('MAT_ACCORDION');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\n\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\n\nconst matExpansionAnimations = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: /*#__PURE__*/trigger('indicatorRotate', [/*#__PURE__*/state('collapsed, void', /*#__PURE__*/style({\n    transform: 'rotate(0deg)'\n  })), /*#__PURE__*/state('expanded', /*#__PURE__*/style({\n    transform: 'rotate(180deg)'\n  })), /*#__PURE__*/transition('expanded <=> collapsed, void => collapsed', /*#__PURE__*/animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: /*#__PURE__*/trigger('bodyExpansion', [/*#__PURE__*/state('collapsed, void', /*#__PURE__*/style({\n    height: '0px',\n    visibility: 'hidden'\n  })), /*#__PURE__*/state('expanded', /*#__PURE__*/style({\n    height: '*',\n    visibility: 'visible'\n  })), /*#__PURE__*/transition('expanded <=> collapsed, void => collapsed', /*#__PURE__*/animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n\nlet MatExpansionPanelContent = /*#__PURE__*/(() => {\n  class MatExpansionPanelContent {\n    constructor(_template) {\n      this._template = _template;\n    }\n\n  }\n\n  MatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) {\n    return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  MatExpansionPanelContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatExpansionPanelContent,\n    selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]]\n  });\n  return MatExpansionPanelContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter for generating unique element ids. */\n\n\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\n\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst ɵ0 = undefined;\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n\nlet MatExpansionPanel = /*#__PURE__*/(() => {\n  class MatExpansionPanel extends CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n      super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n      this._viewContainerRef = _viewContainerRef;\n      this._animationMode = _animationMode;\n      this._hideToggle = false;\n      /** An event emitted after the body's expansion animation happens. */\n\n      this.afterExpand = new EventEmitter();\n      /** An event emitted after the body's collapse animation happens. */\n\n      this.afterCollapse = new EventEmitter();\n      /** Stream that emits for changes in `@Input` properties. */\n\n      this._inputChanges = new Subject();\n      /** ID for the associated header element. Used for a11y labelling. */\n\n      this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n      /** Stream of body animation done events. */\n\n      this._bodyAnimationDone = new Subject();\n      this.accordion = accordion;\n      this._document = _document; // We need a Subject with distinctUntilChanged, because the `done` event\n      // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n      this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n        return x.fromState === y.fromState && x.toState === y.toState;\n      })).subscribe(event => {\n        if (event.fromState !== 'void') {\n          if (event.toState === 'expanded') {\n            this.afterExpand.emit();\n          } else if (event.toState === 'collapsed') {\n            this.afterCollapse.emit();\n          }\n        }\n      });\n\n      if (defaultOptions) {\n        this.hideToggle = defaultOptions.hideToggle;\n      }\n    }\n    /** Whether the toggle indicator should be hidden. */\n\n\n    get hideToggle() {\n      return this._hideToggle || this.accordion && this.accordion.hideToggle;\n    }\n\n    set hideToggle(value) {\n      this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n\n\n    get togglePosition() {\n      return this._togglePosition || this.accordion && this.accordion.togglePosition;\n    }\n\n    set togglePosition(value) {\n      this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n\n\n    _hasSpacing() {\n      if (this.accordion) {\n        return this.expanded && this.accordion.displayMode === 'default';\n      }\n\n      return false;\n    }\n    /** Gets the expanded state string. */\n\n\n    _getExpandedState() {\n      return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n\n\n    toggle() {\n      this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n\n\n    close() {\n      this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n\n\n    open() {\n      this.expanded = true;\n    }\n\n    ngAfterContentInit() {\n      if (this._lazyContent) {\n        // Render the content as soon as the panel becomes open.\n        this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n      }\n    }\n\n    ngOnChanges(changes) {\n      this._inputChanges.next(changes);\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n\n      this._bodyAnimationDone.complete();\n\n      this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n\n\n    _containsFocus() {\n      if (this._body) {\n        const focusedElement = this._document.activeElement;\n        const bodyElement = this._body.nativeElement;\n        return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n      }\n\n      return false;\n    }\n\n  }\n\n  MatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) {\n    return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8));\n  };\n\n  MatExpansionPanel.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatExpansionPanel,\n    selectors: [[\"mat-expansion-panel\"]],\n    contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n      }\n    },\n    viewQuery: function MatExpansionPanel_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-expansion-panel\"],\n    hostVars: 6,\n    hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      expanded: \"expanded\",\n      hideToggle: \"hideToggle\",\n      togglePosition: \"togglePosition\"\n    },\n    outputs: {\n      opened: \"opened\",\n      closed: \"closed\",\n      expandedChange: \"expandedChange\",\n      afterExpand: \"afterExpand\",\n      afterCollapse: \"afterCollapse\"\n    },\n    exportAs: [\"matExpansionPanel\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {\n      provide: MAT_ACCORDION,\n      useValue: ɵ0\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 7,\n    vars: 4,\n    consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]],\n    template: function MatExpansionPanel_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) {\n          return ctx._bodyAnimationDone.next($event);\n        });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n      }\n    },\n    directives: [ɵngcc2.CdkPortalOutlet],\n    styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matExpansionAnimations.bodyExpansion]\n    },\n    changeDetection: 0\n  });\n  return MatExpansionPanel;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n\n\nlet MatExpansionPanelActionRow = /*#__PURE__*/(() => {\n  class MatExpansionPanelActionRow {}\n\n  MatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) {\n    return new (t || MatExpansionPanelActionRow)();\n  };\n\n  MatExpansionPanelActionRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatExpansionPanelActionRow,\n    selectors: [[\"mat-action-row\"]],\n    hostAttrs: [1, \"mat-action-row\"]\n  });\n  return MatExpansionPanelActionRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n\n/** @docs-private */\n\n\nclass MatExpansionPanelHeaderBase {}\n\nconst _MatExpansionPanelHeaderMixinBase = /*#__PURE__*/mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n\n\nlet MatExpansionPanelHeader = /*#__PURE__*/(() => {\n  class MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n      super();\n      this.panel = panel;\n      this._element = _element;\n      this._focusMonitor = _focusMonitor;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._animationMode = _animationMode;\n      this._parentChangeSubscription = Subscription.EMPTY;\n      const accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) : EMPTY;\n      this.tabIndex = parseInt(tabIndex || '') || 0; // Since the toggle state depends on an @Input on the panel, we\n      // need to subscribe and trigger change detection manually.\n\n      this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n        return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n      }))).subscribe(() => this._changeDetectorRef.markForCheck()); // Avoids focus being lost if the panel contained the focused element and was closed.\n\n      panel.closed.pipe(filter(() => panel._containsFocus())).subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n      if (defaultOptions) {\n        this.expandedHeight = defaultOptions.expandedHeight;\n        this.collapsedHeight = defaultOptions.collapsedHeight;\n      }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n\n\n    get disabled() {\n      return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n\n\n    _toggle() {\n      if (!this.disabled) {\n        this.panel.toggle();\n      }\n    }\n    /** Gets whether the panel is expanded. */\n\n\n    _isExpanded() {\n      return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n\n\n    _getExpandedState() {\n      return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n\n\n    _getPanelId() {\n      return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n\n\n    _getTogglePosition() {\n      return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n\n\n    _showToggle() {\n      return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n\n\n    _getHeaderHeight() {\n      const isExpanded = this._isExpanded();\n\n      if (isExpanded && this.expandedHeight) {\n        return this.expandedHeight;\n      } else if (!isExpanded && this.collapsedHeight) {\n        return this.collapsedHeight;\n      }\n\n      return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n\n\n    _keydown(event) {\n      switch (event.keyCode) {\n        // Toggle for space and enter keys.\n        case SPACE:\n        case ENTER:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n\n            this._toggle();\n          }\n\n          break;\n\n        default:\n          if (this.panel.accordion) {\n            this.panel.accordion._handleHeaderKeydown(event);\n          }\n\n          return;\n      }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n\n\n    focus(origin, options) {\n      if (origin) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n      } else {\n        this._element.nativeElement.focus(options);\n      }\n    }\n\n    ngAfterViewInit() {\n      this._focusMonitor.monitor(this._element).subscribe(origin => {\n        if (origin && this.panel.accordion) {\n          this.panel.accordion._handleHeaderFocus(this);\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this._parentChangeSubscription.unsubscribe();\n\n      this._focusMonitor.stopMonitoring(this._element);\n    }\n\n  }\n\n  MatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) {\n    return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatExpansionPanelHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatExpansionPanelHeader,\n    selectors: [[\"mat-expansion-panel-header\"]],\n    hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"],\n    hostVars: 15,\n    hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() {\n          return ctx._toggle();\n        })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      tabIndex: \"tabIndex\",\n      expandedHeight: \"expandedHeight\",\n      collapsedHeight: \"collapsedHeight\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c4,\n    decls: 5,\n    vars: 1,\n    consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]],\n    template: function MatExpansionPanelHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n      }\n    },\n    directives: [ɵngcc4.NgIf],\n    styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matExpansionAnimations.indicatorRotate]\n    },\n    changeDetection: 0\n  });\n  return MatExpansionPanelHeader;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n\n\nlet MatExpansionPanelDescription = /*#__PURE__*/(() => {\n  class MatExpansionPanelDescription {}\n\n  MatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) {\n    return new (t || MatExpansionPanelDescription)();\n  };\n\n  MatExpansionPanelDescription.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatExpansionPanelDescription,\n    selectors: [[\"mat-panel-description\"]],\n    hostAttrs: [1, \"mat-expansion-panel-header-description\"]\n  });\n  return MatExpansionPanelDescription;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n\n\nlet MatExpansionPanelTitle = /*#__PURE__*/(() => {\n  class MatExpansionPanelTitle {}\n\n  MatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) {\n    return new (t || MatExpansionPanelTitle)();\n  };\n\n  MatExpansionPanelTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatExpansionPanelTitle,\n    selectors: [[\"mat-panel-title\"]],\n    hostAttrs: [1, \"mat-expansion-panel-header-title\"]\n  });\n  return MatExpansionPanelTitle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive for a Material Design Accordion.\n */\n\n\nlet MatAccordion = /*#__PURE__*/(() => {\n  class MatAccordion extends CdkAccordion {\n    constructor() {\n      super(...arguments);\n      /** Headers belonging to this accordion. */\n\n      this._ownHeaders = new QueryList();\n      this._hideToggle = false;\n      /**\n       * Display mode used for all expansion panels in the accordion. Currently two display\n       * modes exist:\n       *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n       *     panel at a different elevation from the rest of the accordion.\n       *  flat - no spacing is placed around expanded panels, showing all panels at the same\n       *     elevation.\n       */\n\n      this.displayMode = 'default';\n      /** The position of the expansion indicator. */\n\n      this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n\n\n    get hideToggle() {\n      return this._hideToggle;\n    }\n\n    set hideToggle(show) {\n      this._hideToggle = coerceBooleanProperty(show);\n    }\n\n    ngAfterContentInit() {\n      this._headers.changes.pipe(startWith(this._headers)).subscribe(headers => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n\n        this._ownHeaders.notifyOnChanges();\n      });\n\n      this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n\n\n    _handleHeaderKeydown(event) {\n      this._keyManager.onKeydown(event);\n    }\n\n    _handleHeaderFocus(header) {\n      this._keyManager.updateActiveItem(header);\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n\n      this._ownHeaders.destroy();\n    }\n\n  }\n\n  MatAccordion.ɵfac = /*@__PURE__*/function () {\n    let ɵMatAccordion_BaseFactory;\n    return function MatAccordion_Factory(t) {\n      return (ɵMatAccordion_BaseFactory || (ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion)))(t || MatAccordion);\n    };\n  }();\n\n  MatAccordion.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatAccordion,\n    selectors: [[\"mat-accordion\"]],\n    contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-accordion\"],\n    hostVars: 2,\n    hostBindings: function MatAccordion_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n      }\n    },\n    inputs: {\n      multi: \"multi\",\n      displayMode: \"displayMode\",\n      togglePosition: \"togglePosition\",\n      hideToggle: \"hideToggle\"\n    },\n    exportAs: [\"matAccordion\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_ACCORDION,\n      useExisting: MatAccordion\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatAccordion;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatExpansionModule = /*#__PURE__*/(() => {\n  class MatExpansionModule {}\n\n  MatExpansionModule.ɵfac = function MatExpansionModule_Factory(t) {\n    return new (t || MatExpansionModule)();\n  };\n\n  MatExpansionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatExpansionModule\n  });\n  MatExpansionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]]\n  });\n  return MatExpansionModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, {\n    declarations: function () {\n      return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule];\n    },\n    exports: function () {\n      return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, ɵ0 };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/@angular/material/__ivy_ngcc__/fesm2015/expansion.js"],"names":["CdkAccordionItem","CdkAccordion","CdkAccordionModule","TemplatePortal","PortalModule","DOCUMENT","CommonModule","InjectionToken","Directive","TemplateRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","SkipSelf","Inject","ChangeDetectorRef","ViewContainerRef","Input","Output","ContentChild","ViewChild","Host","ElementRef","Attribute","QueryList","ContentChildren","NgModule","mixinTabIndex","MatCommonModule","coerceBooleanProperty","FocusMonitor","FocusKeyManager","distinctUntilChanged","startWith","filter","take","ENTER","hasModifierKey","SPACE","ANIMATION_MODULE_TYPE","Subject","Subscription","EMPTY","merge","trigger","state","style","transition","animate","UniqueSelectionDispatcher","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatExpansionPanel_ng_template_5_Template","rf","ctx","_c1","_c2","MatExpansionPanelHeader_span_4_Template","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵproperty","_getExpandedState","_c3","_c4","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","transform","bodyExpansion","height","visibility","MatExpansionPanelContent","constructor","_template","ɵfac","MatExpansionPanelContent_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","ɵ0","undefined","MatExpansionPanel","accordion","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","x","y","fromState","toState","subscribe","event","emit","hideToggle","value","togglePosition","_togglePosition","_hasSpacing","expanded","displayMode","toggle","close","open","ngAfterContentInit","_lazyContent","opened","_portal","ngOnChanges","changes","next","ngOnDestroy","complete","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","MatExpansionPanel_Factory","ɵcmp","ɵɵdefineComponent","contentQueries","MatExpansionPanel_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatExpansionPanel_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatExpansionPanel_HostBindings","ɵɵclassProp","inputs","disabled","outputs","closed","expandedChange","exportAs","features","ɵɵProvidersFeature","provide","useValue","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatExpansionPanel_Template","ɵɵprojectionDef","ɵɵprojection","ɵɵelementStart","ɵɵlistener","MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener","$event","ɵɵtemplate","ɵɵelementEnd","ɵɵadvance","id","ɵɵattribute","directives","CdkPortalOutlet","styles","encapsulation","data","animation","changeDetection","MatExpansionPanelActionRow","MatExpansionPanelActionRow_Factory","MatExpansionPanelHeaderBase","_MatExpansionPanelHeaderMixinBase","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","parseInt","markForCheck","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","unsubscribe","stopMonitoring","MatExpansionPanelHeader_Factory","ɵɵinjectAttribute","MatExpansionPanelHeader_HostBindings","MatExpansionPanelHeader_click_HostBindingHandler","MatExpansionPanelHeader_keydown_HostBindingHandler","ɵɵstyleProp","MatExpansionPanelHeader_Template","NgIf","MatExpansionPanelDescription","MatExpansionPanelDescription_Factory","MatExpansionPanelTitle","MatExpansionPanelTitle_Factory","MatAccordion","arguments","_ownHeaders","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","ɵMatAccordion_BaseFactory","MatAccordion_Factory","ɵɵgetInheritedFactory","MatAccordion_ContentQueries","MatAccordion_HostBindings","multi","useExisting","MatExpansionModule","MatExpansionModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,YAA3B,EAAyCC,kBAAzC,QAAmE,wBAAnE;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,qBAA7C;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,iBAAvC;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,YAAjD,EAA+DC,SAA/D,EAA0EC,iBAA1E,EAA6FC,uBAA7F,EAAsHC,QAAtH,EAAgIC,QAAhI,EAA0IC,MAA1I,EAAkJC,iBAAlJ,EAAqKC,gBAArK,EAAuLC,KAAvL,EAA8LC,MAA9L,EAAsMC,YAAtM,EAAoNC,SAApN,EAA+NC,IAA/N,EAAqOC,UAArO,EAAiPC,SAAjP,EAA4PC,SAA5P,EAAuQC,eAAvQ,EAAwRC,QAAxR,QAAwS,eAAxS;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,wBAA/C;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,mBAA9C;AACA,SAASC,oBAAT,EAA+BC,SAA/B,EAA0CC,MAA1C,EAAkDC,IAAlD,QAA8D,gBAA9D;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,KAAhC,QAA6C,uBAA7C;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,KAAhC,EAAuCC,KAAvC,QAAoD,MAApD;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,OAA5C,QAA2D,qBAA3D;AACA,SAASC,yBAAT,QAA0C,0BAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,0BAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,qBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AAEA,MAAMC,GAAG,GAAG,CAAC,MAAD,CAAZ;;AACA,SAASC,wCAAT,CAAkDC,EAAlD,EAAsDC,GAAtD,EAA2D,CAAG;;AAC9D,MAAMC,GAAG,GAAG,CAAC,CAAC,CAAC,4BAAD,CAAD,CAAD,EAAmC,GAAnC,EAAwC,CAAC,CAAC,gBAAD,CAAD,CAAxC,CAAZ;AACA,MAAMC,GAAG,GAAG,CAAC,4BAAD,EAA+B,GAA/B,EAAoC,gBAApC,CAAZ;;AACA,SAASC,uCAAT,CAAiDJ,EAAjD,EAAqDC,GAArD,EAA0D;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AACpEP,IAAAA,MAAM,CAACY,SAAP,CAAiB,CAAjB,EAAoB,MAApB,EAA4B,CAA5B;AACH;;AAAC,MAAIL,EAAE,GAAG,CAAT,EAAY;AACV,UAAMM,MAAM,GAAGb,MAAM,CAACc,aAAP,EAAf;AACAd,IAAAA,MAAM,CAACe,UAAP,CAAkB,kBAAlB,EAAsCF,MAAM,CAACG,iBAAP,EAAtC;AACH;AAAE;;AACH,MAAMC,GAAG,GAAG,CAAC,CAAC,CAAC,iBAAD,CAAD,CAAD,EAAwB,CAAC,CAAC,uBAAD,CAAD,CAAxB,EAAqD,GAArD,CAAZ;AACA,MAAMC,GAAG,GAAG,CAAC,iBAAD,EAAoB,uBAApB,EAA6C,GAA7C,CAAZ;AACA,MAAMC,aAAa,gBAAG,IAAIhE,cAAJ,CAAmB,eAAnB,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA,MAAMiE,gCAAgC,GAAG,mCAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAG;AAC3B;AACAC,EAAAA,eAAe,eAAE5B,OAAO,CAAC,iBAAD,EAAoB,cACxCC,KAAK,CAAC,iBAAD,eAAoBC,KAAK,CAAC;AAAE2B,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAzB,CADmC,eAExC5B,KAAK,CAAC,UAAD,eAAaC,KAAK,CAAC;AAAE2B,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAlB,CAFmC,eAGxC1B,UAAU,CAAC,2CAAD,eAA8CC,OAAO,CAACsB,gCAAD,CAArD,CAH8B,CAApB,CAFG;;AAO3B;AACAI,EAAAA,aAAa,eAAE9B,OAAO,CAAC,eAAD,EAAkB,cACpCC,KAAK,CAAC,iBAAD,eAAoBC,KAAK,CAAC;AAAE6B,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GAAD,CAAzB,CAD+B,eAEpC/B,KAAK,CAAC,UAAD,eAAaC,KAAK,CAAC;AAAE6B,IAAAA,MAAM,EAAE,GAAV;AAAeC,IAAAA,UAAU,EAAE;AAA3B,GAAD,CAAlB,CAF+B,eAGpC7B,UAAU,CAAC,2CAAD,eAA8CC,OAAO,CAACsB,gCAAD,CAArD,CAH0B,CAAlB;AARK,CAA/B;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;IACMO,wB;AAAN,QAAMA,wBAAN,CAA+B;AAC3BC,IAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,WAAKA,SAAL,GAAiBA,SAAjB;AACH;;AAH0B;;AAK/BF,EAAAA,wBAAwB,CAACG,IAAzB,GAAgC,SAASC,gCAAT,CAA0CC,CAA1C,EAA6C;AAAE,WAAO,KAAKA,CAAC,IAAIL,wBAAV,EAAoC3B,MAAM,CAACiC,iBAAP,CAAyBjC,MAAM,CAAC3C,WAAhC,CAApC,CAAP;AAA2F,GAA1K;;AACAsE,EAAAA,wBAAwB,CAACO,IAAzB,GAAgC,aAAclC,MAAM,CAACmC,iBAAP,CAAyB;AAAEC,IAAAA,IAAI,EAAET,wBAAR;AAAkCU,IAAAA,SAAS,EAAE,CAAC,CAAC,aAAD,EAAgB,0BAAhB,EAA4C,EAA5C,CAAD;AAA7C,GAAzB,CAA9C;SANMV,wB;;;AAUN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOW,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAKyD,CALxE;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,IAAIC,QAAQ,GAAG,CAAf;AACA;AACA;AACA;AACA;;AACA,MAAMC,mCAAmC,gBAAG,IAAIrF,cAAJ,CAAmB,qCAAnB,CAA5C;AACA,MAAMsF,EAAE,GAAGC,SAAX;AACA;AACA;AACA;AACA;;IACMC,iB;AAAN,QAAMA,iBAAN,SAAgC/F,gBAAhC,CAAiD;AAC7CgF,IAAAA,WAAW,CAACgB,SAAD,EAAYC,kBAAZ,EAAgCC,0BAAhC,EAA4DC,iBAA5D,EAA+EC,SAA/E,EAA0FC,cAA1F,EAA0GC,cAA1G,EAA0H;AACjI,YAAMN,SAAN,EAAiBC,kBAAjB,EAAqCC,0BAArC;AACA,WAAKC,iBAAL,GAAyBA,iBAAzB;AACA,WAAKE,cAAL,GAAsBA,cAAtB;AACA,WAAKE,WAAL,GAAmB,KAAnB;AACA;;AACA,WAAKC,WAAL,GAAmB,IAAI9F,YAAJ,EAAnB;AACA;;AACA,WAAK+F,aAAL,GAAqB,IAAI/F,YAAJ,EAArB;AACA;;AACA,WAAKgG,aAAL,GAAqB,IAAIhE,OAAJ,EAArB;AACA;;AACA,WAAKiE,SAAL,GAAkB,8BAA6BhB,QAAQ,EAAG,EAA1D;AACA;;AACA,WAAKiB,kBAAL,GAA0B,IAAIlE,OAAJ,EAA1B;AACA,WAAKsD,SAAL,GAAiBA,SAAjB;AACA,WAAKI,SAAL,GAAiBA,SAAjB,CAhBiI,CAiBjI;AACA;;AACA,WAAKQ,kBAAL,CAAwBC,IAAxB,CAA6B3E,oBAAoB,CAAC,CAAC4E,CAAD,EAAIC,CAAJ,KAAU;AACxD,eAAOD,CAAC,CAACE,SAAF,KAAgBD,CAAC,CAACC,SAAlB,IAA+BF,CAAC,CAACG,OAAF,KAAcF,CAAC,CAACE,OAAtD;AACH,OAFgD,CAAjD,EAEIC,SAFJ,CAEcC,KAAK,IAAI;AACnB,YAAIA,KAAK,CAACH,SAAN,KAAoB,MAAxB,EAAgC;AAC5B,cAAIG,KAAK,CAACF,OAAN,KAAkB,UAAtB,EAAkC;AAC9B,iBAAKT,WAAL,CAAiBY,IAAjB;AACH,WAFD,MAGK,IAAID,KAAK,CAACF,OAAN,KAAkB,WAAtB,EAAmC;AACpC,iBAAKR,aAAL,CAAmBW,IAAnB;AACH;AACJ;AACJ,OAXD;;AAYA,UAAId,cAAJ,EAAoB;AAChB,aAAKe,UAAL,GAAkBf,cAAc,CAACe,UAAjC;AACH;AACJ;AACD;;;AACc,QAAVA,UAAU,GAAG;AACb,aAAO,KAAKd,WAAL,IAAqB,KAAKP,SAAL,IAAkB,KAAKA,SAAL,CAAeqB,UAA7D;AACH;;AACa,QAAVA,UAAU,CAACC,KAAD,EAAQ;AAClB,WAAKf,WAAL,GAAmBxE,qBAAqB,CAACuF,KAAD,CAAxC;AACH;AACD;;;AACkB,QAAdC,cAAc,GAAG;AACjB,aAAO,KAAKC,eAAL,IAAyB,KAAKxB,SAAL,IAAkB,KAAKA,SAAL,CAAeuB,cAAjE;AACH;;AACiB,QAAdA,cAAc,CAACD,KAAD,EAAQ;AACtB,WAAKE,eAAL,GAAuBF,KAAvB;AACH;AACD;;;AACAG,IAAAA,WAAW,GAAG;AACV,UAAI,KAAKzB,SAAT,EAAoB;AAChB,eAAO,KAAK0B,QAAL,IAAiB,KAAK1B,SAAL,CAAe2B,WAAf,KAA+B,SAAvD;AACH;;AACD,aAAO,KAAP;AACH;AACD;;;AACAvD,IAAAA,iBAAiB,GAAG;AAChB,aAAO,KAAKsD,QAAL,GAAgB,UAAhB,GAA6B,WAApC;AACH;AACD;;;AACAE,IAAAA,MAAM,GAAG;AACL,WAAKF,QAAL,GAAgB,CAAC,KAAKA,QAAtB;AACH;AACD;;;AACAG,IAAAA,KAAK,GAAG;AACJ,WAAKH,QAAL,GAAgB,KAAhB;AACH;AACD;;;AACAI,IAAAA,IAAI,GAAG;AACH,WAAKJ,QAAL,GAAgB,IAAhB;AACH;;AACDK,IAAAA,kBAAkB,GAAG;AACjB,UAAI,KAAKC,YAAT,EAAuB;AACnB;AACA,aAAKC,MAAL,CAAYpB,IAAZ,CAAiB1E,SAAS,CAAC,IAAD,CAA1B,EAAkCC,MAAM,CAAC,MAAM,KAAKsF,QAAL,IAAiB,CAAC,KAAKQ,OAA9B,CAAxC,EAAgF7F,IAAI,CAAC,CAAD,CAApF,EAAyF6E,SAAzF,CAAmG,MAAM;AACrG,eAAKgB,OAAL,GAAe,IAAI/H,cAAJ,CAAmB,KAAK6H,YAAL,CAAkB/C,SAArC,EAAgD,KAAKkB,iBAArD,CAAf;AACH,SAFD;AAGH;AACJ;;AACDgC,IAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,WAAK1B,aAAL,CAAmB2B,IAAnB,CAAwBD,OAAxB;AACH;;AACDE,IAAAA,WAAW,GAAG;AACV,YAAMA,WAAN;;AACA,WAAK1B,kBAAL,CAAwB2B,QAAxB;;AACA,WAAK7B,aAAL,CAAmB6B,QAAnB;AACH;AACD;;;AACAC,IAAAA,cAAc,GAAG;AACb,UAAI,KAAKC,KAAT,EAAgB;AACZ,cAAMC,cAAc,GAAG,KAAKtC,SAAL,CAAeuC,aAAtC;AACA,cAAMC,WAAW,GAAG,KAAKH,KAAL,CAAWI,aAA/B;AACA,eAAOH,cAAc,KAAKE,WAAnB,IAAkCA,WAAW,CAACE,QAAZ,CAAqBJ,cAArB,CAAzC;AACH;;AACD,aAAO,KAAP;AACH;;AAjG4C;;AAmGjD3C,EAAAA,iBAAiB,CAACb,IAAlB,GAAyB,SAAS6D,yBAAT,CAAmC3D,CAAnC,EAAsC;AAAE,WAAO,KAAKA,CAAC,IAAIW,iBAAV,EAA6B3C,MAAM,CAACiC,iBAAP,CAAyBd,aAAzB,EAAwC,EAAxC,CAA7B,EAA0EnB,MAAM,CAACiC,iBAAP,CAAyBjC,MAAM,CAACnC,iBAAhC,CAA1E,EAA8HmC,MAAM,CAACiC,iBAAP,CAAyBhC,MAAM,CAACF,yBAAhC,CAA9H,EAA0LC,MAAM,CAACiC,iBAAP,CAAyBjC,MAAM,CAAClC,gBAAhC,CAA1L,EAA6OkC,MAAM,CAACiC,iBAAP,CAAyBhF,QAAzB,CAA7O,EAAiR+C,MAAM,CAACiC,iBAAP,CAAyB5C,qBAAzB,EAAgD,CAAhD,CAAjR,EAAqUW,MAAM,CAACiC,iBAAP,CAAyBO,mCAAzB,EAA8D,CAA9D,CAArU,CAAP;AAAgZ,GAAjd;;AACAG,EAAAA,iBAAiB,CAACiD,IAAlB,GAAyB,aAAc5F,MAAM,CAAC6F,iBAAP,CAAyB;AAAEzD,IAAAA,IAAI,EAAEO,iBAAR;AAA2BN,IAAAA,SAAS,EAAE,CAAC,CAAC,qBAAD,CAAD,CAAtC;AAAiEyD,IAAAA,cAAc,EAAE,SAASC,gCAAT,CAA0CxF,EAA1C,EAA8CC,GAA9C,EAAmDwF,QAAnD,EAA6D;AAAE,UAAIzF,EAAE,GAAG,CAAT,EAAY;AACpNP,QAAAA,MAAM,CAACiG,cAAP,CAAsBD,QAAtB,EAAgCrE,wBAAhC,EAA0D,CAA1D;AACH;;AAAC,UAAIpB,EAAE,GAAG,CAAT,EAAY;AACV,YAAI2F,EAAJ;;AACAlG,QAAAA,MAAM,CAACmG,cAAP,CAAsBD,EAAE,GAAGlG,MAAM,CAACoG,WAAP,EAA3B,MAAqD5F,GAAG,CAACoE,YAAJ,GAAmBsB,EAAE,CAACG,KAA3E;AACH;AAAE,KALyD;AAKvDC,IAAAA,SAAS,EAAE,SAASC,uBAAT,CAAiChG,EAAjC,EAAqCC,GAArC,EAA0C;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AACpEP,QAAAA,MAAM,CAACwG,WAAP,CAAmBnG,GAAnB,EAAwB,CAAxB;AACH;;AAAC,UAAIE,EAAE,GAAG,CAAT,EAAY;AACV,YAAI2F,EAAJ;;AACAlG,QAAAA,MAAM,CAACmG,cAAP,CAAsBD,EAAE,GAAGlG,MAAM,CAACoG,WAAP,EAA3B,MAAqD5F,GAAG,CAAC6E,KAAJ,GAAYa,EAAE,CAACG,KAApE;AACH;AAAE,KAVyD;AAUvDI,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,qBAAJ,CAV4C;AAUhBC,IAAAA,QAAQ,EAAE,CAVM;AAUHC,IAAAA,YAAY,EAAE,SAASC,8BAAT,CAAwCrG,EAAxC,EAA4CC,GAA5C,EAAiD;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AAClIP,QAAAA,MAAM,CAAC6G,WAAP,CAAmB,cAAnB,EAAmCrG,GAAG,CAAC8D,QAAvC,EAAiD,yBAAjD,EAA4E9D,GAAG,CAACyC,cAAJ,KAAuB,gBAAnG,EAAqH,6BAArH,EAAoJzC,GAAG,CAAC6D,WAAJ,EAApJ;AACH;AAAE,KAZyD;AAYvDyC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,QAAQ,EAAE,UAAZ;AAAwBzC,MAAAA,QAAQ,EAAE,UAAlC;AAA8CL,MAAAA,UAAU,EAAE,YAA1D;AAAwEE,MAAAA,cAAc,EAAE;AAAxF,KAZ+C;AAY6D6C,IAAAA,OAAO,EAAE;AAAEnC,MAAAA,MAAM,EAAE,QAAV;AAAoBoC,MAAAA,MAAM,EAAE,QAA5B;AAAsCC,MAAAA,cAAc,EAAE,gBAAtD;AAAwE9D,MAAAA,WAAW,EAAE,aAArF;AAAoGC,MAAAA,aAAa,EAAE;AAAnH,KAZtE;AAY4M8D,IAAAA,QAAQ,EAAE,CAAC,mBAAD,CAZtN;AAY6OC,IAAAA,QAAQ,EAAE,CAACpH,MAAM,CAACqH,kBAAP,CAA0B,CACtU;AACA;AACA;AAAEC,MAAAA,OAAO,EAAEnG,aAAX;AAA0BoG,MAAAA,QAAQ,EAAE9E;AAApC,KAHsU,CAA1B,CAAD,EAI3SzC,MAAM,CAACwH,0BAJoS,EAIxQxH,MAAM,CAACyH,oBAJiQ,CAZvP;AAgBaC,IAAAA,kBAAkB,EAAEhH,GAhBjC;AAgBsCiH,IAAAA,KAAK,EAAE,CAhB7C;AAgBgDC,IAAAA,IAAI,EAAE,CAhBtD;AAgByDC,IAAAA,MAAM,EAAE,CAAC,CAAC,MAAD,EAAS,QAAT,EAAmB,CAAnB,EAAsB,6BAAtB,EAAqD,CAArD,EAAwD,IAAxD,CAAD,EAAgE,CAAC,MAAD,EAAS,EAAT,CAAhE,EAA8E,CAAC,CAAD,EAAI,0BAAJ,CAA9E,EAA+G,CAAC,CAAD,EAAI,iBAAJ,CAA/G,CAhBjE;AAgByMC,IAAAA,QAAQ,EAAE,SAASC,0BAAT,CAAoCxH,EAApC,EAAwCC,GAAxC,EAA6C;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AACtUP,QAAAA,MAAM,CAACgI,eAAP,CAAuBvH,GAAvB;AACAT,QAAAA,MAAM,CAACiI,YAAP,CAAoB,CAApB;AACAjI,QAAAA,MAAM,CAACkI,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC;AACAlI,QAAAA,MAAM,CAACmI,UAAP,CAAkB,qBAAlB,EAAyC,SAASC,sEAAT,CAAgFC,MAAhF,EAAwF;AAAE,iBAAO7H,GAAG,CAACgD,kBAAJ,CAAuByB,IAAvB,CAA4BoD,MAA5B,CAAP;AAA6C,SAAhL;AACArI,QAAAA,MAAM,CAACkI,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACAlI,QAAAA,MAAM,CAACiI,YAAP,CAAoB,CAApB,EAAuB,CAAvB;AACAjI,QAAAA,MAAM,CAACsI,UAAP,CAAkB,CAAlB,EAAqBhI,wCAArB,EAA+D,CAA/D,EAAkE,CAAlE,EAAqE,aAArE,EAAoF,CAApF;AACAN,QAAAA,MAAM,CAACuI,YAAP;AACAvI,QAAAA,MAAM,CAACiI,YAAP,CAAoB,CAApB,EAAuB,CAAvB;AACAjI,QAAAA,MAAM,CAACuI,YAAP;AACH;;AAAC,UAAIhI,EAAE,GAAG,CAAT,EAAY;AACVP,QAAAA,MAAM,CAACwI,SAAP,CAAiB,CAAjB;AACAxI,QAAAA,MAAM,CAACe,UAAP,CAAkB,gBAAlB,EAAoCP,GAAG,CAACQ,iBAAJ,EAApC,EAA6D,IAA7D,EAAmER,GAAG,CAACiI,EAAvE;AACAzI,QAAAA,MAAM,CAAC0I,WAAP,CAAmB,iBAAnB,EAAsClI,GAAG,CAAC+C,SAA1C;AACAvD,QAAAA,MAAM,CAACwI,SAAP,CAAiB,CAAjB;AACAxI,QAAAA,MAAM,CAACe,UAAP,CAAkB,iBAAlB,EAAqCP,GAAG,CAACsE,OAAzC;AACH;AAAE,KAjCyD;AAiCvD6D,IAAAA,UAAU,EAAE,CAACzI,MAAM,CAAC0I,eAAR,CAjC2C;AAiCjBC,IAAAA,MAAM,EAAE,CAAC,umDAAD,CAjCS;AAiCkmDC,IAAAA,aAAa,EAAE,CAjCjnD;AAiConDC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,SAAS,EAAE,CAAC3H,sBAAsB,CAACG,aAAxB;AAAb,KAjC1nD;AAiCirDyH,IAAAA,eAAe,EAAE;AAjClsD,GAAzB,CAAvC;SApGMtG,iB;;;AAuJN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOL,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AA0DC,CA1DhB;AA2DA;AACA;AACA;;;IACM4G,0B;AAAN,QAAMA,0BAAN,CAAiC;;AAEjCA,EAAAA,0BAA0B,CAACpH,IAA3B,GAAkC,SAASqH,kCAAT,CAA4CnH,CAA5C,EAA+C;AAAE,WAAO,KAAKA,CAAC,IAAIkH,0BAAV,GAAP;AAAiD,GAApI;;AACAA,EAAAA,0BAA0B,CAAChH,IAA3B,GAAkC,aAAclC,MAAM,CAACmC,iBAAP,CAAyB;AAAEC,IAAAA,IAAI,EAAE8G,0BAAR;AAAoC7G,IAAAA,SAAS,EAAE,CAAC,CAAC,gBAAD,CAAD,CAA/C;AAAqEoE,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,gBAAJ;AAAhF,GAAzB,CAAhD;SAHMyC,0B;;;AAIN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAO5G,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAQO,CARtB;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAM8G,2BAAN,CAAkC;;AAElC,MAAMC,iCAAiC,gBAAG5K,aAAa,CAAC2K,2BAAD,CAAvD;AACA;AACA;AACA;;;IACME,uB;AAAN,QAAMA,uBAAN,SAAsCD,iCAAtC,CAAwE;AACpEzH,IAAAA,WAAW,CAAC2H,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAiC5G,kBAAjC,EAAqDK,cAArD,EAAqED,cAArE,EAAqFyG,QAArF,EAA+F;AACtG;AACA,WAAKH,KAAL,GAAaA,KAAb;AACA,WAAKC,QAAL,GAAgBA,QAAhB;AACA,WAAKC,aAAL,GAAqBA,aAArB;AACA,WAAK5G,kBAAL,GAA0BA,kBAA1B;AACA,WAAKI,cAAL,GAAsBA,cAAtB;AACA,WAAK0G,yBAAL,GAAiCpK,YAAY,CAACC,KAA9C;AACA,YAAMoK,yBAAyB,GAAGL,KAAK,CAAC3G,SAAN,GAC9B2G,KAAK,CAAC3G,SAAN,CAAgBiH,aAAhB,CAA8BpG,IAA9B,CAAmCzE,MAAM,CAACgG,OAAO,IAAI,CAAC,EAAEA,OAAO,CAAC,YAAD,CAAP,IAAyBA,OAAO,CAAC,gBAAD,CAAlC,CAAb,CAAzC,CAD8B,GAE9BxF,KAFJ;AAGA,WAAKkK,QAAL,GAAgBI,QAAQ,CAACJ,QAAQ,IAAI,EAAb,CAAR,IAA4B,CAA5C,CAXsG,CAYtG;AACA;;AACA,WAAKC,yBAAL,GACIlK,KAAK,CAAC8J,KAAK,CAAC1E,MAAP,EAAe0E,KAAK,CAACtC,MAArB,EAA6B2C,yBAA7B,EAAwDL,KAAK,CAACjG,aAAN,CAAoBG,IAApB,CAAyBzE,MAAM,CAACgG,OAAO,IAAI;AACpG,eAAO,CAAC,EAAEA,OAAO,CAAC,YAAD,CAAP,IACNA,OAAO,CAAC,UAAD,CADD,IAENA,OAAO,CAAC,gBAAD,CAFH,CAAR;AAGH,OAJ2F,CAA/B,CAAxD,CAAL,CAKKlB,SALL,CAKe,MAAM,KAAKjB,kBAAL,CAAwBkH,YAAxB,EALrB,CADJ,CAdsG,CAqBtG;;AACAR,MAAAA,KAAK,CAACtC,MAAN,CACKxD,IADL,CACUzE,MAAM,CAAC,MAAMuK,KAAK,CAACnE,cAAN,EAAP,CADhB,EAEKtB,SAFL,CAEe,MAAM2F,aAAa,CAACO,QAAd,CAAuBR,QAAvB,EAAiC,SAAjC,CAFrB;;AAGA,UAAItG,cAAJ,EAAoB;AAChB,aAAK+G,cAAL,GAAsB/G,cAAc,CAAC+G,cAArC;AACA,aAAKC,eAAL,GAAuBhH,cAAc,CAACgH,eAAtC;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACgB,QAARnD,QAAQ,GAAG;AACX,aAAO,KAAKwC,KAAL,CAAWxC,QAAlB;AACH;AACD;;;AACAoD,IAAAA,OAAO,GAAG;AACN,UAAI,CAAC,KAAKpD,QAAV,EAAoB;AAChB,aAAKwC,KAAL,CAAW/E,MAAX;AACH;AACJ;AACD;;;AACA4F,IAAAA,WAAW,GAAG;AACV,aAAO,KAAKb,KAAL,CAAWjF,QAAlB;AACH;AACD;;;AACAtD,IAAAA,iBAAiB,GAAG;AAChB,aAAO,KAAKuI,KAAL,CAAWvI,iBAAX,EAAP;AACH;AACD;;;AACAqJ,IAAAA,WAAW,GAAG;AACV,aAAO,KAAKd,KAAL,CAAWd,EAAlB;AACH;AACD;;;AACA6B,IAAAA,kBAAkB,GAAG;AACjB,aAAO,KAAKf,KAAL,CAAWpF,cAAlB;AACH;AACD;;;AACAoG,IAAAA,WAAW,GAAG;AACV,aAAO,CAAC,KAAKhB,KAAL,CAAWtF,UAAZ,IAA0B,CAAC,KAAKsF,KAAL,CAAWxC,QAA7C;AACH;AACD;AACJ;AACA;AACA;;;AACIyD,IAAAA,gBAAgB,GAAG;AACf,YAAMC,UAAU,GAAG,KAAKL,WAAL,EAAnB;;AACA,UAAIK,UAAU,IAAI,KAAKR,cAAvB,EAAuC;AACnC,eAAO,KAAKA,cAAZ;AACH,OAFD,MAGK,IAAI,CAACQ,UAAD,IAAe,KAAKP,eAAxB,EAAyC;AAC1C,eAAO,KAAKA,eAAZ;AACH;;AACD,aAAO,IAAP;AACH;AACD;;;AACAQ,IAAAA,QAAQ,CAAC3G,KAAD,EAAQ;AACZ,cAAQA,KAAK,CAAC4G,OAAd;AACI;AACA,aAAKvL,KAAL;AACA,aAAKF,KAAL;AACI,cAAI,CAACC,cAAc,CAAC4E,KAAD,CAAnB,EAA4B;AACxBA,YAAAA,KAAK,CAAC6G,cAAN;;AACA,iBAAKT,OAAL;AACH;;AACD;;AACJ;AACI,cAAI,KAAKZ,KAAL,CAAW3G,SAAf,EAA0B;AACtB,iBAAK2G,KAAL,CAAW3G,SAAX,CAAqBiI,oBAArB,CAA0C9G,KAA1C;AACH;;AACD;AAbR;AAeH;AACD;AACJ;AACA;AACA;AACA;;;AACI+G,IAAAA,KAAK,CAACC,MAAD,EAASC,OAAT,EAAkB;AACnB,UAAID,MAAJ,EAAY;AACR,aAAKtB,aAAL,CAAmBO,QAAnB,CAA4B,KAAKR,QAAjC,EAA2CuB,MAA3C,EAAmDC,OAAnD;AACH,OAFD,MAGK;AACD,aAAKxB,QAAL,CAAc/D,aAAd,CAA4BqF,KAA5B,CAAkCE,OAAlC;AACH;AACJ;;AACDC,IAAAA,eAAe,GAAG;AACd,WAAKxB,aAAL,CAAmByB,OAAnB,CAA2B,KAAK1B,QAAhC,EAA0C1F,SAA1C,CAAoDiH,MAAM,IAAI;AAC1D,YAAIA,MAAM,IAAI,KAAKxB,KAAL,CAAW3G,SAAzB,EAAoC;AAChC,eAAK2G,KAAL,CAAW3G,SAAX,CAAqBuI,kBAArB,CAAwC,IAAxC;AACH;AACJ,OAJD;AAKH;;AACDjG,IAAAA,WAAW,GAAG;AACV,WAAKyE,yBAAL,CAA+ByB,WAA/B;;AACA,WAAK3B,aAAL,CAAmB4B,cAAnB,CAAkC,KAAK7B,QAAvC;AACH;;AAvHmE;;AAyHxEF,EAAAA,uBAAuB,CAACxH,IAAxB,GAA+B,SAASwJ,+BAAT,CAAyCtJ,CAAzC,EAA4C;AAAE,WAAO,KAAKA,CAAC,IAAIsH,uBAAV,EAAmCtJ,MAAM,CAACiC,iBAAP,CAAyBU,iBAAzB,EAA4C,CAA5C,CAAnC,EAAmF3C,MAAM,CAACiC,iBAAP,CAAyBjC,MAAM,CAAC5B,UAAhC,CAAnF,EAAgI4B,MAAM,CAACiC,iBAAP,CAAyB9B,MAAM,CAACvB,YAAhC,CAAhI,EAA+KoB,MAAM,CAACiC,iBAAP,CAAyBjC,MAAM,CAACnC,iBAAhC,CAA/K,EAAmOmC,MAAM,CAACiC,iBAAP,CAAyBO,mCAAzB,EAA8D,CAA9D,CAAnO,EAAqSxC,MAAM,CAACiC,iBAAP,CAAyB5C,qBAAzB,EAAgD,CAAhD,CAArS,EAAyVW,MAAM,CAACuL,iBAAP,CAAyB,UAAzB,CAAzV,CAAP;AAAwY,GAArd;;AACAjC,EAAAA,uBAAuB,CAAC1D,IAAxB,GAA+B,aAAc5F,MAAM,CAAC6F,iBAAP,CAAyB;AAAEzD,IAAAA,IAAI,EAAEkH,uBAAR;AAAiCjH,IAAAA,SAAS,EAAE,CAAC,CAAC,4BAAD,CAAD,CAA5C;AAA8EoE,IAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,CAAnB,EAAsB,4BAAtB,EAAoD,qBAApD,CAAzF;AAAqKC,IAAAA,QAAQ,EAAE,EAA/K;AAAmLC,IAAAA,YAAY,EAAE,SAAS6E,oCAAT,CAA8CjL,EAA9C,EAAkDC,GAAlD,EAAuD;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AACpUP,QAAAA,MAAM,CAACmI,UAAP,CAAkB,OAAlB,EAA2B,SAASsD,gDAAT,GAA4D;AAAE,iBAAOjL,GAAG,CAAC2J,OAAJ,EAAP;AAAuB,SAAhH,EAAkH,SAAlH,EAA6H,SAASuB,kDAAT,CAA4DrD,MAA5D,EAAoE;AAAE,iBAAO7H,GAAG,CAACkK,QAAJ,CAAarC,MAAb,CAAP;AAA8B,SAAjO;AACH;;AAAC,UAAI9H,EAAE,GAAG,CAAT,EAAY;AACVP,QAAAA,MAAM,CAAC0I,WAAP,CAAmB,IAAnB,EAAyBlI,GAAG,CAAC+I,KAAJ,CAAUhG,SAAnC,EAA8C,UAA9C,EAA0D/C,GAAG,CAACkJ,QAA9D,EAAwE,eAAxE,EAAyFlJ,GAAG,CAAC6J,WAAJ,EAAzF,EAA4G,eAA5G,EAA6H7J,GAAG,CAAC4J,WAAJ,EAA7H,EAAgJ,eAAhJ,EAAiK5J,GAAG,CAAC+I,KAAJ,CAAUxC,QAA3K;AACA/G,QAAAA,MAAM,CAAC2L,WAAP,CAAmB,QAAnB,EAA6BnL,GAAG,CAACgK,gBAAJ,EAA7B;AACAxK,QAAAA,MAAM,CAAC6G,WAAP,CAAmB,cAAnB,EAAmCrG,GAAG,CAAC4J,WAAJ,EAAnC,EAAsD,sCAAtD,EAA8F5J,GAAG,CAAC8J,kBAAJ,OAA6B,OAA3H,EAAoI,uCAApI,EAA6K9J,GAAG,CAAC8J,kBAAJ,OAA6B,QAA1M,EAAoN,yBAApN,EAA+O9J,GAAG,CAACyC,cAAJ,KAAuB,gBAAtQ;AACH;AAAE,KAN+D;AAM7D6D,IAAAA,MAAM,EAAE;AAAE4C,MAAAA,QAAQ,EAAE,UAAZ;AAAwBO,MAAAA,cAAc,EAAE,gBAAxC;AAA0DC,MAAAA,eAAe,EAAE;AAA3E,KANqD;AAM2C9C,IAAAA,QAAQ,EAAE,CAACpH,MAAM,CAACwH,0BAAR,CANrD;AAM0FE,IAAAA,kBAAkB,EAAExG,GAN9G;AAMmHyG,IAAAA,KAAK,EAAE,CAN1H;AAM6HC,IAAAA,IAAI,EAAE,CANnI;AAMsIC,IAAAA,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,aAAJ,CAAD,EAAqB,CAAC,OAAD,EAAU,yBAAV,EAAqC,CAArC,EAAwC,MAAxC,CAArB,EAAsE,CAAC,CAAD,EAAI,yBAAJ,CAAtE,CAN9I;AAMqPC,IAAAA,QAAQ,EAAE,SAAS8D,gCAAT,CAA0CrL,EAA1C,EAA8CC,GAA9C,EAAmD;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AAC9XP,QAAAA,MAAM,CAACgI,eAAP,CAAuB/G,GAAvB;AACAjB,QAAAA,MAAM,CAACkI,cAAP,CAAsB,CAAtB,EAAyB,MAAzB,EAAiC,CAAjC;AACAlI,QAAAA,MAAM,CAACiI,YAAP,CAAoB,CAApB;AACAjI,QAAAA,MAAM,CAACiI,YAAP,CAAoB,CAApB,EAAuB,CAAvB;AACAjI,QAAAA,MAAM,CAACiI,YAAP,CAAoB,CAApB,EAAuB,CAAvB;AACAjI,QAAAA,MAAM,CAACuI,YAAP;AACAvI,QAAAA,MAAM,CAACsI,UAAP,CAAkB,CAAlB,EAAqB3H,uCAArB,EAA8D,CAA9D,EAAiE,CAAjE,EAAoE,MAApE,EAA4E,CAA5E;AACH;;AAAC,UAAIJ,EAAE,GAAG,CAAT,EAAY;AACVP,QAAAA,MAAM,CAACwI,SAAP,CAAiB,CAAjB;AACAxI,QAAAA,MAAM,CAACe,UAAP,CAAkB,MAAlB,EAA0BP,GAAG,CAAC+J,WAAJ,EAA1B;AACH;AAAE,KAjB+D;AAiB7D5B,IAAAA,UAAU,EAAE,CAACvI,MAAM,CAACyL,IAAR,CAjBiD;AAiBlChD,IAAAA,MAAM,EAAE,CAAC,89DAAD,CAjB0B;AAiBw8DC,IAAAA,aAAa,EAAE,CAjBv9D;AAiB09DC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,SAAS,EAAE,CACviE3H,sBAAsB,CAACC,eADghE;AAAb,KAjBh+D;AAmBzD2H,IAAAA,eAAe,EAAE;AAnBwC,GAAzB,CAA7C;SA1HMK,uB;;;AA2JN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOhH,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAgDC,CAhDhB;AAiDA;AACA;AACA;;;IACMwJ,4B;AAAN,QAAMA,4BAAN,CAAmC;;AAEnCA,EAAAA,4BAA4B,CAAChK,IAA7B,GAAoC,SAASiK,oCAAT,CAA8C/J,CAA9C,EAAiD;AAAE,WAAO,KAAKA,CAAC,IAAI8J,4BAAV,GAAP;AAAmD,GAA1I;;AACAA,EAAAA,4BAA4B,CAAC5J,IAA7B,GAAoC,aAAclC,MAAM,CAACmC,iBAAP,CAAyB;AAAEC,IAAAA,IAAI,EAAE0J,4BAAR;AAAsCzJ,IAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,CAAD,CAAjD;AAA8EoE,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,wCAAJ;AAAzF,GAAzB,CAAlD;SAHMqF,4B;;;AAIN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOxJ,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAQO,CARtB;AASA;AACA;AACA;;;IACM0J,sB;AAAN,QAAMA,sBAAN,CAA6B;;AAE7BA,EAAAA,sBAAsB,CAAClK,IAAvB,GAA8B,SAASmK,8BAAT,CAAwCjK,CAAxC,EAA2C;AAAE,WAAO,KAAKA,CAAC,IAAIgK,sBAAV,GAAP;AAA6C,GAAxH;;AACAA,EAAAA,sBAAsB,CAAC9J,IAAvB,GAA8B,aAAclC,MAAM,CAACmC,iBAAP,CAAyB;AAAEC,IAAAA,IAAI,EAAE4J,sBAAR;AAAgC3J,IAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,CAAD,CAA3C;AAAkEoE,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,kCAAJ;AAA7E,GAAzB,CAA5C;SAHMuF,sB;;;AAIN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAO1J,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAQO,CARtB;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;IACM4J,Y;AAAN,QAAMA,YAAN,SAA2BrP,YAA3B,CAAwC;AACpC+E,IAAAA,WAAW,GAAG;AACV,YAAM,GAAGuK,SAAT;AACA;;AACA,WAAKC,WAAL,GAAmB,IAAI9N,SAAJ,EAAnB;AACA,WAAK6E,WAAL,GAAmB,KAAnB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,WAAKoB,WAAL,GAAmB,SAAnB;AACA;;AACA,WAAKJ,cAAL,GAAsB,OAAtB;AACH;AACD;;;AACc,QAAVF,UAAU,GAAG;AAAE,aAAO,KAAKd,WAAZ;AAA0B;;AAC/B,QAAVc,UAAU,CAACoI,IAAD,EAAO;AAAE,WAAKlJ,WAAL,GAAmBxE,qBAAqB,CAAC0N,IAAD,CAAxC;AAAiD;;AACxE1H,IAAAA,kBAAkB,GAAG;AACjB,WAAK2H,QAAL,CAActH,OAAd,CACKvB,IADL,CACU1E,SAAS,CAAC,KAAKuN,QAAN,CADnB,EAEKxI,SAFL,CAEgByI,OAAD,IAAa;AACxB,aAAKH,WAAL,CAAiBI,KAAjB,CAAuBD,OAAO,CAACvN,MAAR,CAAeyN,MAAM,IAAIA,MAAM,CAAClD,KAAP,CAAa3G,SAAb,KAA2B,IAApD,CAAvB;;AACA,aAAKwJ,WAAL,CAAiBM,eAAjB;AACH,OALD;;AAMA,WAAKC,WAAL,GAAmB,IAAI9N,eAAJ,CAAoB,KAAKuN,WAAzB,EAAsCQ,QAAtC,GAAiDC,cAAjD,EAAnB;AACH;AACD;;;AACAhC,IAAAA,oBAAoB,CAAC9G,KAAD,EAAQ;AACxB,WAAK4I,WAAL,CAAiBG,SAAjB,CAA2B/I,KAA3B;AACH;;AACDoH,IAAAA,kBAAkB,CAACsB,MAAD,EAAS;AACvB,WAAKE,WAAL,CAAiBI,gBAAjB,CAAkCN,MAAlC;AACH;;AACDvH,IAAAA,WAAW,GAAG;AACV,YAAMA,WAAN;;AACA,WAAKkH,WAAL,CAAiBY,OAAjB;AACH;;AAxCmC;;AA0CxCd,EAAAA,YAAY,CAACpK,IAAb,GAAoB,aAAc,YAAY;AAAE,QAAImL,yBAAJ;AAA+B,WAAO,SAASC,oBAAT,CAA8BlL,CAA9B,EAAiC;AAAE,aAAO,CAACiL,yBAAyB,KAAKA,yBAAyB,GAAGjN,MAAM,CAACmN,qBAAP,CAA6BjB,YAA7B,CAAjC,CAA1B,EAAwGlK,CAAC,IAAIkK,YAA7G,CAAP;AAAoI,KAA9K;AAAiL,GAA9N,EAAlC;;AACAA,EAAAA,YAAY,CAAChK,IAAb,GAAoB,aAAclC,MAAM,CAACmC,iBAAP,CAAyB;AAAEC,IAAAA,IAAI,EAAE8J,YAAR;AAAsB7J,IAAAA,SAAS,EAAE,CAAC,CAAC,eAAD,CAAD,CAAjC;AAAsDyD,IAAAA,cAAc,EAAE,SAASsH,2BAAT,CAAqC7M,EAArC,EAAyCC,GAAzC,EAA8CwF,QAA9C,EAAwD;AAAE,UAAIzF,EAAE,GAAG,CAAT,EAAY;AAC/LP,QAAAA,MAAM,CAACiG,cAAP,CAAsBD,QAAtB,EAAgCsD,uBAAhC,EAAyD,CAAzD;AACH;;AAAC,UAAI/I,EAAE,GAAG,CAAT,EAAY;AACV,YAAI2F,EAAJ;;AACAlG,QAAAA,MAAM,CAACmG,cAAP,CAAsBD,EAAE,GAAGlG,MAAM,CAACoG,WAAP,EAA3B,MAAqD5F,GAAG,CAAC8L,QAAJ,GAAepG,EAApE;AACH;AAAE,KALoD;AAKlDO,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,eAAJ,CALuC;AAKjBC,IAAAA,QAAQ,EAAE,CALO;AAKJC,IAAAA,YAAY,EAAE,SAAS0G,yBAAT,CAAmC9M,EAAnC,EAAuCC,GAAvC,EAA4C;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AACvHP,QAAAA,MAAM,CAAC6G,WAAP,CAAmB,qBAAnB,EAA0CrG,GAAG,CAAC8M,KAA9C;AACH;AAAE,KAPoD;AAOlDxG,IAAAA,MAAM,EAAE;AAAEwG,MAAAA,KAAK,EAAE,OAAT;AAAkB/I,MAAAA,WAAW,EAAE,aAA/B;AAA8CJ,MAAAA,cAAc,EAAE,gBAA9D;AAAgFF,MAAAA,UAAU,EAAE;AAA5F,KAP0C;AAOkEkD,IAAAA,QAAQ,EAAE,CAAC,cAAD,CAP5E;AAO8FC,IAAAA,QAAQ,EAAE,CAACpH,MAAM,CAACqH,kBAAP,CAA0B,CAAC;AAC/KC,MAAAA,OAAO,EAAEnG,aADsK;AAE/KoM,MAAAA,WAAW,EAAErB;AAFkK,KAAD,CAA1B,CAAD,EAGlJlM,MAAM,CAACwH,0BAH2I;AAPxG,GAAzB,CAAlC;SA3CM0E,Y;;;AA4DN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAO5J,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AA0BC,CA1BhB;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMkL,kB;AAAN,QAAMA,kBAAN,CAAyB;;AAEzBA,EAAAA,kBAAkB,CAAC1L,IAAnB,GAA0B,SAAS2L,0BAAT,CAAoCzL,CAApC,EAAuC;AAAE,WAAO,KAAKA,CAAC,IAAIwL,kBAAV,GAAP;AAAyC,GAA5G;;AACAA,EAAAA,kBAAkB,CAACE,IAAnB,GAA0B,aAAc1N,MAAM,CAAC2N,gBAAP,CAAwB;AAAEvL,IAAAA,IAAI,EAAEoL;AAAR,GAAxB,CAAxC;AACAA,EAAAA,kBAAkB,CAACI,IAAnB,GAA0B,aAAc5N,MAAM,CAAC6N,gBAAP,CAAwB;AAAEC,IAAAA,OAAO,EAAE,CAAC,CAAC5Q,YAAD,EAAewB,eAAf,EAAgC5B,kBAAhC,EAAoDE,YAApD,CAAD;AAAX,GAAxB,CAAxC;SAJMwQ,kB;;;AAKN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOlL,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAuBO,CAvBtB;;AAwBA;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOyL,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/N,MAAM,CAACgO,kBAAP,CAA0BR,kBAA1B,EAA8C;AAAES,IAAAA,YAAY,EAAE,YAAY;AAAE,aAAO,CAAC/B,YAAD,EAAevJ,iBAAf,EAAkCuG,0BAAlC,EAA8DI,uBAA9D,EAAuF0C,sBAAvF,EAA+GF,4BAA/G,EAA6InK,wBAA7I,CAAP;AAAgL,KAA9M;AAAgNmM,IAAAA,OAAO,EAAE,YAAY;AAAE,aAAO,CAAC5Q,YAAD,EAAewB,eAAf,EAAgC5B,kBAAhC,EAAoDE,YAApD,CAAP;AAA2E,KAAlT;AAAoTkR,IAAAA,OAAO,EAAE,YAAY;AAAE,aAAO,CAAChC,YAAD,EAAevJ,iBAAf,EAAkCuG,0BAAlC,EAA8DI,uBAA9D,EAAuF0C,sBAAvF,EAA+GF,4BAA/G,EAA6InK,wBAA7I,CAAP;AAAgL;AAA3f,GAA9C,CAAnD;AAAkmB,CAAjnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASP,gCAAT,EAA2CD,aAA3C,EAA0DqB,mCAA1D,EAA+F0J,YAA/F,EAA6GsB,kBAA7G,EAAiI7K,iBAAjI,EAAoJuG,0BAApJ,EAAgLvH,wBAAhL,EAA0MmK,4BAA1M,EAAwOxC,uBAAxO,EAAiQ0C,sBAAjQ,EAAyR3K,sBAAzR,EAAiToB,EAAjT","sourcesContent":["import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\n\nconst _c0 = [\"body\"];\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) { }\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n} }\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) { return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatExpansionPanelContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelContent, selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]] });\nMatExpansionPanelContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst ɵ0 = undefined;\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) { return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\nMatExpansionPanel.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanel, selectors: [[\"mat-expansion-panel\"]], contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    } }, viewQuery: function MatExpansionPanel_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    } }, hostAttrs: [1, \"mat-expansion-panel\"], hostVars: 6, hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    } }, inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, exportAs: [\"matExpansionPanel\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: ɵ0 },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]], template: function MatExpansionPanel_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimationDone.next($event); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matExpansionAnimations.bodyExpansion] }, changeDetection: 0 });\nMatExpansionPanel.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanel.propDecorators = {\n    hideToggle: [{ type: Input }],\n    togglePosition: [{ type: Input }],\n    afterExpand: [{ type: Output }],\n    afterCollapse: [{ type: Output }],\n    _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n    _body: [{ type: ViewChild, args: ['body',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n                },\n                styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [MAT_ACCORDION]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, { afterExpand: [{\n            type: Output\n        }], afterCollapse: [{\n            type: Output\n        }], hideToggle: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], _lazyContent: [{\n            type: ContentChild,\n            args: [MatExpansionPanelContent]\n        }], _body: [{\n            type: ViewChild,\n            args: ['body']\n        }] }); })();\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) { return new (t || MatExpansionPanelActionRow)(); };\nMatExpansionPanelActionRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelActionRow, selectors: [[\"mat-action-row\"]], hostAttrs: [1, \"mat-action-row\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nclass MatExpansionPanelHeaderBase {\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        super();\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n            EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription =\n            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n                return !!(changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n            })))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) { return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatExpansionPanelHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanelHeader, selectors: [[\"mat-expansion-panel-header\"]], hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"], hostVars: 15, hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { tabIndex: \"tabIndex\", expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 5, vars: 1, consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]], template: function MatExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    } }, directives: [ɵngcc4.NgIf], styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"], encapsulation: 2, data: { animation: [\n            matExpansionAnimations.indicatorRotate,\n        ] }, changeDetection: 0 });\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: MatExpansionPanel, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatExpansionPanelHeader.propDecorators = {\n    expandedHeight: [{ type: Input }],\n    collapsedHeight: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel-header',\n                template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['tabIndex'],\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header mat-focus-indicator',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[style.height]': '_getHeaderHeight()',\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)'\n                },\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatExpansionPanel, decorators: [{\n                type: Host\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { expandedHeight: [{\n            type: Input\n        }], collapsedHeight: [{\n            type: Input\n        }] }); })();\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) { return new (t || MatExpansionPanelDescription)(); };\nMatExpansionPanelDescription.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelDescription, selectors: [[\"mat-panel-description\"]], hostAttrs: [1, \"mat-expansion-panel-header-description\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            }]\n    }], null, null); })();\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) { return new (t || MatExpansionPanelTitle)(); };\nMatExpansionPanelTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelTitle, selectors: [[\"mat-panel-title\"]], hostAttrs: [1, \"mat-expansion-panel-header-title\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() { return this._hideToggle; }\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._ownHeaders.destroy();\n    }\n}\nMatAccordion.ɵfac = /*@__PURE__*/ function () { let ɵMatAccordion_BaseFactory; return function MatAccordion_Factory(t) { return (ɵMatAccordion_BaseFactory || (ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion)))(t || MatAccordion); }; }();\nMatAccordion.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAccordion, selectors: [[\"mat-accordion\"]], contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n    } }, hostAttrs: [1, \"mat-accordion\"], hostVars: 2, hostBindings: function MatAccordion_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    } }, inputs: { multi: \"multi\", displayMode: \"displayMode\", togglePosition: \"togglePosition\", hideToggle: \"hideToggle\" }, exportAs: [\"matAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatAccordion.propDecorators = {\n    _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n    hideToggle: [{ type: Input }],\n    displayMode: [{ type: Input }],\n    togglePosition: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if multiple panel support is enabled.\n                    '[class.mat-accordion-multi]': 'this.multi'\n                }\n            }]\n    }], null, { displayMode: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], hideToggle: [{\n            type: Input\n        }], _headers: [{\n            type: ContentChildren,\n            args: [MatExpansionPanelHeader, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.ɵfac = function MatExpansionModule_Factory(t) { return new (t || MatExpansionModule)(); };\nMatExpansionModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatExpansionModule });\nMatExpansionModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, { declarations: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; }, imports: function () { return [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]; }, exports: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, ɵ0 };\n\n"]},"metadata":{},"sourceType":"module"}