{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AccordionDirective = /*#__PURE__*/(() => {\n  class AccordionDirective {\n    constructor(router) {\n      this.router = router;\n      this.navlinks = [];\n      this.countState = 1;\n    }\n\n    closeOtherLinks(openLink) {\n      this.countState++;\n\n      if ((openLink.group !== 'sub-toggled' || openLink.group !== 'main-toggled') && this.countState === 1) {\n        if (window.innerWidth < 768 || window.innerWidth >= 768 && window.innerWidth <= 1024) {\n          const toggled_element = document.querySelector('#mobile-collapse');\n          toggled_element.click();\n        }\n      }\n\n      this.navlinks.forEach(link => {\n        if (link !== openLink && (link.group === 'sub-toggled' || openLink.group !== 'sub-toggled')) {\n          link.open = false;\n        }\n      });\n    }\n\n    addLink(link) {\n      this.navlinks.push(link);\n    }\n\n    removeGroup(link) {\n      const index = this.navlinks.indexOf(link);\n\n      if (index !== -1) {\n        this.navlinks.splice(index, 1);\n      }\n    }\n\n    getUrl() {\n      return this.router.url;\n    }\n\n    ngOnInit() {\n      this._router = this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n        this.countState = 0;\n        this.navlinks.forEach(link => {\n          if (link.group) {\n            const routeUrl = this.getUrl();\n            const currentUrl = routeUrl.split('/');\n\n            if (currentUrl.indexOf(link.group) > 0) {\n              if (link.open !== true) {\n                link.open = true;\n                this.closeOtherLinks(link);\n              }\n            }\n          }\n        });\n      });\n    }\n\n  }\n\n  AccordionDirective.ɵfac = function AccordionDirective_Factory(t) {\n    return new (t || AccordionDirective)(i0.ɵɵdirectiveInject(i1.Router));\n  };\n\n  AccordionDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AccordionDirective,\n    selectors: [[\"\", \"appAccordion\", \"\"]]\n  });\n  return AccordionDirective;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/shared/accordion/accordion.directive.ts"],"names":["NavigationEnd","filter","i0","i1","AccordionDirective","constructor","router","navlinks","countState","closeOtherLinks","openLink","group","window","innerWidth","toggled_element","document","querySelector","click","forEach","link","open","addLink","push","removeGroup","index","indexOf","splice","getUrl","url","ngOnInit","_router","events","pipe","event","subscribe","routeUrl","currentUrl","split","ɵfac","AccordionDirective_Factory","t","ɵɵdirectiveInject","Router","ɵdir","ɵɵdefineDirective","type","selectors"],"mappings":"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","sourcesContent":["import { NavigationEnd } from '@angular/router';\r\nimport { filter } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nexport class AccordionDirective {\r\n    constructor(router) {\r\n        this.router = router;\r\n        this.navlinks = [];\r\n        this.countState = 1;\r\n    }\r\n    closeOtherLinks(openLink) {\r\n        this.countState++;\r\n        if ((openLink.group !== 'sub-toggled' || openLink.group !== 'main-toggled') && this.countState === 1) {\r\n            if (window.innerWidth < 768 || (window.innerWidth >= 768 && window.innerWidth <= 1024)) {\r\n                const toggled_element = document.querySelector('#mobile-collapse');\r\n                toggled_element.click();\r\n            }\r\n        }\r\n        this.navlinks.forEach((link) => {\r\n            if (link !== openLink && (link.group === 'sub-toggled' || openLink.group !== 'sub-toggled')) {\r\n                link.open = false;\r\n            }\r\n        });\r\n    }\r\n    addLink(link) {\r\n        this.navlinks.push(link);\r\n    }\r\n    removeGroup(link) {\r\n        const index = this.navlinks.indexOf(link);\r\n        if (index !== -1) {\r\n            this.navlinks.splice(index, 1);\r\n        }\r\n    }\r\n    getUrl() {\r\n        return this.router.url;\r\n    }\r\n    ngOnInit() {\r\n        this._router = this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe((event) => {\r\n            this.countState = 0;\r\n            this.navlinks.forEach((link) => {\r\n                if (link.group) {\r\n                    const routeUrl = this.getUrl();\r\n                    const currentUrl = routeUrl.split('/');\r\n                    if (currentUrl.indexOf(link.group) > 0) {\r\n                        if (link.open !== true) {\r\n                            link.open = true;\r\n                            this.closeOtherLinks(link);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\nAccordionDirective.ɵfac = function AccordionDirective_Factory(t) { return new (t || AccordionDirective)(i0.ɵɵdirectiveInject(i1.Router)); };\r\nAccordionDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AccordionDirective, selectors: [[\"\", \"appAccordion\", \"\"]] });\r\n"]},"metadata":{},"sourceType":"module"}