{"ast":null,"code":"import { DateTimeService } from 'app/services/shared';\nimport * as i0 from \"@angular/core\";\nexport class CustomValidators {\n  static numeric(c) {\n    const numValue = Number(c.value);\n    const isValid = !isNaN(numValue);\n    const message = {\n      'numeric': {\n        'message': 'Only numeric values are acecpted'\n      }\n    };\n    return isValid ? null : message;\n  }\n\n  static checkDates(d1, d2, source) {\n    const startDate = d1.value;\n    const endDate = d2.value;\n    let message = {};\n    const isValid = CustomValidators.dateTimeService.isBefore(startDate, endDate);\n\n    if (!isValid) {\n      if (source === 'start') {\n        message = {\n          'startDateInvalid': {\n            'message': 'Start Date must be lower than End Date.'\n          }\n        };\n      } else {\n        message = {\n          'endDateInvalid': {\n            'message': 'End Date must be greater than Start Date.'\n          }\n        };\n      }\n    }\n\n    return isValid ? null : message;\n  }\n\n}\nCustomValidators.dateTimeService = new DateTimeService();\n\nCustomValidators.ɵfac = function CustomValidators_Factory(t) {\n  return new (t || CustomValidators)();\n};\n\nCustomValidators.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomValidators,\n  factory: CustomValidators.ɵfac\n});","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/shared/custom-validators/custom-validators.ts"],"names":["DateTimeService","i0","CustomValidators","numeric","c","numValue","Number","value","isValid","isNaN","message","checkDates","d1","d2","source","startDate","endDate","dateTimeService","isBefore","ɵfac","CustomValidators_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"AAAA,SAASA,eAAT,QAAgC,qBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AACZ,SAAPC,OAAO,CAACC,CAAD,EAAI;AACd,UAAMC,QAAQ,GAAGC,MAAM,CAACF,CAAC,CAACG,KAAH,CAAvB;AACA,UAAMC,OAAO,GAAG,CAACC,KAAK,CAACJ,QAAD,CAAtB;AACA,UAAMK,OAAO,GAAG;AACZ,iBAAW;AACP,mBAAW;AADJ;AADC,KAAhB;AAKA,WAAOF,OAAO,GAAG,IAAH,GAAUE,OAAxB;AACH;;AACgB,SAAVC,UAAU,CAACC,EAAD,EAAKC,EAAL,EAASC,MAAT,EAAiB;AAC9B,UAAMC,SAAS,GAAGH,EAAE,CAACL,KAArB;AACA,UAAMS,OAAO,GAAGH,EAAE,CAACN,KAAnB;AACA,QAAIG,OAAO,GAAG,EAAd;AACA,UAAMF,OAAO,GAAGN,gBAAgB,CAACe,eAAjB,CAAiCC,QAAjC,CAA0CH,SAA1C,EAAqDC,OAArD,CAAhB;;AACA,QAAI,CAACR,OAAL,EAAc;AACV,UAAIM,MAAM,KAAK,OAAf,EAAwB;AACpBJ,QAAAA,OAAO,GAAG;AACN,8BAAoB;AAChB,uBAAW;AADK;AADd,SAAV;AAKH,OAND,MAOK;AACDA,QAAAA,OAAO,GAAG;AACN,4BAAkB;AACd,uBAAW;AADG;AADZ,SAAV;AAKH;AACJ;;AACD,WAAOF,OAAO,GAAG,IAAH,GAAUE,OAAxB;AACH;;AAjCyB;AAmC9BR,gBAAgB,CAACe,eAAjB,GAAmC,IAAIjB,eAAJ,EAAnC;;AACAE,gBAAgB,CAACiB,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAInB,gBAAV,GAAP;AAAuC,CAAtG;;AACAA,gBAAgB,CAACoB,KAAjB,GAAyB,aAAcrB,EAAE,CAACsB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtB,gBAAT;AAA2BuB,EAAAA,OAAO,EAAEvB,gBAAgB,CAACiB;AAArD,CAAtB,CAAvC","sourcesContent":["import { DateTimeService } from 'app/services/shared';\r\nimport * as i0 from \"@angular/core\";\r\nexport class CustomValidators {\r\n    static numeric(c) {\r\n        const numValue = Number(c.value);\r\n        const isValid = !isNaN(numValue);\r\n        const message = {\r\n            'numeric': {\r\n                'message': 'Only numeric values are acecpted'\r\n            }\r\n        };\r\n        return isValid ? null : message;\r\n    }\r\n    static checkDates(d1, d2, source) {\r\n        const startDate = d1.value;\r\n        const endDate = d2.value;\r\n        let message = {};\r\n        const isValid = CustomValidators.dateTimeService.isBefore(startDate, endDate);\r\n        if (!isValid) {\r\n            if (source === 'start') {\r\n                message = {\r\n                    'startDateInvalid': {\r\n                        'message': 'Start Date must be lower than End Date.'\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                message = {\r\n                    'endDateInvalid': {\r\n                        'message': 'End Date must be greater than Start Date.'\r\n                    }\r\n                };\r\n            }\r\n        }\r\n        return isValid ? null : message;\r\n    }\r\n}\r\nCustomValidators.dateTimeService = new DateTimeService();\r\nCustomValidators.ɵfac = function CustomValidators_Factory(t) { return new (t || CustomValidators)(); };\r\nCustomValidators.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CustomValidators, factory: CustomValidators.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}