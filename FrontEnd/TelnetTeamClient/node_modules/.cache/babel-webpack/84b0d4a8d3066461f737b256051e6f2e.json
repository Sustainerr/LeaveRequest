{"ast":null,"code":"import * as FileSaver from 'file-saver';\nimport * as Excel from 'exceljs/dist/exceljs.min.js';\nimport * as i0 from \"@angular/core\";\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\nconst EXCEL_EXTENSION = '.xlsx';\nexport let ExcelService = /*#__PURE__*/(() => {\n  class ExcelService {\n    constructor() {// do nothing\n    }\n\n    generateExcel(header, rows, merges, styles, name) {\n      const options = {\n        filename: './streamed-workbook.xlsx',\n        useStyles: true,\n        useSharedStrings: true\n      };\n      const workbook = new Excel.Workbook(options);\n      this.buildWorksheet(workbook, header, rows, merges, styles, name);\n      this.saveWorkbook(workbook, name);\n    }\n\n    generateExcelMultiSheets(sheets, filename) {\n      const options = {\n        filename: './streamed-workbook.xlsx',\n        useStyles: true,\n        useSharedStrings: true\n      };\n      const workbook = new Excel.Workbook(options);\n      sheets.forEach(sheet => {\n        this.buildWorksheet(workbook, sheet.header, sheet.rows, sheet.merges, sheet.styles, sheet.name);\n      });\n      this.saveWorkbook(workbook, filename);\n    }\n\n    buildWorksheet(workbook, header, rows, merges, styles, name) {\n      const worksheet = workbook.addWorksheet(name, {\n        properties: {\n          tabColor: {\n            argb: 'FFC0000'\n          }\n        }\n      });\n      worksheet.columns = header;\n\n      if (rows !== null) {\n        rows.forEach(row => {\n          worksheet.addRow(row);\n        });\n      }\n\n      if (merges !== null) {\n        merges.forEach(merge => {\n          worksheet.mergeCells(merge);\n        });\n      }\n\n      if (styles !== null) {\n        styles.forEach(style => {\n          worksheet.getCell(style.cell).font = style.font;\n          worksheet.getCell(style.cell).alignment = style.alignment;\n          worksheet.getCell(style.cell).fill = style.fill;\n          worksheet.getCell(style.cell).border = style.border;\n        });\n      }\n    }\n\n    saveWorkbook(workbook, filename) {\n      workbook.xlsx.writeBuffer().then(function (buffer) {\n        // done buffering\n        const data = new Blob([buffer], {\n          type: EXCEL_TYPE\n        });\n        FileSaver.saveAs(data, filename + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n      });\n    }\n\n  }\n\n  ExcelService.ɵfac = function ExcelService_Factory(t) {\n    return new (t || ExcelService)();\n  };\n\n  ExcelService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExcelService,\n    factory: ExcelService.ɵfac\n  });\n  return ExcelService;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/services/shared/excel.service.ts"],"names":["FileSaver","Excel","i0","EXCEL_TYPE","EXCEL_EXTENSION","ExcelService","constructor","generateExcel","header","rows","merges","styles","name","options","filename","useStyles","useSharedStrings","workbook","Workbook","buildWorksheet","saveWorkbook","generateExcelMultiSheets","sheets","forEach","sheet","worksheet","addWorksheet","properties","tabColor","argb","columns","row","addRow","merge","mergeCells","style","getCell","cell","font","alignment","fill","border","xlsx","writeBuffer","then","buffer","data","Blob","type","saveAs","Date","getTime","ɵfac","ExcelService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,6BAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,MAAMC,UAAU,GAAG,iFAAnB;AACA,MAAMC,eAAe,GAAG,OAAxB;AACA,WAAaC,YAAb;AAAO,QAAMA,YAAN,CAAmB;AACtBC,IAAAA,WAAW,GAAG,CACV;AACH;;AACDC,IAAAA,aAAa,CAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqC;AAC9C,YAAMC,OAAO,GAAG;AACZC,QAAAA,QAAQ,EAAE,0BADE;AAEZC,QAAAA,SAAS,EAAE,IAFC;AAGZC,QAAAA,gBAAgB,EAAE;AAHN,OAAhB;AAKA,YAAMC,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,QAAV,CAAmBL,OAAnB,CAAjB;AACA,WAAKM,cAAL,CAAoBF,QAApB,EAA8BT,MAA9B,EAAsCC,IAAtC,EAA4CC,MAA5C,EAAoDC,MAApD,EAA4DC,IAA5D;AACA,WAAKQ,YAAL,CAAkBH,QAAlB,EAA4BL,IAA5B;AACH;;AACDS,IAAAA,wBAAwB,CAACC,MAAD,EAASR,QAAT,EAAmB;AACvC,YAAMD,OAAO,GAAG;AACZC,QAAAA,QAAQ,EAAE,0BADE;AAEZC,QAAAA,SAAS,EAAE,IAFC;AAGZC,QAAAA,gBAAgB,EAAE;AAHN,OAAhB;AAKA,YAAMC,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,QAAV,CAAmBL,OAAnB,CAAjB;AACAS,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAI;AACpB,aAAKL,cAAL,CAAoBF,QAApB,EAA8BO,KAAK,CAAChB,MAApC,EAA4CgB,KAAK,CAACf,IAAlD,EAAwDe,KAAK,CAACd,MAA9D,EAAsEc,KAAK,CAACb,MAA5E,EAAoFa,KAAK,CAACZ,IAA1F;AACH,OAFD;AAGA,WAAKQ,YAAL,CAAkBH,QAAlB,EAA4BH,QAA5B;AACH;;AACDK,IAAAA,cAAc,CAACF,QAAD,EAAWT,MAAX,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,IAAzC,EAA+C;AACzD,YAAMa,SAAS,GAAGR,QAAQ,CAACS,YAAT,CAAsBd,IAAtB,EAA4B;AAC1Ce,QAAAA,UAAU,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,IAAI,EAAE;AAAR;AAAZ;AAD8B,OAA5B,CAAlB;AAGAJ,MAAAA,SAAS,CAACK,OAAV,GAAoBtB,MAApB;;AACA,UAAIC,IAAI,KAAK,IAAb,EAAmB;AACfA,QAAAA,IAAI,CAACc,OAAL,CAAaQ,GAAG,IAAI;AAChBN,UAAAA,SAAS,CAACO,MAAV,CAAiBD,GAAjB;AACH,SAFD;AAGH;;AACD,UAAIrB,MAAM,KAAK,IAAf,EAAqB;AACjBA,QAAAA,MAAM,CAACa,OAAP,CAAeU,KAAK,IAAI;AACpBR,UAAAA,SAAS,CAACS,UAAV,CAAqBD,KAArB;AACH,SAFD;AAGH;;AACD,UAAItB,MAAM,KAAK,IAAf,EAAqB;AACjBA,QAAAA,MAAM,CAACY,OAAP,CAAeY,KAAK,IAAI;AACpBV,UAAAA,SAAS,CAACW,OAAV,CAAkBD,KAAK,CAACE,IAAxB,EAA8BC,IAA9B,GAAqCH,KAAK,CAACG,IAA3C;AACAb,UAAAA,SAAS,CAACW,OAAV,CAAkBD,KAAK,CAACE,IAAxB,EAA8BE,SAA9B,GAA0CJ,KAAK,CAACI,SAAhD;AACAd,UAAAA,SAAS,CAACW,OAAV,CAAkBD,KAAK,CAACE,IAAxB,EAA8BG,IAA9B,GAAqCL,KAAK,CAACK,IAA3C;AACAf,UAAAA,SAAS,CAACW,OAAV,CAAkBD,KAAK,CAACE,IAAxB,EAA8BI,MAA9B,GAAuCN,KAAK,CAACM,MAA7C;AACH,SALD;AAMH;AACJ;;AACDrB,IAAAA,YAAY,CAACH,QAAD,EAAWH,QAAX,EAAqB;AAC7BG,MAAAA,QAAQ,CAACyB,IAAT,CAAcC,WAAd,GAA4BC,IAA5B,CAAiC,UAAUC,MAAV,EAAkB;AAC/C;AACA,cAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACF,MAAD,CAAT,EAAmB;AAC5BG,UAAAA,IAAI,EAAE7C;AADsB,SAAnB,CAAb;AAGAH,QAAAA,SAAS,CAACiD,MAAV,CAAiBH,IAAjB,EAAuBhC,QAAQ,GAAG,UAAX,GAAwB,IAAIoC,IAAJ,GAAWC,OAAX,EAAxB,GAA+C/C,eAAtE;AACH,OAND;AAOH;;AA1DqB;;AA4D1BC,EAAAA,YAAY,CAAC+C,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,WAAO,KAAKA,CAAC,IAAIjD,YAAV,GAAP;AAAmC,GAA1F;;AACAA,EAAAA,YAAY,CAACkD,KAAb,GAAqB,aAAcrD,EAAE,CAACsD,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAEpD,YAAT;AAAuBqD,IAAAA,OAAO,EAAErD,YAAY,CAAC+C;AAA7C,GAAtB,CAAnC;AA7DA,SAAa/C,YAAb;AAAA","sourcesContent":["import * as FileSaver from 'file-saver';\r\nimport * as Excel from 'exceljs/dist/exceljs.min.js';\r\nimport * as i0 from \"@angular/core\";\r\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\nconst EXCEL_EXTENSION = '.xlsx';\r\nexport class ExcelService {\r\n    constructor() {\r\n        // do nothing\r\n    }\r\n    generateExcel(header, rows, merges, styles, name) {\r\n        const options = {\r\n            filename: './streamed-workbook.xlsx',\r\n            useStyles: true,\r\n            useSharedStrings: true\r\n        };\r\n        const workbook = new Excel.Workbook(options);\r\n        this.buildWorksheet(workbook, header, rows, merges, styles, name);\r\n        this.saveWorkbook(workbook, name);\r\n    }\r\n    generateExcelMultiSheets(sheets, filename) {\r\n        const options = {\r\n            filename: './streamed-workbook.xlsx',\r\n            useStyles: true,\r\n            useSharedStrings: true\r\n        };\r\n        const workbook = new Excel.Workbook(options);\r\n        sheets.forEach(sheet => {\r\n            this.buildWorksheet(workbook, sheet.header, sheet.rows, sheet.merges, sheet.styles, sheet.name);\r\n        });\r\n        this.saveWorkbook(workbook, filename);\r\n    }\r\n    buildWorksheet(workbook, header, rows, merges, styles, name) {\r\n        const worksheet = workbook.addWorksheet(name, {\r\n            properties: { tabColor: { argb: 'FFC0000' } }\r\n        });\r\n        worksheet.columns = header;\r\n        if (rows !== null) {\r\n            rows.forEach(row => {\r\n                worksheet.addRow(row);\r\n            });\r\n        }\r\n        if (merges !== null) {\r\n            merges.forEach(merge => {\r\n                worksheet.mergeCells(merge);\r\n            });\r\n        }\r\n        if (styles !== null) {\r\n            styles.forEach(style => {\r\n                worksheet.getCell(style.cell).font = style.font;\r\n                worksheet.getCell(style.cell).alignment = style.alignment;\r\n                worksheet.getCell(style.cell).fill = style.fill;\r\n                worksheet.getCell(style.cell).border = style.border;\r\n            });\r\n        }\r\n    }\r\n    saveWorkbook(workbook, filename) {\r\n        workbook.xlsx.writeBuffer().then(function (buffer) {\r\n            // done buffering\r\n            const data = new Blob([buffer], {\r\n                type: EXCEL_TYPE\r\n            });\r\n            FileSaver.saveAs(data, filename + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\r\n        });\r\n    }\r\n}\r\nExcelService.ɵfac = function ExcelService_Factory(t) { return new (t || ExcelService)(); };\r\nExcelService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ExcelService, factory: ExcelService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}