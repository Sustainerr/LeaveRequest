{"ast":null,"code":"import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, Platform, _isTestEnvironment } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst scrollBehaviorSupported = /*#__PURE__*/supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nclass BlockScrollStrategy {\n  constructor(_viewportRuler, document) {\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach() {}\n  /** Blocks page-level scroll while the attached overlay is open. */\n\n\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n  /** Unblocks page-level scroll while the attached overlay is open. */\n\n\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n      this._isEnabled = false;\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  _canBeEnabled() {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n\n    const viewport = this._viewportRuler.getViewportSize();\n\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(`Scroll strategy has already been attached.`);\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nclass CloseScrollStrategy {\n  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n\n    this._detach = () => {\n      this.disable();\n\n      if (this._overlayRef.hasAttached()) {\n        this._ngZone.run(() => this._overlayRef.detach());\n      }\n    };\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /** Enables the closing of the attached overlay on scroll. */\n\n\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n  /** Disables the closing the attached overlay on scroll. */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Scroll strategy that doesn't do anything. */\n\n\nclass NoopScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n\n\n  disable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n\n\n  attach() {}\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nclass RepositionScrollStrategy {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /** Enables repositioning of the attached overlay on scroll. */\n\n\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n\n          const {\n            width,\n            height\n          } = this._viewportRuler.getViewportSize(); // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n\n\n          const parentRects = [{\n            width,\n            height,\n            bottom: height,\n            right: width,\n            top: 0,\n            left: 0\n          }];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n  /** Disables repositioning of the attached overlay on scroll. */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nlet ScrollStrategyOptions = /*#__PURE__*/(() => {\n  class ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n      this._scrollDispatcher = _scrollDispatcher;\n      this._viewportRuler = _viewportRuler;\n      this._ngZone = _ngZone;\n      /** Do nothing on scroll. */\n\n      this.noop = () => new NoopScrollStrategy();\n      /**\n       * Close the overlay as soon as the user scrolls.\n       * @param config Configuration to be used inside the scroll strategy.\n       */\n\n\n      this.close = config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n      /** Block scrolling. */\n\n\n      this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n      /**\n       * Update the overlay's position on scroll.\n       * @param config Configuration to be used inside the scroll strategy.\n       * Allows debouncing the reposition calls.\n       */\n\n\n      this.reposition = config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n\n      this._document = document;\n    }\n\n  }\n\n  ScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n    return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  ScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ScrollStrategyOptions_Factory() {\n      return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT));\n    },\n    token: ScrollStrategyOptions,\n    providedIn: \"root\"\n  });\n  return ScrollStrategyOptions;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Initial configuration used when creating an overlay. */\n\n\nclass OverlayConfig {\n  constructor(config) {\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    this.scrollStrategy = new NoopScrollStrategy();\n    /** Custom class to add to the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the overlay has a backdrop. */\n\n    this.hasBackdrop = false;\n    /** Custom class to add to the backdrop */\n\n    this.backdropClass = 'cdk-overlay-dark-backdrop';\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.disposeOnNavigation = false;\n\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config);\n\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The points of the origin element and the overlay element to connect. */\n\n\nclass ConnectionPositionPair {\n  constructor(origin, overlay,\n  /** Offset along the X axis. */\n  offsetX,\n  /** Offset along the Y axis. */\n  offsetY,\n  /** Class(es) to be applied to the panel while this position is active. */\n  panelClass) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.panelClass = panelClass;\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\n\n\nclass ScrollingVisibility {}\n/** The change event emitted by the strategy when a fallback position is used. */\n\n\nclass ConnectedOverlayPositionChange {\n  constructor(\n  /** The position used as a result of this change. */\n  connectionPair,\n  /** @docs-private */\n  scrollableViewProperties) {\n    this.connectionPair = connectionPair;\n    this.scrollableViewProperties = scrollableViewProperties;\n  }\n\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nlet BaseOverlayDispatcher = /*#__PURE__*/(() => {\n  class BaseOverlayDispatcher {\n    constructor(document) {\n      /** Currently attached overlays in the order they were attached. */\n      this._attachedOverlays = [];\n      this._document = document;\n    }\n\n    ngOnDestroy() {\n      this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n\n\n    add(overlayRef) {\n      // Ensure that we don't get the same overlay multiple times.\n      this.remove(overlayRef);\n\n      this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n\n\n    remove(overlayRef) {\n      const index = this._attachedOverlays.indexOf(overlayRef);\n\n      if (index > -1) {\n        this._attachedOverlays.splice(index, 1);\n      } // Remove the global listener once there are no more overlays.\n\n\n      if (this._attachedOverlays.length === 0) {\n        this.detach();\n      }\n    }\n\n  }\n\n  BaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {\n    return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  BaseOverlayDispatcher.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function BaseOverlayDispatcher_Factory() {\n      return new BaseOverlayDispatcher(i0.ɵɵinject(i1$1.DOCUMENT));\n    },\n    token: BaseOverlayDispatcher,\n    providedIn: \"root\"\n  });\n  return BaseOverlayDispatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nlet OverlayKeyboardDispatcher = /*#__PURE__*/(() => {\n  class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n      super(document);\n      /** Keyboard event listener that will be attached to the body. */\n\n      this._keydownListener = event => {\n        const overlays = this._attachedOverlays;\n\n        for (let i = overlays.length - 1; i > -1; i--) {\n          // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n          // We want to target the most recent overlay, rather than trying to match where the event came\n          // from, because some components might open an overlay, but keep focus on a trigger element\n          // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n          // because we don't want overlays that don't handle keyboard events to block the ones below\n          // them that do.\n          if (overlays[i]._keydownEvents.observers.length > 0) {\n            overlays[i]._keydownEvents.next(event);\n\n            break;\n          }\n        }\n      };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n\n\n    add(overlayRef) {\n      super.add(overlayRef); // Lazily start dispatcher once first overlay is added\n\n      if (!this._isAttached) {\n        this._document.body.addEventListener('keydown', this._keydownListener);\n\n        this._isAttached = true;\n      }\n    }\n    /** Detaches the global keyboard event listener. */\n\n\n    detach() {\n      if (this._isAttached) {\n        this._document.body.removeEventListener('keydown', this._keydownListener);\n\n        this._isAttached = false;\n      }\n    }\n\n  }\n\n  OverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n    return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  OverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function OverlayKeyboardDispatcher_Factory() {\n      return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT));\n    },\n    token: OverlayKeyboardDispatcher,\n    providedIn: \"root\"\n  });\n  return OverlayKeyboardDispatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nlet OverlayOutsideClickDispatcher = /*#__PURE__*/(() => {\n  class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n      super(document);\n      this._platform = _platform;\n      this._cursorStyleIsSet = false;\n      /** Store pointerdown event target to track origin of click. */\n\n      this._pointerDownListener = event => {\n        this._pointerDownEventTarget = _getEventTarget(event);\n      };\n      /** Click event listener that will be attached to the body propagate phase. */\n\n\n      this._clickListener = event => {\n        const target = _getEventTarget(event); // In case of a click event, we want to check the origin of the click\n        // (e.g. in case where a user starts a click inside the overlay and\n        // releases the click outside of it).\n        // This is done by using the event target of the preceding pointerdown event.\n        // Every click event caused by a pointer device has a preceding pointerdown\n        // event, unless the click was programmatically triggered (e.g. in a unit test).\n\n\n        const origin = event.type === 'click' && this._pointerDownEventTarget ? this._pointerDownEventTarget : target; // Reset the stored pointerdown event target, to avoid having it interfere\n        // in subsequent events.\n\n        this._pointerDownEventTarget = null; // We copy the array because the original may be modified asynchronously if the\n        // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n        // the for loop.\n\n        const overlays = this._attachedOverlays.slice(); // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n        // We want to target all overlays for which the click could be considered as outside click.\n        // As soon as we reach an overlay for which the click is not outside click we break off\n        // the loop.\n\n\n        for (let i = overlays.length - 1; i > -1; i--) {\n          const overlayRef = overlays[i];\n\n          if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n            continue;\n          } // If it's a click inside the overlay, just break - we should do nothing\n          // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n          // and proceed with the next overlay\n\n\n          if (overlayRef.overlayElement.contains(target) || overlayRef.overlayElement.contains(origin)) {\n            break;\n          }\n\n          overlayRef._outsidePointerEvents.next(event);\n        }\n      };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n\n\n    add(overlayRef) {\n      super.add(overlayRef); // Safari on iOS does not generate click events for non-interactive\n      // elements. However, we want to receive a click for any element outside\n      // the overlay. We can force a \"clickable\" state by setting\n      // `cursor: pointer` on the document body. See:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n      // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n\n      if (!this._isAttached) {\n        const body = this._document.body;\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true); // click event is not fired on iOS. To make element \"clickable\" we are\n        // setting the cursor to pointer\n\n        if (this._platform.IOS && !this._cursorStyleIsSet) {\n          this._cursorOriginalValue = body.style.cursor;\n          body.style.cursor = 'pointer';\n          this._cursorStyleIsSet = true;\n        }\n\n        this._isAttached = true;\n      }\n    }\n    /** Detaches the global keyboard event listener. */\n\n\n    detach() {\n      if (this._isAttached) {\n        const body = this._document.body;\n        body.removeEventListener('pointerdown', this._pointerDownListener, true);\n        body.removeEventListener('click', this._clickListener, true);\n        body.removeEventListener('auxclick', this._clickListener, true);\n        body.removeEventListener('contextmenu', this._clickListener, true);\n\n        if (this._platform.IOS && this._cursorStyleIsSet) {\n          body.style.cursor = this._cursorOriginalValue;\n          this._cursorStyleIsSet = false;\n        }\n\n        this._isAttached = false;\n      }\n    }\n\n  }\n\n  OverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {\n    return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n  };\n\n  OverlayOutsideClickDispatcher.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function OverlayOutsideClickDispatcher_Factory() {\n      return new OverlayOutsideClickDispatcher(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform));\n    },\n    token: OverlayOutsideClickDispatcher,\n    providedIn: \"root\"\n  });\n  return OverlayOutsideClickDispatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Container inside which all overlays will render. */\n\n\nlet OverlayContainer = /*#__PURE__*/(() => {\n  class OverlayContainer {\n    constructor(document, _platform) {\n      this._platform = _platform;\n      this._document = document;\n    }\n\n    ngOnDestroy() {\n      const container = this._containerElement;\n\n      if (container && container.parentNode) {\n        container.parentNode.removeChild(container);\n      }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n\n\n    getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n\n\n    _createContainer() {\n      const containerClass = 'cdk-overlay-container'; // TODO(crisbeto): remove the testing check once we have an overlay testing\n      // module or Angular starts tearing down the testing `NgModule`. See:\n      // https://github.com/angular/angular/issues/18831\n\n      if (this._platform.isBrowser || _isTestEnvironment()) {\n        const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`); // Remove any old containers from the opposite platform.\n        // This can happen when transitioning from the server to the client.\n\n\n        for (let i = 0; i < oppositePlatformContainers.length; i++) {\n          oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n        }\n      }\n\n      const container = this._document.createElement('div');\n\n      container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n      // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n      // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n      // To mitigate the problem we made it so that only containers from a different platform are\n      // cleared, but the side-effect was that people started depending on the overly-aggressive\n      // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n      // module which does the cleanup, we try to detect that we're in a test environment and we\n      // always clear the container. See #17006.\n      // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n\n      if (_isTestEnvironment()) {\n        container.setAttribute('platform', 'test');\n      } else if (!this._platform.isBrowser) {\n        container.setAttribute('platform', 'server');\n      }\n\n      this._document.body.appendChild(container);\n\n      this._containerElement = container;\n    }\n\n  }\n\n  OverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n    return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n  };\n\n  OverlayContainer.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function OverlayContainer_Factory() {\n      return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform));\n    },\n    token: OverlayContainer,\n    providedIn: \"root\"\n  });\n  return OverlayContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n\n    this._backdropClickHandler = event => this._backdropClick.next(event);\n    /** Stream of keydown events dispatched to this overlay. */\n\n\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n\n    this._outsidePointerEvents = new Subject();\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /** The overlay's HTML element */\n\n\n  get overlayElement() {\n    return this._pane;\n  }\n  /** The overlay's backdrop HTML element. */\n\n\n  get backdropElement() {\n    return this._backdropElement;\n  }\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n\n\n  get hostElement() {\n    return this._host;\n  }\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n\n\n  attach(portal) {\n    let attachResult = this._portalOutlet.attach(portal); // Update the pane element with the given configuration.\n\n\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n\n    this._updateElementSize();\n\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    } // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n\n\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    }); // Enable pointer events for the overlay pane element.\n\n\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    } // Only emit the `attachments` event once all other setup is done.\n\n\n    this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n\n    return attachResult;\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n\n\n  detach() {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n    this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n    this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n    this._detachContentWhenStable();\n\n    this._locationChanges.unsubscribe();\n\n    this._outsideClickDispatcher.remove(this);\n\n    return detachmentResult;\n  }\n  /** Cleans up the overlay from the DOM. */\n\n\n  dispose() {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n\n    this._disposeBackdrop(this._backdropElement);\n\n    this._locationChanges.unsubscribe();\n\n    this._keyboardDispatcher.remove(this);\n\n    this._portalOutlet.dispose();\n\n    this._attachments.complete();\n\n    this._backdropClick.complete();\n\n    this._keydownEvents.complete();\n\n    this._outsidePointerEvents.complete();\n\n    this._outsideClickDispatcher.remove(this);\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n\n      this._host = null;\n    }\n\n    this._previousHostParent = this._pane = null;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n  /** Whether the overlay has attached content. */\n\n\n  hasAttached() {\n    return this._portalOutlet.hasAttached();\n  }\n  /** Gets an observable that emits when the backdrop has been clicked. */\n\n\n  backdropClick() {\n    return this._backdropClick;\n  }\n  /** Gets an observable that emits when the overlay has been attached. */\n\n\n  attachments() {\n    return this._attachments;\n  }\n  /** Gets an observable that emits when the overlay has been detached. */\n\n\n  detachments() {\n    return this._detachments;\n  }\n  /** Gets an observable of keydown events targeted to this overlay. */\n\n\n  keydownEvents() {\n    return this._keydownEvents;\n  }\n  /** Gets an observable of pointer events targeted outside this overlay. */\n\n\n  outsidePointerEvents() {\n    return this._outsidePointerEvents;\n  }\n  /** Gets the current overlay configuration, which is immutable. */\n\n\n  getConfig() {\n    return this._config;\n  }\n  /** Updates the position of the overlay based on the position strategy. */\n\n\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n  /** Switches to a new position strategy and updates the overlay position. */\n\n\n  updatePositionStrategy(strategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n  /** Update the size properties of the overlay. */\n\n\n  updateSize(sizeConfig) {\n    this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n\n    this._updateElementSize();\n  }\n  /** Sets the LTR/RTL direction for the overlay. */\n\n\n  setDirection(dir) {\n    this._config = Object.assign(Object.assign({}, this._config), {\n      direction: dir\n    });\n\n    this._updateElementDirection();\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n\n\n  getDirection() {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n  /** Switches to a new scroll strategy. */\n\n\n  updateScrollStrategy(strategy) {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n  /** Updates the text direction of the overlay panel. */\n\n\n  _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n  /** Updates the size of the overlay element based on the overlay config. */\n\n\n  _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n  /** Toggles the pointer events for the overlay pane element. */\n\n\n  _togglePointerEvents(enablePointer) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n  /** Attaches a backdrop for this overlay. */\n\n\n  _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n    this._backdropElement = this._document.createElement('div');\n\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    } // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n\n\n    this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n\n\n    this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.\n\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n\n\n  _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode.appendChild(this._host);\n    }\n  }\n  /** Detaches the backdrop (if any) associated with the overlay. */\n\n\n  detachBackdrop() {\n    const backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId;\n\n    const finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach) {\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n        this._disposeBackdrop(backdropToDetach);\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n    }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n\n\n    backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n  /** Toggles a single CSS class or an array of classes on an element. */\n\n\n  _toggleClasses(element, cssClasses, isAdd) {\n    const classList = element.classList;\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      // Also trying to add an empty string to a DOMTokenList will throw.\n      if (cssClass) {\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n    });\n  }\n  /** Detaches the overlay content next time the zone stabilizes. */\n\n\n  _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable.pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._pane && this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n          }\n\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n\n            this._previousHostParent.removeChild(this._host);\n          }\n\n          subscription.unsubscribe();\n        }\n      });\n    });\n  }\n  /** Disposes of a scroll strategy. */\n\n\n  _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n  /** Removes a backdrop element from the DOM. */\n\n\n  _disposeBackdrop(backdrop) {\n    if (backdrop) {\n      if (backdrop.parentNode) {\n        backdrop.parentNode.removeChild(backdrop);\n      } // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n\n\n      if (this._backdropElement === backdrop) {\n        this._backdropElement = null;\n      }\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\n\n\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nclass FlexibleConnectedPositionStrategy {\n  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /** Whether the overlay was pushed in a previous positioning. */\n\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  get positions() {\n    return this._preferredPositions;\n  }\n  /** Attaches this position strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n\n    this._resizeSubscription.unsubscribe();\n\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n\n\n  apply() {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    } // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n\n\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n\n    this._resetOverlayElementStyles();\n\n    this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n\n\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.\n\n    const flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n    let fallback; // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n\n\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n\n        this._applyPosition(pos, originPoint);\n\n        return;\n      } // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n\n\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n        continue;\n      } // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n\n\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {\n          overlayFit,\n          overlayPoint,\n          originPoint,\n          position: pos,\n          overlayRect\n        };\n      }\n    } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n\n\n    if (flexibleFits.length) {\n      let bestFit = null;\n      let bestScore = -1;\n\n      for (const fit of flexibleFits) {\n        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n\n      this._applyPosition(bestFit.position, bestFit.origin);\n\n      return;\n    } // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n\n\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n\n      this._applyPosition(fallback.position, fallback.originPoint);\n\n      return;\n    } // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n\n\n    this._applyPosition(fallback.position, fallback.originPoint);\n  }\n\n  detach() {\n    this._clearPanelClasses();\n\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n\n    this._resizeSubscription.unsubscribe();\n  }\n  /** Cleanup after the element gets destroyed. */\n\n\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    } // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n\n\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n\n    this._positionChanges.complete();\n\n    this._overlayRef = this._boundingBox = null;\n    this._isDisposed = true;\n  }\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n\n\n  reapplyLastPosition() {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n\n\n  withScrollableContainers(scrollables) {\n    this._scrollables = scrollables;\n    return this;\n  }\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n\n\n  withPositions(positions) {\n    this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n    if (positions.indexOf(this._lastPosition) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n\n\n  withViewportMargin(margin) {\n    this._viewportMargin = margin;\n    return this;\n  }\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n\n\n  withFlexibleDimensions(flexibleDimensions = true) {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n\n\n  withGrowAfterOpen(growAfterOpen = true) {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n\n  withPush(canPush = true) {\n    this._canPush = canPush;\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n\n\n  withLockedPosition(isLocked = true) {\n    this._positionLocked = isLocked;\n    return this;\n  }\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n\n\n  setOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n\n\n  withDefaultOffsetX(offset) {\n    this._offsetX = offset;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n\n\n  withDefaultOffsetY(offset) {\n    this._offsetY = offset;\n    return this;\n  }\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n\n\n  withTransformOriginOn(selector) {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n\n\n  _getOriginPoint(originRect, pos) {\n    let x;\n\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y;\n\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n\n\n  _getOverlayPoint(originPoint, overlayRect, pos) {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX;\n\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY;\n\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    } // The (x, y) coordinates of the overlay.\n\n\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY\n    };\n  }\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n\n\n  _getOverlayFit(point, rawOverlayRect, viewport, position) {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {\n      x,\n      y\n    } = point;\n\n    let offsetX = this._getOffset(position, 'x');\n\n    let offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    } // How much the overlay would overflow at this position, on each side.\n\n\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n\n    let visibleArea = visibleWidth * visibleHeight;\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width\n    };\n  }\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n\n\n  _canFitWithFlexibleDimensions(fit, point, viewport) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n      return verticalFit && horizontalFit;\n    }\n\n    return false;\n  }\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n\n\n  _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    } // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n\n\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n    let pushX = 0;\n    let pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {\n      x: pushX,\n      y: pushY\n    };\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY\n    };\n  }\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n\n\n  _applyPosition(position, originPoint) {\n    this._setTransformOrigin(position);\n\n    this._setOverlayElementStyles(originPoint, position);\n\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    } // Save the last connected position in case the position needs to be re-calculated.\n\n\n    this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n\n\n  _setTransformOrigin(position) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n\n    let xOrigin;\n    let yOrigin = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n\n\n  _calculateBoundingBoxRect(origin, position) {\n    const viewport = this._viewportRect;\n\n    const isRtl = this._isRtl();\n\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n      const previousHeight = this._lastBoundingBoxSize.height;\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    } // The overlay is opening 'right-ward' (the content flows to the right).\n\n\n    const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n    const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right,\n      width,\n      height\n    };\n  }\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n\n\n  _setBoundingBoxStyles(origin, position) {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n\n\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {};\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n    extendStyles(this._boundingBox.style, styles);\n  }\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n\n\n  _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: ''\n    });\n  }\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n\n\n  _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: ''\n    });\n  }\n  /** Sets positioning styles to the overlay element. */\n\n\n  _setOverlayElementStyles(originPoint, position) {\n    const styles = {};\n\n    const hasExactPosition = this._hasExactPosition();\n\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n\n\n    let transformString = '';\n\n    let offsetX = this._getOffset(position, 'x');\n\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n\n\n  _getExactOverlayY(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {\n      top: '',\n      bottom: ''\n    };\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n\n\n    overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n\n\n  _getExactOverlayX(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {\n      left: '',\n      right: ''\n    };\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n\n\n    let horizontalStyleProperty;\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    } // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n\n\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n\n\n  _getScrollVisibility() {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n\n    const overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n\n\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n    };\n  }\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n\n\n  _subtractOverflows(length, ...overflows) {\n    return overflows.reduce((currentValue, currentOverflow) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n\n\n  _getNarrowedViewportRect() {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin\n    };\n  }\n  /** Whether the we're dealing with an RTL context */\n\n\n  _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n  /** Determines whether the overlay uses exact or flexible positioning. */\n\n\n  _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n  /** Retrieves the offset of a position along the x or y axis. */\n\n\n  _getOffset(position, axis) {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n  /** Validates that the current position match the expected values. */\n\n\n  _validatePositions() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      } // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n\n\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n\n\n  _addPanelClasses(cssClasses) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n\n\n  _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n\n      this._appliedPanelClasses = [];\n    }\n  }\n  /** Returns the ClientRect of the current origin. */\n\n\n  _getOriginRect() {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    } // Check for Element so SVG elements are also supported.\n\n\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\n\n\nfunction extendStyles(destination, source) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\n\n\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\n\n\nfunction getRoundedBoundingClientRect(clientRect) {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\n\n\nclass ConnectedPositionStrategy {\n  constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n    this.onPositionChange = this._positionStrategy.positionChanges;\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  get positions() {\n    return this._preferredPositions;\n  }\n  /** Attach this position strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    this._overlayRef = overlayRef;\n\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n  /** Disposes all resources used by the position strategy. */\n\n\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n  /** @docs-private */\n\n\n  detach() {\n    this._positionStrategy.detach();\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n\n\n  apply() {\n    this._positionStrategy.apply();\n  }\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n\n\n  recalculateLastPosition() {\n    this._positionStrategy.reapplyLastPosition();\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n\n\n  withScrollableContainers(scrollables) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n\n\n  withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n\n    this._preferredPositions.push(position);\n\n    this._positionStrategy.withPositions(this._preferredPositions);\n\n    return this;\n  }\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n\n\n  withDirection(dir) {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n\n\n  withOffsetX(offset) {\n    this._positionStrategy.withDefaultOffsetX(offset);\n\n    return this;\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n\n\n  withOffsetY(offset) {\n    this._positionStrategy.withDefaultOffsetY(offset);\n\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n\n\n  withLockedPosition(isLocked) {\n    this._positionStrategy.withLockedPosition(isLocked);\n\n    return this;\n  }\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n\n\n  withPositions(positions) {\n    this._preferredPositions = positions.slice();\n\n    this._positionStrategy.withPositions(this._preferredPositions);\n\n    return this;\n  }\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n\n\n  setOrigin(origin) {\n    this._positionStrategy.setOrigin(origin);\n\n    return this;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Class to be added to the overlay pane wrapper. */\n\n\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nclass GlobalPositionStrategy {\n  constructor() {\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n\n  attach(overlayRef) {\n    const config = overlayRef.getConfig();\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({\n        width: this._width\n      });\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({\n        height: this._height\n      });\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n\n\n  top(value = '') {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n\n\n  left(value = '') {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n\n\n  bottom(value = '') {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n\n\n  right(value = '') {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n\n\n  width(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        width: value\n      });\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n\n\n  height(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        height: value\n      });\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n\n\n  centerHorizontally(offset = '') {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n\n\n  centerVertically(offset = '') {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n\n\n  apply() {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n\n    const config = this._overlayRef.getConfig();\n\n    const {\n      width,\n      height,\n      maxWidth,\n      maxHeight\n    } = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (shouldBeFlushHorizontally) {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n\n\n  dispose() {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n    this._overlayRef = null;\n    this._isDisposed = true;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Builder for overlay position strategy. */\n\n\nlet OverlayPositionBuilder = /*#__PURE__*/(() => {\n  class OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n      this._viewportRuler = _viewportRuler;\n      this._document = _document;\n      this._platform = _platform;\n      this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n\n\n    global() {\n      return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n\n\n    connectedTo(elementRef, originPos, overlayPos) {\n      return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n\n\n    flexibleConnectedTo(origin) {\n      return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n\n  }\n\n  OverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n    return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer));\n  };\n\n  OverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function OverlayPositionBuilder_Factory() {\n      return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer));\n    },\n    token: OverlayPositionBuilder,\n    providedIn: \"root\"\n  });\n  return OverlayPositionBuilder;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Next overlay unique ID. */\n\n\nlet nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nlet Overlay = /*#__PURE__*/(() => {\n  class Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n      this.scrollStrategies = scrollStrategies;\n      this._overlayContainer = _overlayContainer;\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._positionBuilder = _positionBuilder;\n      this._keyboardDispatcher = _keyboardDispatcher;\n      this._injector = _injector;\n      this._ngZone = _ngZone;\n      this._document = _document;\n      this._directionality = _directionality;\n      this._location = _location;\n      this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n\n\n    create(config) {\n      const host = this._createHostElement();\n\n      const pane = this._createPaneElement(host);\n\n      const portalOutlet = this._createPortalOutlet(pane);\n\n      const overlayConfig = new OverlayConfig(config);\n      overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n      return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n\n\n    position() {\n      return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n\n\n    _createPaneElement(host) {\n      const pane = this._document.createElement('div');\n\n      pane.id = `cdk-overlay-${nextUniqueId++}`;\n      pane.classList.add('cdk-overlay-pane');\n      host.appendChild(pane);\n      return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n\n\n    _createHostElement() {\n      const host = this._document.createElement('div');\n\n      this._overlayContainer.getContainerElement().appendChild(host);\n\n      return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n\n\n    _createPortalOutlet(pane) {\n      // We have to resolve the ApplicationRef later in order to allow people\n      // to use overlay-based providers during app initialization.\n      if (!this._appRef) {\n        this._appRef = this._injector.get(ApplicationRef);\n      }\n\n      return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n\n  }\n\n  Overlay.ɵfac = function Overlay_Factory(t) {\n    return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher));\n  };\n\n  Overlay.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Overlay,\n    factory: Overlay.ɵfac\n  });\n  return Overlay;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n\n\nconst defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nlet CdkOverlayOrigin = /*#__PURE__*/(() => {\n  class CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  CdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n    return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CdkOverlayOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkOverlayOrigin,\n    selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n    exportAs: [\"cdkOverlayOrigin\"]\n  });\n  return CdkOverlayOrigin;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nlet CdkConnectedOverlay = /*#__PURE__*/(() => {\n  class CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n      this._overlay = _overlay;\n      this._dir = _dir;\n      this._hasBackdrop = false;\n      this._lockPosition = false;\n      this._growAfterOpen = false;\n      this._flexibleDimensions = false;\n      this._push = false;\n      this._backdropSubscription = Subscription.EMPTY;\n      this._attachSubscription = Subscription.EMPTY;\n      this._detachSubscription = Subscription.EMPTY;\n      this._positionSubscription = Subscription.EMPTY;\n      /** Margin between the overlay and the viewport edges. */\n\n      this.viewportMargin = 0;\n      /** Whether the overlay is open. */\n\n      this.open = false;\n      /** Whether the overlay can be closed by user interaction. */\n\n      this.disableClose = false;\n      /** Event emitted when the backdrop is clicked. */\n\n      this.backdropClick = new EventEmitter();\n      /** Event emitted when the position has changed. */\n\n      this.positionChange = new EventEmitter();\n      /** Event emitted when the overlay has been attached. */\n\n      this.attach = new EventEmitter();\n      /** Event emitted when the overlay has been detached. */\n\n      this.detach = new EventEmitter();\n      /** Emits when there are keyboard events that are targeted at the overlay. */\n\n      this.overlayKeydown = new EventEmitter();\n      /** Emits when there are mouse outside click events that are targeted at the overlay. */\n\n      this.overlayOutsideClick = new EventEmitter();\n      this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n      this._scrollStrategyFactory = scrollStrategyFactory;\n      this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n\n\n    get offsetX() {\n      return this._offsetX;\n    }\n\n    set offsetX(offsetX) {\n      this._offsetX = offsetX;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n\n\n    get offsetY() {\n      return this._offsetY;\n    }\n\n    set offsetY(offsetY) {\n      this._offsetY = offsetY;\n\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n      }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n\n\n    get hasBackdrop() {\n      return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /** Whether or not the overlay should be locked when scrolling. */\n\n\n    get lockPosition() {\n      return this._lockPosition;\n    }\n\n    set lockPosition(value) {\n      this._lockPosition = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n\n    get flexibleDimensions() {\n      return this._flexibleDimensions;\n    }\n\n    set flexibleDimensions(value) {\n      this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n\n\n    get growAfterOpen() {\n      return this._growAfterOpen;\n    }\n\n    set growAfterOpen(value) {\n      this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n\n    get push() {\n      return this._push;\n    }\n\n    set push(value) {\n      this._push = coerceBooleanProperty(value);\n    }\n    /** The associated overlay reference. */\n\n\n    get overlayRef() {\n      return this._overlayRef;\n    }\n    /** The element's layout direction. */\n\n\n    get dir() {\n      return this._dir ? this._dir.value : 'ltr';\n    }\n\n    ngOnDestroy() {\n      this._attachSubscription.unsubscribe();\n\n      this._detachSubscription.unsubscribe();\n\n      this._backdropSubscription.unsubscribe();\n\n      this._positionSubscription.unsubscribe();\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n      }\n    }\n\n    ngOnChanges(changes) {\n      if (this._position) {\n        this._updatePositionStrategy(this._position);\n\n        this._overlayRef.updateSize({\n          width: this.width,\n          minWidth: this.minWidth,\n          height: this.height,\n          minHeight: this.minHeight\n        });\n\n        if (changes['origin'] && this.open) {\n          this._position.apply();\n        }\n      }\n\n      if (changes['open']) {\n        this.open ? this._attachOverlay() : this._detachOverlay();\n      }\n    }\n    /** Creates an overlay */\n\n\n    _createOverlay() {\n      if (!this.positions || !this.positions.length) {\n        this.positions = defaultPositionList;\n      }\n\n      const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n\n      this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n      this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n      overlayRef.keydownEvents().subscribe(event => {\n        this.overlayKeydown.next(event);\n\n        if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n          event.preventDefault();\n\n          this._detachOverlay();\n        }\n      });\n\n      this._overlayRef.outsidePointerEvents().subscribe(event => {\n        this.overlayOutsideClick.next(event);\n      });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n\n\n    _buildConfig() {\n      const positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();\n\n      const overlayConfig = new OverlayConfig({\n        direction: this._dir,\n        positionStrategy,\n        scrollStrategy: this.scrollStrategy,\n        hasBackdrop: this.hasBackdrop\n      });\n\n      if (this.width || this.width === 0) {\n        overlayConfig.width = this.width;\n      }\n\n      if (this.height || this.height === 0) {\n        overlayConfig.height = this.height;\n      }\n\n      if (this.minWidth || this.minWidth === 0) {\n        overlayConfig.minWidth = this.minWidth;\n      }\n\n      if (this.minHeight || this.minHeight === 0) {\n        overlayConfig.minHeight = this.minHeight;\n      }\n\n      if (this.backdropClass) {\n        overlayConfig.backdropClass = this.backdropClass;\n      }\n\n      if (this.panelClass) {\n        overlayConfig.panelClass = this.panelClass;\n      }\n\n      return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n\n\n    _updatePositionStrategy(positionStrategy) {\n      const positions = this.positions.map(currentPosition => ({\n        originX: currentPosition.originX,\n        originY: currentPosition.originY,\n        overlayX: currentPosition.overlayX,\n        overlayY: currentPosition.overlayY,\n        offsetX: currentPosition.offsetX || this.offsetX,\n        offsetY: currentPosition.offsetY || this.offsetY,\n        panelClass: currentPosition.panelClass || undefined\n      }));\n      return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n\n\n    _createPositionStrategy() {\n      const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n      this._updatePositionStrategy(strategy);\n\n      return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n\n\n    _attachOverlay() {\n      if (!this._overlayRef) {\n        this._createOverlay();\n      } else {\n        // Update the overlay size, in case the directive's inputs have changed\n        this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n      }\n\n      if (!this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._templatePortal);\n      }\n\n      if (this.hasBackdrop) {\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n          this.backdropClick.emit(event);\n        });\n      } else {\n        this._backdropSubscription.unsubscribe();\n      }\n\n      this._positionSubscription.unsubscribe(); // Only subscribe to `positionChanges` if requested, because putting\n      // together all the information for it can be expensive.\n\n\n      if (this.positionChange.observers.length > 0) {\n        this._positionSubscription = this._position.positionChanges.pipe(takeWhile(() => this.positionChange.observers.length > 0)).subscribe(position => {\n          this.positionChange.emit(position);\n\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n      }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n\n\n    _detachOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.detach();\n      }\n\n      this._backdropSubscription.unsubscribe();\n\n      this._positionSubscription.unsubscribe();\n    }\n\n  }\n\n  CdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n    return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n  };\n\n  CdkConnectedOverlay.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkConnectedOverlay,\n    selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n    inputs: {\n      viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n      open: [\"cdkConnectedOverlayOpen\", \"open\"],\n      disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n      scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n      offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n      offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n      hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n      lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n      flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n      growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n      push: [\"cdkConnectedOverlayPush\", \"push\"],\n      positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n      origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n      positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n      width: [\"cdkConnectedOverlayWidth\", \"width\"],\n      height: [\"cdkConnectedOverlayHeight\", \"height\"],\n      minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n      minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n      backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n      panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n      transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"]\n    },\n    outputs: {\n      backdropClick: \"backdropClick\",\n      positionChange: \"positionChange\",\n      attach: \"attach\",\n      detach: \"detach\",\n      overlayKeydown: \"overlayKeydown\",\n      overlayOutsideClick: \"overlayOutsideClick\"\n    },\n    exportAs: [\"cdkConnectedOverlay\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkConnectedOverlay;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet OverlayModule = /*#__PURE__*/(() => {\n  class OverlayModule {}\n\n  OverlayModule.ɵfac = function OverlayModule_Factory(t) {\n    return new (t || OverlayModule)();\n  };\n\n  OverlayModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: OverlayModule\n  });\n  OverlayModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n    imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule]\n  });\n  return OverlayModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function () {\n      return [BidiModule, PortalModule, ScrollingModule];\n    },\n    exports: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\n\nlet FullscreenOverlayContainer = /*#__PURE__*/(() => {\n  class FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n      super(_document, platform);\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n\n      if (this._fullScreenEventName && this._fullScreenListener) {\n        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n      }\n    }\n\n    _createContainer() {\n      super._createContainer();\n\n      this._adjustParentForFullscreenChange();\n\n      this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n\n    _adjustParentForFullscreenChange() {\n      if (!this._containerElement) {\n        return;\n      }\n\n      const fullscreenElement = this.getFullscreenElement();\n      const parent = fullscreenElement || this._document.body;\n      parent.appendChild(this._containerElement);\n    }\n\n    _addFullscreenChangeListener(fn) {\n      const eventName = this._getEventName();\n\n      if (eventName) {\n        if (this._fullScreenListener) {\n          this._document.removeEventListener(eventName, this._fullScreenListener);\n        }\n\n        this._document.addEventListener(eventName, fn);\n\n        this._fullScreenListener = fn;\n      }\n    }\n\n    _getEventName() {\n      if (!this._fullScreenEventName) {\n        const _document = this._document;\n\n        if (_document.fullscreenEnabled) {\n          this._fullScreenEventName = 'fullscreenchange';\n        } else if (_document.webkitFullscreenEnabled) {\n          this._fullScreenEventName = 'webkitfullscreenchange';\n        } else if (_document.mozFullScreenEnabled) {\n          this._fullScreenEventName = 'mozfullscreenchange';\n        } else if (_document.msFullscreenEnabled) {\n          this._fullScreenEventName = 'MSFullscreenChange';\n        }\n      }\n\n      return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n\n\n    getFullscreenElement() {\n      const _document = this._document;\n      return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n    }\n\n  }\n\n  FullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n    return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n  };\n\n  FullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function FullscreenOverlayContainer_Factory() {\n      return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform));\n    },\n    token: FullscreenOverlayContainer,\n    providedIn: \"root\"\n  });\n  return FullscreenOverlayContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js"],"names":["i1","ScrollDispatcher","ViewportRuler","ScrollingModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","CdkScrollable","i1$1","DOCUMENT","Location","i0","Injectable","NgZone","Inject","Optional","ElementRef","ApplicationRef","ComponentFactoryResolver","Injector","InjectionToken","Directive","EventEmitter","TemplateRef","ViewContainerRef","Input","Output","NgModule","coerceCssPixelValue","coerceArray","coerceBooleanProperty","i2","supportsScrollBehavior","_getEventTarget","Platform","_isTestEnvironment","Directionality","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","Subject","Subscription","merge","take","takeUntil","takeWhile","ESCAPE","hasModifierKey","scrollBehaviorSupported","BlockScrollStrategy","constructor","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","ngDevMode","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","ScrollStrategyOptions_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","undefined","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","ngOnDestroy","push","index","indexOf","splice","length","BaseOverlayDispatcher_Factory","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","next","_isAttached","addEventListener","removeEventListener","OverlayKeyboardDispatcher_Factory","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_clickListener","target","type","slice","_outsidePointerEvents","IOS","_cursorOriginalValue","cursor","OverlayOutsideClickDispatcher_Factory","OverlayContainer","container","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","OverlayContainer_Factory","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","_disposeBackdrop","complete","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","forEach","cssClass","subscription","children","backdrop","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFallbackPosition","onPositionChange","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","global","elementRef","flexibleConnectedTo","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","lockPosition","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","emit","keyCode","preventDefault","_createPositionStrategy","currentPosition","transformOriginSelector","CdkConnectedOverlay_Factory","inputs","outputs","features","ɵɵNgOnChangesFeature","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","ɵangular_material_src_cdk_overlay_overlay_a","ɵangular_material_src_cdk_overlay_overlay_b","ɵangular_material_src_cdk_overlay_overlay_c","ɵangular_material_src_cdk_overlay_overlay_d"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,wBAApB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,eAA1C,QAAiE,wBAAjE;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AACA,SAASC,aAAT,EAAwBR,gBAAxB,EAA0CC,aAA1C,QAA+D,wBAA/D;AACA,OAAO,KAAKQ,IAAZ,MAAsB,iBAAtB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,iBAAnC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+CC,UAA/C,EAA2DC,cAA3D,EAA2EC,wBAA3E,EAAqGC,QAArG,EAA+GC,cAA/G,EAA+HC,SAA/H,EAA0IC,YAA1I,EAAwJC,WAAxJ,EAAqKC,gBAArK,EAAuLC,KAAvL,EAA8LC,MAA9L,EAAsMC,QAAtM,QAAsN,eAAtN;AACA,SAASC,mBAAT,EAA8BC,WAA9B,EAA2CC,qBAA3C,QAAwE,uBAAxE;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,SAASC,sBAAT,EAAiCC,eAAjC,EAAkDC,QAAlD,EAA4DC,kBAA5D,QAAsF,uBAAtF;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,mBAA3C;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,YAA1C,QAA8D,qBAA9D;AACA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,KAAhC,QAA6C,MAA7C;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,SAA1B,QAA2C,gBAA3C;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,uBAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,uBAAuB,gBAAGjB,sBAAsB,EAAtD;AACA;AACA;AACA;;AACA,MAAMkB,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,QAAjB,EAA2B;AAClC,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKE,mBAAL,GAA2B;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,IAAI,EAAE;AAAjB,KAA3B;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,SAAL,GAAiBL,QAAjB;AACH;AACD;;;AACAM,EAAAA,MAAM,GAAG,CAAG;AACZ;;;AACAC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKC,aAAL,EAAJ,EAA0B;AACtB,YAAMC,IAAI,GAAG,KAAKJ,SAAL,CAAeK,eAA5B;AACA,WAAKC,uBAAL,GAA+B,KAAKZ,cAAL,CAAoBa,yBAApB,EAA/B,CAFsB,CAGtB;;AACA,WAAKX,mBAAL,CAAyBE,IAAzB,GAAgCM,IAAI,CAACI,KAAL,CAAWV,IAAX,IAAmB,EAAnD;AACA,WAAKF,mBAAL,CAAyBC,GAAzB,GAA+BO,IAAI,CAACI,KAAL,CAAWX,GAAX,IAAkB,EAAjD,CALsB,CAMtB;AACA;;AACAO,MAAAA,IAAI,CAACI,KAAL,CAAWV,IAAX,GAAkB5B,mBAAmB,CAAC,CAAC,KAAKoC,uBAAL,CAA6BR,IAA/B,CAArC;AACAM,MAAAA,IAAI,CAACI,KAAL,CAAWX,GAAX,GAAiB3B,mBAAmB,CAAC,CAAC,KAAKoC,uBAAL,CAA6BT,GAA/B,CAApC;AACAO,MAAAA,IAAI,CAACK,SAAL,CAAeC,GAAf,CAAmB,wBAAnB;AACA,WAAKX,UAAL,GAAkB,IAAlB;AACH;AACJ;AACD;;;AACAY,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKZ,UAAT,EAAqB;AACjB,YAAMa,IAAI,GAAG,KAAKZ,SAAL,CAAeK,eAA5B;AACA,YAAMQ,IAAI,GAAG,KAAKb,SAAL,CAAea,IAA5B;AACA,YAAMC,SAAS,GAAGF,IAAI,CAACJ,KAAvB;AACA,YAAMO,SAAS,GAAGF,IAAI,CAACL,KAAvB;AACA,YAAMQ,0BAA0B,GAAGF,SAAS,CAACG,cAAV,IAA4B,EAA/D;AACA,YAAMC,0BAA0B,GAAGH,SAAS,CAACE,cAAV,IAA4B,EAA/D;AACA,WAAKlB,UAAL,GAAkB,KAAlB;AACAe,MAAAA,SAAS,CAAChB,IAAV,GAAiB,KAAKF,mBAAL,CAAyBE,IAA1C;AACAgB,MAAAA,SAAS,CAACjB,GAAV,GAAgB,KAAKD,mBAAL,CAAyBC,GAAzC;AACAe,MAAAA,IAAI,CAACH,SAAL,CAAeU,MAAf,CAAsB,wBAAtB,EAViB,CAWjB;AACA;AACA;AACA;AACA;;AACA,UAAI5B,uBAAJ,EAA6B;AACzBuB,QAAAA,SAAS,CAACG,cAAV,GAA2BF,SAAS,CAACE,cAAV,GAA2B,MAAtD;AACH;;AACDG,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKf,uBAAL,CAA6BR,IAA3C,EAAiD,KAAKQ,uBAAL,CAA6BT,GAA9E;;AACA,UAAIN,uBAAJ,EAA6B;AACzBuB,QAAAA,SAAS,CAACG,cAAV,GAA2BD,0BAA3B;AACAD,QAAAA,SAAS,CAACE,cAAV,GAA2BC,0BAA3B;AACH;AACJ;AACJ;;AACDf,EAAAA,aAAa,GAAG;AACZ;AACA;AACA;AACA,UAAMS,IAAI,GAAG,KAAKZ,SAAL,CAAeK,eAA5B;;AACA,QAAIO,IAAI,CAACH,SAAL,CAAea,QAAf,CAAwB,wBAAxB,KAAqD,KAAKvB,UAA9D,EAA0E;AACtE,aAAO,KAAP;AACH;;AACD,UAAMc,IAAI,GAAG,KAAKb,SAAL,CAAea,IAA5B;;AACA,UAAMU,QAAQ,GAAG,KAAK7B,cAAL,CAAoB8B,eAApB,EAAjB;;AACA,WAAOX,IAAI,CAACY,YAAL,GAAoBF,QAAQ,CAACG,MAA7B,IAAuCb,IAAI,CAACc,WAAL,GAAmBJ,QAAQ,CAACK,KAA1E;AACH;;AAhEqB;AAmE1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,SAASC,wCAAT,GAAoD;AAChD,SAAOC,KAAK,CAAE,4CAAF,CAAZ;AACH;AAED;AACA;AACA;;;AACA,MAAMC,mBAAN,CAA0B;AACtBtC,EAAAA,WAAW,CAACuC,iBAAD,EAAoBC,OAApB,EAA6BvC,cAA7B,EAA6CwC,OAA7C,EAAsD;AAC7D,SAAKF,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKvC,cAAL,GAAsBA,cAAtB;AACA,SAAKwC,OAAL,GAAeA,OAAf;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AACA;;AACA,SAAKC,OAAL,GAAe,MAAM;AACjB,WAAKzB,OAAL;;AACA,UAAI,KAAK0B,WAAL,CAAiBC,WAAjB,EAAJ,EAAoC;AAChC,aAAKL,OAAL,CAAaM,GAAb,CAAiB,MAAM,KAAKF,WAAL,CAAiBG,MAAjB,EAAvB;AACH;AACJ,KALD;AAMH;AACD;;;AACAvC,EAAAA,MAAM,CAACwC,UAAD,EAAa;AACf,QAAI,KAAKJ,WAAL,KAAqB,OAAOK,SAAP,KAAqB,WAArB,IAAoCA,SAAzD,CAAJ,EAAyE;AACrE,YAAMb,wCAAwC,EAA9C;AACH;;AACD,SAAKQ,WAAL,GAAmBI,UAAnB;AACH;AACD;;;AACAvC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKiC,mBAAT,EAA8B;AAC1B;AACH;;AACD,UAAMQ,MAAM,GAAG,KAAKX,iBAAL,CAAuBY,QAAvB,CAAgC,CAAhC,CAAf;;AACA,QAAI,KAAKV,OAAL,IAAgB,KAAKA,OAAL,CAAaW,SAA7B,IAA0C,KAAKX,OAAL,CAAaW,SAAb,GAAyB,CAAvE,EAA0E;AACtE,WAAKC,sBAAL,GAA8B,KAAKpD,cAAL,CAAoBa,yBAApB,GAAgDV,GAA9E;AACA,WAAKsC,mBAAL,GAA2BQ,MAAM,CAACI,SAAP,CAAiB,MAAM;AAC9C,cAAMC,cAAc,GAAG,KAAKtD,cAAL,CAAoBa,yBAApB,GAAgDV,GAAvE;;AACA,YAAIoD,IAAI,CAACC,GAAL,CAASF,cAAc,GAAG,KAAKF,sBAA/B,IAAyD,KAAKZ,OAAL,CAAaW,SAA1E,EAAqF;AACjF,eAAKT,OAAL;AACH,SAFD,MAGK;AACD,eAAKC,WAAL,CAAiBc,cAAjB;AACH;AACJ,OAR0B,CAA3B;AASH,KAXD,MAYK;AACD,WAAKhB,mBAAL,GAA2BQ,MAAM,CAACI,SAAP,CAAiB,KAAKX,OAAtB,CAA3B;AACH;AACJ;AACD;;;AACAzB,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKwB,mBAAT,EAA8B;AAC1B,WAAKA,mBAAL,CAAyBiB,WAAzB;;AACA,WAAKjB,mBAAL,GAA2B,IAA3B;AACH;AACJ;;AACDK,EAAAA,MAAM,GAAG;AACL,SAAK7B,OAAL;AACA,SAAK0B,WAAL,GAAmB,IAAnB;AACH;;AAtDqB;AAyD1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMgB,kBAAN,CAAyB;AACrB;AACAnD,EAAAA,MAAM,GAAG,CAAG;AACZ;;;AACAS,EAAAA,OAAO,GAAG,CAAG;AACb;;;AACAV,EAAAA,MAAM,GAAG,CAAG;;AANS;AASzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqD,4BAAT,CAAsCC,OAAtC,EAA+CC,gBAA/C,EAAiE;AAC7D,SAAOA,gBAAgB,CAACC,IAAjB,CAAsBC,eAAe,IAAI;AAC5C,UAAMC,YAAY,GAAGJ,OAAO,CAACK,MAAR,GAAiBF,eAAe,CAAC7D,GAAtD;AACA,UAAMgE,YAAY,GAAGN,OAAO,CAAC1D,GAAR,GAAc6D,eAAe,CAACE,MAAnD;AACA,UAAME,WAAW,GAAGP,OAAO,CAACQ,KAAR,GAAgBL,eAAe,CAAC5D,IAApD;AACA,UAAMkE,YAAY,GAAGT,OAAO,CAACzD,IAAR,GAAe4D,eAAe,CAACK,KAApD;AACA,WAAOJ,YAAY,IAAIE,YAAhB,IAAgCC,WAAhC,IAA+CE,YAAtD;AACH,GANM,CAAP;AAOH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,2BAAT,CAAqCV,OAArC,EAA8CC,gBAA9C,EAAgE;AAC5D,SAAOA,gBAAgB,CAACC,IAAjB,CAAsBS,mBAAmB,IAAI;AAChD,UAAMC,YAAY,GAAGZ,OAAO,CAAC1D,GAAR,GAAcqE,mBAAmB,CAACrE,GAAvD;AACA,UAAMuE,YAAY,GAAGb,OAAO,CAACK,MAAR,GAAiBM,mBAAmB,CAACN,MAA1D;AACA,UAAMS,WAAW,GAAGd,OAAO,CAACzD,IAAR,GAAeoE,mBAAmB,CAACpE,IAAvD;AACA,UAAMwE,YAAY,GAAGf,OAAO,CAACQ,KAAR,GAAgBG,mBAAmB,CAACH,KAAzD;AACA,WAAOI,YAAY,IAAIC,YAAhB,IAAgCC,WAAhC,IAA+CC,YAAtD;AACH,GANM,CAAP;AAOH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;AACA,MAAMC,wBAAN,CAA+B;AAC3B9E,EAAAA,WAAW,CAACuC,iBAAD,EAAoBtC,cAApB,EAAoCuC,OAApC,EAA6CC,OAA7C,EAAsD;AAC7D,SAAKF,iBAAL,GAAyBA,iBAAzB;AACA,SAAKtC,cAAL,GAAsBA,cAAtB;AACA,SAAKuC,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AACH;AACD;;;AACAlC,EAAAA,MAAM,CAACwC,UAAD,EAAa;AACf,QAAI,KAAKJ,WAAL,KAAqB,OAAOK,SAAP,KAAqB,WAArB,IAAoCA,SAAzD,CAAJ,EAAyE;AACrE,YAAMb,wCAAwC,EAA9C;AACH;;AACD,SAAKQ,WAAL,GAAmBI,UAAnB;AACH;AACD;;;AACAvC,EAAAA,MAAM,GAAG;AACL,QAAI,CAAC,KAAKiC,mBAAV,EAA+B;AAC3B,YAAMqC,QAAQ,GAAG,KAAKtC,OAAL,GAAe,KAAKA,OAAL,CAAauC,cAA5B,GAA6C,CAA9D;AACA,WAAKtC,mBAAL,GAA2B,KAAKH,iBAAL,CAAuBY,QAAvB,CAAgC4B,QAAhC,EAA0CzB,SAA1C,CAAoD,MAAM;AACjF,aAAKV,WAAL,CAAiBc,cAAjB,GADiF,CAEjF;;;AACA,YAAI,KAAKjB,OAAL,IAAgB,KAAKA,OAAL,CAAawC,SAAjC,EAA4C;AACxC,gBAAMC,WAAW,GAAG,KAAKtC,WAAL,CAAiBuC,cAAjB,CAAgCC,qBAAhC,EAApB;;AACA,gBAAM;AAAEjD,YAAAA,KAAF;AAASF,YAAAA;AAAT,cAAoB,KAAKhC,cAAL,CAAoB8B,eAApB,EAA1B,CAFwC,CAGxC;AACA;;;AACA,gBAAMsD,WAAW,GAAG,CAAC;AAAElD,YAAAA,KAAF;AAASF,YAAAA,MAAT;AAAiBkC,YAAAA,MAAM,EAAElC,MAAzB;AAAiCqC,YAAAA,KAAK,EAAEnC,KAAxC;AAA+C/B,YAAAA,GAAG,EAAE,CAApD;AAAuDC,YAAAA,IAAI,EAAE;AAA7D,WAAD,CAApB;;AACA,cAAIwD,4BAA4B,CAACqB,WAAD,EAAcG,WAAd,CAAhC,EAA4D;AACxD,iBAAKnE,OAAL;;AACA,iBAAKsB,OAAL,CAAaM,GAAb,CAAiB,MAAM,KAAKF,WAAL,CAAiBG,MAAjB,EAAvB;AACH;AACJ;AACJ,OAd0B,CAA3B;AAeH;AACJ;AACD;;;AACA7B,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKwB,mBAAT,EAA8B;AAC1B,WAAKA,mBAAL,CAAyBiB,WAAzB;;AACA,WAAKjB,mBAAL,GAA2B,IAA3B;AACH;AACJ;;AACDK,EAAAA,MAAM,GAAG;AACL,SAAK7B,OAAL;AACA,SAAK0B,WAAL,GAAmB,IAAnB;AACH;;AA9C0B;AAiD/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM0C,qB;AAAN,QAAMA,qBAAN,CAA4B;AACxBtF,IAAAA,WAAW,CAACuC,iBAAD,EAAoBtC,cAApB,EAAoCuC,OAApC,EAA6CtC,QAA7C,EAAuD;AAC9D,WAAKqC,iBAAL,GAAyBA,iBAAzB;AACA,WAAKtC,cAAL,GAAsBA,cAAtB;AACA,WAAKuC,OAAL,GAAeA,OAAf;AACA;;AACA,WAAK+C,IAAL,GAAY,MAAM,IAAI3B,kBAAJ,EAAlB;AACA;AACR;AACA;AACA;;;AACQ,WAAK4B,KAAL,GAAcC,MAAD,IAAY,IAAInD,mBAAJ,CAAwB,KAAKC,iBAA7B,EAAgD,KAAKC,OAArD,EAA8D,KAAKvC,cAAnE,EAAmFwF,MAAnF,CAAzB;AACA;;;AACA,WAAKC,KAAL,GAAa,MAAM,IAAI3F,mBAAJ,CAAwB,KAAKE,cAA7B,EAA6C,KAAKM,SAAlD,CAAnB;AACA;AACR;AACA;AACA;AACA;;;AACQ,WAAKoF,UAAL,GAAmBF,MAAD,IAAY,IAAIX,wBAAJ,CAA6B,KAAKvC,iBAAlC,EAAqD,KAAKtC,cAA1D,EAA0E,KAAKuC,OAA/E,EAAwFiD,MAAxF,CAA9B;;AACA,WAAKlF,SAAL,GAAiBL,QAAjB;AACH;;AArBuB;;AAuB5BoF,EAAAA,qBAAqB,CAACM,IAAtB,GAA6B,SAASC,6BAAT,CAAuCC,CAAvC,EAA0C;AAAE,WAAO,KAAKA,CAAC,IAAIR,qBAAV,EAAiCvI,MAAM,CAACgJ,QAAP,CAAgB/I,MAAM,CAACJ,gBAAvB,CAAjC,EAA2EG,MAAM,CAACgJ,QAAP,CAAgB/I,MAAM,CAACH,aAAvB,CAA3E,EAAkHE,MAAM,CAACgJ,QAAP,CAAgBhJ,MAAM,CAACW,MAAvB,CAAlH,EAAkJX,MAAM,CAACgJ,QAAP,CAAgBzI,QAAhB,CAAlJ,CAAP;AAAsL,GAA/P;;AACAgI,EAAAA,qBAAqB,CAACU,KAAtB,GAA8BxI,EAAE,CAACyI,kBAAH,CAAsB;AAAEC,IAAAA,OAAO,EAAE,SAASL,6BAAT,GAAyC;AAAE,aAAO,IAAIP,qBAAJ,CAA0B9H,EAAE,CAACuI,QAAH,CAAYpJ,EAAE,CAACC,gBAAf,CAA1B,EAA4DY,EAAE,CAACuI,QAAH,CAAYpJ,EAAE,CAACE,aAAf,CAA5D,EAA2FW,EAAE,CAACuI,QAAH,CAAYvI,EAAE,CAACE,MAAf,CAA3F,EAAmHF,EAAE,CAACuI,QAAH,CAAY1I,IAAI,CAACC,QAAjB,CAAnH,CAAP;AAAwJ,KAA9M;AAAgN6I,IAAAA,KAAK,EAAEb,qBAAvN;AAA8Oc,IAAAA,UAAU,EAAE;AAA1P,GAAtB,CAA9B;SAxBMd,qB;;;AA+BN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOrC,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAMe,CAN9B;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMoD,aAAN,CAAoB;AAChBrG,EAAAA,WAAW,CAACyF,MAAD,EAAS;AAChB;AACA,SAAKa,cAAL,GAAsB,IAAI1C,kBAAJ,EAAtB;AACA;;AACA,SAAK2C,UAAL,GAAkB,EAAlB;AACA;;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA;;AACA,SAAKC,aAAL,GAAqB,2BAArB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,mBAAL,GAA2B,KAA3B;;AACA,QAAIjB,MAAJ,EAAY;AACR;AACA;AACA;AACA,YAAMkB,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYpB,MAAZ,CAAnB;;AACA,WAAK,MAAMqB,GAAX,IAAkBH,UAAlB,EAA8B;AAC1B,YAAIlB,MAAM,CAACqB,GAAD,CAAN,KAAgBC,SAApB,EAA+B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAKD,GAAL,IAAYrB,MAAM,CAACqB,GAAD,CAAlB;AACH;AACJ;AACJ;AACJ;;AAjCe;AAoCpB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAME,sBAAN,CAA6B;AACzBhH,EAAAA,WAAW,CAACiH,MAAD,EAASC,OAAT;AACX;AACAC,EAAAA,OAFW;AAGX;AACAC,EAAAA,OAJW;AAKX;AACAb,EAAAA,UANW,EAMC;AACR,SAAKY,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKb,UAAL,GAAkBA,UAAlB;AACA,SAAKc,OAAL,GAAeJ,MAAM,CAACI,OAAtB;AACA,SAAKC,OAAL,GAAeL,MAAM,CAACK,OAAtB;AACA,SAAKC,QAAL,GAAgBL,OAAO,CAACK,QAAxB;AACA,SAAKC,QAAL,GAAgBN,OAAO,CAACM,QAAxB;AACH;;AAfwB;AAiB7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,mBAAN,CAA0B;AAE1B;;;AACA,MAAMC,8BAAN,CAAqC;AACjC1H,EAAAA,WAAW;AACX;AACA2H,EAAAA,cAFW;AAGX;AACAC,EAAAA,wBAJW,EAIe;AACtB,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,wBAAL,GAAgCA,wBAAhC;AACH;;AARgC;;AAcrC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAT,CAAkCC,QAAlC,EAA4CC,KAA5C,EAAmD;AAC/C,MAAIA,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,QAA7B,IAAyCA,KAAK,KAAK,QAAvD,EAAiE;AAC7D,UAAM1F,KAAK,CAAE,8BAA6ByF,QAAS,KAAIC,KAAM,KAAjD,GACP,uCADM,CAAX;AAEH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,0BAAT,CAAoCF,QAApC,EAA8CC,KAA9C,EAAqD;AACjD,MAAIA,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,KAA/B,IAAwCA,KAAK,KAAK,QAAtD,EAAgE;AAC5D,UAAM1F,KAAK,CAAE,8BAA6ByF,QAAS,KAAIC,KAAM,KAAjD,GACP,sCADM,CAAX;AAEH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;IACME,qB;AAAN,QAAMA,qBAAN,CAA4B;AACxBjI,IAAAA,WAAW,CAACE,QAAD,EAAW;AAClB;AACA,WAAKgI,iBAAL,GAAyB,EAAzB;AACA,WAAK3H,SAAL,GAAiBL,QAAjB;AACH;;AACDiI,IAAAA,WAAW,GAAG;AACV,WAAKpF,MAAL;AACH;AACD;;;AACA9B,IAAAA,GAAG,CAAC+B,UAAD,EAAa;AACZ;AACA,WAAKtB,MAAL,CAAYsB,UAAZ;;AACA,WAAKkF,iBAAL,CAAuBE,IAAvB,CAA4BpF,UAA5B;AACH;AACD;;;AACAtB,IAAAA,MAAM,CAACsB,UAAD,EAAa;AACf,YAAMqF,KAAK,GAAG,KAAKH,iBAAL,CAAuBI,OAAvB,CAA+BtF,UAA/B,CAAd;;AACA,UAAIqF,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,aAAKH,iBAAL,CAAuBK,MAAvB,CAA8BF,KAA9B,EAAqC,CAArC;AACH,OAJc,CAKf;;;AACA,UAAI,KAAKH,iBAAL,CAAuBM,MAAvB,KAAkC,CAAtC,EAAyC;AACrC,aAAKzF,MAAL;AACH;AACJ;;AAzBuB;;AA2B5BkF,EAAAA,qBAAqB,CAACrC,IAAtB,GAA6B,SAAS6C,6BAAT,CAAuC3C,CAAvC,EAA0C;AAAE,WAAO,KAAKA,CAAC,IAAImC,qBAAV,EAAiClL,MAAM,CAACgJ,QAAP,CAAgBzI,QAAhB,CAAjC,CAAP;AAAqE,GAA9I;;AACA2K,EAAAA,qBAAqB,CAACjC,KAAtB,GAA8BxI,EAAE,CAACyI,kBAAH,CAAsB;AAAEC,IAAAA,OAAO,EAAE,SAASuC,6BAAT,GAAyC;AAAE,aAAO,IAAIR,qBAAJ,CAA0BzK,EAAE,CAACuI,QAAH,CAAY1I,IAAI,CAACC,QAAjB,CAA1B,CAAP;AAA+D,KAArH;AAAuH6I,IAAAA,KAAK,EAAE8B,qBAA9H;AAAqJ7B,IAAAA,UAAU,EAAE;AAAjK,GAAtB,CAA9B;SA5BM6B,qB;;;AAgCN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOhF,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAMe,CAN9B;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;IACMyF,yB;AAAN,QAAMA,yBAAN,SAAwCT,qBAAxC,CAA8D;AAC1DjI,IAAAA,WAAW,CAACE,QAAD,EAAW;AAClB,YAAMA,QAAN;AACA;;AACA,WAAKyI,gBAAL,GAAyBC,KAAD,IAAW;AAC/B,cAAMC,QAAQ,GAAG,KAAKX,iBAAtB;;AACA,aAAK,IAAIY,CAAC,GAAGD,QAAQ,CAACL,MAAT,GAAkB,CAA/B,EAAkCM,CAAC,GAAG,CAAC,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,cAAID,QAAQ,CAACC,CAAD,CAAR,CAAYC,cAAZ,CAA2BC,SAA3B,CAAqCR,MAArC,GAA8C,CAAlD,EAAqD;AACjDK,YAAAA,QAAQ,CAACC,CAAD,CAAR,CAAYC,cAAZ,CAA2BE,IAA3B,CAAgCL,KAAhC;;AACA;AACH;AACJ;AACJ,OAdD;AAeH;AACD;;;AACA3H,IAAAA,GAAG,CAAC+B,UAAD,EAAa;AACZ,YAAM/B,GAAN,CAAU+B,UAAV,EADY,CAEZ;;AACA,UAAI,CAAC,KAAKkG,WAAV,EAAuB;AACnB,aAAK3I,SAAL,CAAea,IAAf,CAAoB+H,gBAApB,CAAqC,SAArC,EAAgD,KAAKR,gBAArD;;AACA,aAAKO,WAAL,GAAmB,IAAnB;AACH;AACJ;AACD;;;AACAnG,IAAAA,MAAM,GAAG;AACL,UAAI,KAAKmG,WAAT,EAAsB;AAClB,aAAK3I,SAAL,CAAea,IAAf,CAAoBgI,mBAApB,CAAwC,SAAxC,EAAmD,KAAKT,gBAAxD;;AACA,aAAKO,WAAL,GAAmB,KAAnB;AACH;AACJ;;AAnCyD;;AAqC9DR,EAAAA,yBAAyB,CAAC9C,IAA1B,GAAiC,SAASyD,iCAAT,CAA2CvD,CAA3C,EAA8C;AAAE,WAAO,KAAKA,CAAC,IAAI4C,yBAAV,EAAqC3L,MAAM,CAACgJ,QAAP,CAAgBzI,QAAhB,CAArC,CAAP;AAAyE,GAA1J;;AACAoL,EAAAA,yBAAyB,CAAC1C,KAA1B,GAAkCxI,EAAE,CAACyI,kBAAH,CAAsB;AAAEC,IAAAA,OAAO,EAAE,SAASmD,iCAAT,GAA6C;AAAE,aAAO,IAAIX,yBAAJ,CAA8BlL,EAAE,CAACuI,QAAH,CAAY1I,IAAI,CAACC,QAAjB,CAA9B,CAAP;AAAmE,KAA7H;AAA+H6I,IAAAA,KAAK,EAAEuC,yBAAtI;AAAiKtC,IAAAA,UAAU,EAAE;AAA7K,GAAtB,CAAlC;SAtCMsC,yB;;;AA0CN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOzF,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAMe,CAN9B;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;IACMqG,6B;AAAN,QAAMA,6BAAN,SAA4CrB,qBAA5C,CAAkE;AAC9DjI,IAAAA,WAAW,CAACE,QAAD,EAAWqJ,SAAX,EAAsB;AAC7B,YAAMrJ,QAAN;AACA,WAAKqJ,SAAL,GAAiBA,SAAjB;AACA,WAAKC,iBAAL,GAAyB,KAAzB;AACA;;AACA,WAAKC,oBAAL,GAA6Bb,KAAD,IAAW;AACnC,aAAKc,uBAAL,GAA+B5K,eAAe,CAAC8J,KAAD,CAA9C;AACH,OAFD;AAGA;;;AACA,WAAKe,cAAL,GAAuBf,KAAD,IAAW;AAC7B,cAAMgB,MAAM,GAAG9K,eAAe,CAAC8J,KAAD,CAA9B,CAD6B,CAE7B;AACA;AACA;AACA;AACA;AACA;;;AACA,cAAM3B,MAAM,GAAG2B,KAAK,CAACiB,IAAN,KAAe,OAAf,IAA0B,KAAKH,uBAA/B,GACT,KAAKA,uBADI,GACsBE,MADrC,CAR6B,CAU7B;AACA;;AACA,aAAKF,uBAAL,GAA+B,IAA/B,CAZ6B,CAa7B;AACA;AACA;;AACA,cAAMb,QAAQ,GAAG,KAAKX,iBAAL,CAAuB4B,KAAvB,EAAjB,CAhB6B,CAiB7B;AACA;AACA;AACA;;;AACA,aAAK,IAAIhB,CAAC,GAAGD,QAAQ,CAACL,MAAT,GAAkB,CAA/B,EAAkCM,CAAC,GAAG,CAAC,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;AAC3C,gBAAM9F,UAAU,GAAG6F,QAAQ,CAACC,CAAD,CAA3B;;AACA,cAAI9F,UAAU,CAAC+G,qBAAX,CAAiCf,SAAjC,CAA2CR,MAA3C,GAAoD,CAApD,IAAyD,CAACxF,UAAU,CAACH,WAAX,EAA9D,EAAwF;AACpF;AACH,WAJ0C,CAK3C;AACA;AACA;;;AACA,cAAIG,UAAU,CAACmC,cAAX,CAA0BtD,QAA1B,CAAmC+H,MAAnC,KACA5G,UAAU,CAACmC,cAAX,CAA0BtD,QAA1B,CAAmCoF,MAAnC,CADJ,EACgD;AAC5C;AACH;;AACDjE,UAAAA,UAAU,CAAC+G,qBAAX,CAAiCd,IAAjC,CAAsCL,KAAtC;AACH;AACJ,OAnCD;AAoCH;AACD;;;AACA3H,IAAAA,GAAG,CAAC+B,UAAD,EAAa;AACZ,YAAM/B,GAAN,CAAU+B,UAAV,EADY,CAEZ;AACA;AACA;AACA;AACA;AACA;;AACA,UAAI,CAAC,KAAKkG,WAAV,EAAuB;AACnB,cAAM9H,IAAI,GAAG,KAAKb,SAAL,CAAea,IAA5B;AACAA,QAAAA,IAAI,CAAC+H,gBAAL,CAAsB,aAAtB,EAAqC,KAAKM,oBAA1C,EAAgE,IAAhE;AACArI,QAAAA,IAAI,CAAC+H,gBAAL,CAAsB,OAAtB,EAA+B,KAAKQ,cAApC,EAAoD,IAApD;AACAvI,QAAAA,IAAI,CAAC+H,gBAAL,CAAsB,UAAtB,EAAkC,KAAKQ,cAAvC,EAAuD,IAAvD;AACAvI,QAAAA,IAAI,CAAC+H,gBAAL,CAAsB,aAAtB,EAAqC,KAAKQ,cAA1C,EAA0D,IAA1D,EALmB,CAMnB;AACA;;AACA,YAAI,KAAKJ,SAAL,CAAeS,GAAf,IAAsB,CAAC,KAAKR,iBAAhC,EAAmD;AAC/C,eAAKS,oBAAL,GAA4B7I,IAAI,CAACL,KAAL,CAAWmJ,MAAvC;AACA9I,UAAAA,IAAI,CAACL,KAAL,CAAWmJ,MAAX,GAAoB,SAApB;AACA,eAAKV,iBAAL,GAAyB,IAAzB;AACH;;AACD,aAAKN,WAAL,GAAmB,IAAnB;AACH;AACJ;AACD;;;AACAnG,IAAAA,MAAM,GAAG;AACL,UAAI,KAAKmG,WAAT,EAAsB;AAClB,cAAM9H,IAAI,GAAG,KAAKb,SAAL,CAAea,IAA5B;AACAA,QAAAA,IAAI,CAACgI,mBAAL,CAAyB,aAAzB,EAAwC,KAAKK,oBAA7C,EAAmE,IAAnE;AACArI,QAAAA,IAAI,CAACgI,mBAAL,CAAyB,OAAzB,EAAkC,KAAKO,cAAvC,EAAuD,IAAvD;AACAvI,QAAAA,IAAI,CAACgI,mBAAL,CAAyB,UAAzB,EAAqC,KAAKO,cAA1C,EAA0D,IAA1D;AACAvI,QAAAA,IAAI,CAACgI,mBAAL,CAAyB,aAAzB,EAAwC,KAAKO,cAA7C,EAA6D,IAA7D;;AACA,YAAI,KAAKJ,SAAL,CAAeS,GAAf,IAAsB,KAAKR,iBAA/B,EAAkD;AAC9CpI,UAAAA,IAAI,CAACL,KAAL,CAAWmJ,MAAX,GAAoB,KAAKD,oBAAzB;AACA,eAAKT,iBAAL,GAAyB,KAAzB;AACH;;AACD,aAAKN,WAAL,GAAmB,KAAnB;AACH;AACJ;;AAtF6D;;AAwFlEI,EAAAA,6BAA6B,CAAC1D,IAA9B,GAAqC,SAASuE,qCAAT,CAA+CrE,CAA/C,EAAkD;AAAE,WAAO,KAAKA,CAAC,IAAIwD,6BAAV,EAAyCvM,MAAM,CAACgJ,QAAP,CAAgBzI,QAAhB,CAAzC,EAAoEP,MAAM,CAACgJ,QAAP,CAAgB9I,MAAM,CAAC8B,QAAvB,CAApE,CAAP;AAA+G,GAAxM;;AACAuK,EAAAA,6BAA6B,CAACtD,KAA9B,GAAsCxI,EAAE,CAACyI,kBAAH,CAAsB;AAAEC,IAAAA,OAAO,EAAE,SAASiE,qCAAT,GAAiD;AAAE,aAAO,IAAIb,6BAAJ,CAAkC9L,EAAE,CAACuI,QAAH,CAAY1I,IAAI,CAACC,QAAjB,CAAlC,EAA8DE,EAAE,CAACuI,QAAH,CAAYnH,EAAE,CAACG,QAAf,CAA9D,CAAP;AAAiG,KAA/J;AAAiKoH,IAAAA,KAAK,EAAEmD,6BAAxK;AAAuMlD,IAAAA,UAAU,EAAE;AAAnN,GAAtB,CAAtC;SAzFMkD,6B;;;AA8FN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOrG,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAM0C,CANzD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;IACMmH,gB;AAAN,QAAMA,gBAAN,CAAuB;AACnBpK,IAAAA,WAAW,CAACE,QAAD,EAAWqJ,SAAX,EAAsB;AAC7B,WAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAKhJ,SAAL,GAAiBL,QAAjB;AACH;;AACDiI,IAAAA,WAAW,GAAG;AACV,YAAMkC,SAAS,GAAG,KAAKC,iBAAvB;;AACA,UAAID,SAAS,IAAIA,SAAS,CAACE,UAA3B,EAAuC;AACnCF,QAAAA,SAAS,CAACE,UAAV,CAAqBC,WAArB,CAAiCH,SAAjC;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACII,IAAAA,mBAAmB,GAAG;AAClB,UAAI,CAAC,KAAKH,iBAAV,EAA6B;AACzB,aAAKI,gBAAL;AACH;;AACD,aAAO,KAAKJ,iBAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACII,IAAAA,gBAAgB,GAAG;AACf,YAAMC,cAAc,GAAG,uBAAvB,CADe,CAEf;AACA;AACA;;AACA,UAAI,KAAKpB,SAAL,CAAeqB,SAAf,IAA4B5L,kBAAkB,EAAlD,EAAsD;AAClD,cAAM6L,0BAA0B,GAAG,KAAKtK,SAAL,CAAeuK,gBAAf,CAAiC,IAAGH,cAAe,uBAAnB,GAC9D,IAAGA,cAAe,mBADY,CAAnC,CADkD,CAGlD;AACA;;;AACA,aAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+B,0BAA0B,CAACrC,MAA/C,EAAuDM,CAAC,EAAxD,EAA4D;AACxD+B,UAAAA,0BAA0B,CAAC/B,CAAD,CAA1B,CAA8ByB,UAA9B,CAAyCC,WAAzC,CAAqDK,0BAA0B,CAAC/B,CAAD,CAA/E;AACH;AACJ;;AACD,YAAMuB,SAAS,GAAG,KAAK9J,SAAL,CAAewK,aAAf,CAA6B,KAA7B,CAAlB;;AACAV,MAAAA,SAAS,CAACrJ,SAAV,CAAoBC,GAApB,CAAwB0J,cAAxB,EAfe,CAgBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAI3L,kBAAkB,EAAtB,EAA0B;AACtBqL,QAAAA,SAAS,CAACW,YAAV,CAAuB,UAAvB,EAAmC,MAAnC;AACH,OAFD,MAGK,IAAI,CAAC,KAAKzB,SAAL,CAAeqB,SAApB,EAA+B;AAChCP,QAAAA,SAAS,CAACW,YAAV,CAAuB,UAAvB,EAAmC,QAAnC;AACH;;AACD,WAAKzK,SAAL,CAAea,IAAf,CAAoB6J,WAApB,CAAgCZ,SAAhC;;AACA,WAAKC,iBAAL,GAAyBD,SAAzB;AACH;;AA5DkB;;AA8DvBD,EAAAA,gBAAgB,CAACxE,IAAjB,GAAwB,SAASsF,wBAAT,CAAkCpF,CAAlC,EAAqC;AAAE,WAAO,KAAKA,CAAC,IAAIsE,gBAAV,EAA4BrN,MAAM,CAACgJ,QAAP,CAAgBzI,QAAhB,CAA5B,EAAuDP,MAAM,CAACgJ,QAAP,CAAgB9I,MAAM,CAAC8B,QAAvB,CAAvD,CAAP;AAAkG,GAAjK;;AACAqL,EAAAA,gBAAgB,CAACpE,KAAjB,GAAyBxI,EAAE,CAACyI,kBAAH,CAAsB;AAAEC,IAAAA,OAAO,EAAE,SAASgF,wBAAT,GAAoC;AAAE,aAAO,IAAId,gBAAJ,CAAqB5M,EAAE,CAACuI,QAAH,CAAY1I,IAAI,CAACC,QAAjB,CAArB,EAAiDE,EAAE,CAACuI,QAAH,CAAYnH,EAAE,CAACG,QAAf,CAAjD,CAAP;AAAoF,KAArI;AAAuIoH,IAAAA,KAAK,EAAEiE,gBAA9I;AAAgKhE,IAAAA,UAAU,EAAE;AAA5K,GAAtB,CAAzB;SA/DMgE,gB;;;AAoEN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOnH,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAM0C,CANzD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMkI,UAAN,CAAiB;AACbnL,EAAAA,WAAW,CAACoL,aAAD,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8B7I,OAA9B,EAAuCD,OAAvC,EAAgD+I,mBAAhD,EAAqEhL,SAArE,EAAgFiL,SAAhF,EAA2FC,uBAA3F,EAAoH;AAC3H,SAAKL,aAAL,GAAqBA,aAArB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAK7I,OAAL,GAAeA,OAAf;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAK+I,mBAAL,GAA2BA,mBAA3B;AACA,SAAKhL,SAAL,GAAiBA,SAAjB;AACA,SAAKiL,SAAL,GAAiBA,SAAjB;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,cAAL,GAAsB,IAAIrM,OAAJ,EAAtB;AACA,SAAKsM,YAAL,GAAoB,IAAItM,OAAJ,EAApB;AACA,SAAKuM,YAAL,GAAoB,IAAIvM,OAAJ,EAApB;AACA,SAAKwM,gBAAL,GAAwBvM,YAAY,CAACwM,KAArC;;AACA,SAAKC,qBAAL,GAA8BpD,KAAD,IAAW,KAAK+C,cAAL,CAAoB1C,IAApB,CAAyBL,KAAzB,CAAxC;AACA;;;AACA,SAAKG,cAAL,GAAsB,IAAIzJ,OAAJ,EAAtB;AACA;;AACA,SAAKyK,qBAAL,GAA6B,IAAIzK,OAAJ,EAA7B;;AACA,QAAImD,OAAO,CAAC6D,cAAZ,EAA4B;AACxB,WAAK2F,eAAL,GAAuBxJ,OAAO,CAAC6D,cAA/B;;AACA,WAAK2F,eAAL,CAAqBzL,MAArB,CAA4B,IAA5B;AACH;;AACD,SAAK0L,iBAAL,GAAyBzJ,OAAO,CAAC0J,gBAAjC;AACH;AACD;;;AACkB,MAAdhH,cAAc,GAAG;AACjB,WAAO,KAAKmG,KAAZ;AACH;AACD;;;AACmB,MAAfc,eAAe,GAAG;AAClB,WAAO,KAAKV,gBAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACmB,MAAXW,WAAW,GAAG;AACd,WAAO,KAAKhB,KAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI7K,EAAAA,MAAM,CAAC8L,MAAD,EAAS;AACX,QAAIC,YAAY,GAAG,KAAKnB,aAAL,CAAmB5K,MAAnB,CAA0B8L,MAA1B,CAAnB,CADW,CAEX;;;AACA,QAAI,CAAC,KAAKjB,KAAL,CAAWmB,aAAZ,IAA6B,KAAKC,mBAAtC,EAA2D;AACvD,WAAKA,mBAAL,CAAyBxB,WAAzB,CAAqC,KAAKI,KAA1C;AACH;;AACD,QAAI,KAAKa,iBAAT,EAA4B;AACxB,WAAKA,iBAAL,CAAuB1L,MAAvB,CAA8B,IAA9B;AACH;;AACD,SAAKkM,oBAAL;;AACA,SAAKC,kBAAL;;AACA,SAAKC,uBAAL;;AACA,QAAI,KAAKX,eAAT,EAA0B;AACtB,WAAKA,eAAL,CAAqBxL,MAArB;AACH,KAdU,CAeX;AACA;AACA;;;AACA,SAAK+B,OAAL,CAAaqK,QAAb,CACKC,IADL,CACUrN,IAAI,CAAC,CAAD,CADd,EAEK6D,SAFL,CAEe,MAAM;AACjB;AACA,UAAI,KAAKT,WAAL,EAAJ,EAAwB;AACpB,aAAKa,cAAL;AACH;AACJ,KAPD,EAlBW,CA0BX;;;AACA,SAAKqJ,oBAAL,CAA0B,IAA1B;;AACA,QAAI,KAAKtK,OAAL,CAAa+D,WAAjB,EAA8B;AAC1B,WAAKwG,eAAL;AACH;;AACD,QAAI,KAAKvK,OAAL,CAAa8D,UAAjB,EAA6B;AACzB,WAAK0G,cAAL,CAAoB,KAAK3B,KAAzB,EAAgC,KAAK7I,OAAL,CAAa8D,UAA7C,EAAyD,IAAzD;AACH,KAjCU,CAkCX;;;AACA,SAAKqF,YAAL,CAAkB3C,IAAlB,GAnCW,CAoCX;;;AACA,SAAKsC,mBAAL,CAAyBtK,GAAzB,CAA6B,IAA7B;;AACA,QAAI,KAAKwB,OAAL,CAAaiE,mBAAjB,EAAsC;AAClC,WAAKoF,gBAAL,GAAwB,KAAKN,SAAL,CAAelI,SAAf,CAAyB,MAAM,KAAK4J,OAAL,EAA/B,CAAxB;AACH;;AACD,SAAKzB,uBAAL,CAA6BxK,GAA7B,CAAiC,IAAjC;;AACA,WAAOsL,YAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIxJ,EAAAA,MAAM,GAAG;AACL,QAAI,CAAC,KAAKF,WAAL,EAAL,EAAyB;AACrB;AACH;;AACD,SAAKsK,cAAL,GAJK,CAKL;AACA;AACA;;AACA,SAAKJ,oBAAL,CAA0B,KAA1B;;AACA,QAAI,KAAKb,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBnJ,MAArD,EAA6D;AACzD,WAAKmJ,iBAAL,CAAuBnJ,MAAvB;AACH;;AACD,QAAI,KAAKkJ,eAAT,EAA0B;AACtB,WAAKA,eAAL,CAAqB/K,OAArB;AACH;;AACD,UAAMkM,gBAAgB,GAAG,KAAKhC,aAAL,CAAmBrI,MAAnB,EAAzB,CAfK,CAgBL;;;AACA,SAAK8I,YAAL,CAAkB5C,IAAlB,GAjBK,CAkBL;;;AACA,SAAKsC,mBAAL,CAAyB7J,MAAzB,CAAgC,IAAhC,EAnBK,CAoBL;AACA;;;AACA,SAAK2L,wBAAL;;AACA,SAAKvB,gBAAL,CAAsBnI,WAAtB;;AACA,SAAK8H,uBAAL,CAA6B/J,MAA7B,CAAoC,IAApC;;AACA,WAAO0L,gBAAP;AACH;AACD;;;AACAF,EAAAA,OAAO,GAAG;AACN,UAAMI,UAAU,GAAG,KAAKzK,WAAL,EAAnB;;AACA,QAAI,KAAKqJ,iBAAT,EAA4B;AACxB,WAAKA,iBAAL,CAAuBgB,OAAvB;AACH;;AACD,SAAKK,sBAAL;;AACA,SAAKC,gBAAL,CAAsB,KAAK9B,gBAA3B;;AACA,SAAKI,gBAAL,CAAsBnI,WAAtB;;AACA,SAAK4H,mBAAL,CAAyB7J,MAAzB,CAAgC,IAAhC;;AACA,SAAK0J,aAAL,CAAmB8B,OAAnB;;AACA,SAAKtB,YAAL,CAAkB6B,QAAlB;;AACA,SAAK9B,cAAL,CAAoB8B,QAApB;;AACA,SAAK1E,cAAL,CAAoB0E,QAApB;;AACA,SAAK1D,qBAAL,CAA2B0D,QAA3B;;AACA,SAAKhC,uBAAL,CAA6B/J,MAA7B,CAAoC,IAApC;;AACA,QAAI,KAAK2J,KAAL,IAAc,KAAKA,KAAL,CAAWd,UAA7B,EAAyC;AACrC,WAAKc,KAAL,CAAWd,UAAX,CAAsBC,WAAtB,CAAkC,KAAKa,KAAvC;;AACA,WAAKA,KAAL,GAAa,IAAb;AACH;;AACD,SAAKoB,mBAAL,GAA2B,KAAKnB,KAAL,GAAa,IAAxC;;AACA,QAAIgC,UAAJ,EAAgB;AACZ,WAAKzB,YAAL,CAAkB5C,IAAlB;AACH;;AACD,SAAK4C,YAAL,CAAkB4B,QAAlB;AACH;AACD;;;AACA5K,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKuI,aAAL,CAAmBvI,WAAnB,EAAP;AACH;AACD;;;AACA6K,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAK/B,cAAZ;AACH;AACD;;;AACAgC,EAAAA,WAAW,GAAG;AACV,WAAO,KAAK/B,YAAZ;AACH;AACD;;;AACAgC,EAAAA,WAAW,GAAG;AACV,WAAO,KAAK/B,YAAZ;AACH;AACD;;;AACAgC,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAK9E,cAAZ;AACH;AACD;;;AACA+E,EAAAA,oBAAoB,GAAG;AACnB,WAAO,KAAK/D,qBAAZ;AACH;AACD;;;AACAgE,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKtL,OAAZ;AACH;AACD;;;AACAiB,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKwI,iBAAT,EAA4B;AACxB,WAAKA,iBAAL,CAAuB8B,KAAvB;AACH;AACJ;AACD;;;AACAC,EAAAA,sBAAsB,CAACC,QAAD,EAAW;AAC7B,QAAIA,QAAQ,KAAK,KAAKhC,iBAAtB,EAAyC;AACrC;AACH;;AACD,QAAI,KAAKA,iBAAT,EAA4B;AACxB,WAAKA,iBAAL,CAAuBgB,OAAvB;AACH;;AACD,SAAKhB,iBAAL,GAAyBgC,QAAzB;;AACA,QAAI,KAAKrL,WAAL,EAAJ,EAAwB;AACpBqL,MAAAA,QAAQ,CAAC1N,MAAT,CAAgB,IAAhB;AACA,WAAKkD,cAAL;AACH;AACJ;AACD;;;AACAyK,EAAAA,UAAU,CAACC,UAAD,EAAa;AACnB,SAAK3L,OAAL,GAAemE,MAAM,CAACyH,MAAP,CAAczH,MAAM,CAACyH,MAAP,CAAc,EAAd,EAAkB,KAAK5L,OAAvB,CAAd,EAA+C2L,UAA/C,CAAf;;AACA,SAAKzB,kBAAL;AACH;AACD;;;AACA2B,EAAAA,YAAY,CAACC,GAAD,EAAM;AACd,SAAK9L,OAAL,GAAemE,MAAM,CAACyH,MAAP,CAAczH,MAAM,CAACyH,MAAP,CAAc,EAAd,EAAkB,KAAK5L,OAAvB,CAAd,EAA+C;AAAE+L,MAAAA,SAAS,EAAED;AAAb,KAA/C,CAAf;;AACA,SAAK3B,uBAAL;AACH;AACD;;;AACA6B,EAAAA,aAAa,CAACC,OAAD,EAAU;AACnB,QAAI,KAAKpD,KAAT,EAAgB;AACZ,WAAK2B,cAAL,CAAoB,KAAK3B,KAAzB,EAAgCoD,OAAhC,EAAyC,IAAzC;AACH;AACJ;AACD;;;AACAC,EAAAA,gBAAgB,CAACD,OAAD,EAAU;AACtB,QAAI,KAAKpD,KAAT,EAAgB;AACZ,WAAK2B,cAAL,CAAoB,KAAK3B,KAAzB,EAAgCoD,OAAhC,EAAyC,KAAzC;AACH;AACJ;AACD;AACJ;AACA;;;AACIE,EAAAA,YAAY,GAAG;AACX,UAAMJ,SAAS,GAAG,KAAK/L,OAAL,CAAa+L,SAA/B;;AACA,QAAI,CAACA,SAAL,EAAgB;AACZ,aAAO,KAAP;AACH;;AACD,WAAO,OAAOA,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CA,SAAS,CAACzG,KAA7D;AACH;AACD;;;AACA8G,EAAAA,oBAAoB,CAACX,QAAD,EAAW;AAC3B,QAAIA,QAAQ,KAAK,KAAKjC,eAAtB,EAAuC;AACnC;AACH;;AACD,SAAKsB,sBAAL;;AACA,SAAKtB,eAAL,GAAuBiC,QAAvB;;AACA,QAAI,KAAKrL,WAAL,EAAJ,EAAwB;AACpBqL,MAAAA,QAAQ,CAAC1N,MAAT,CAAgB,IAAhB;AACA0N,MAAAA,QAAQ,CAACzN,MAAT;AACH;AACJ;AACD;;;AACAmM,EAAAA,uBAAuB,GAAG;AACtB,SAAKvB,KAAL,CAAWL,YAAX,CAAwB,KAAxB,EAA+B,KAAK4D,YAAL,EAA/B;AACH;AACD;;;AACAjC,EAAAA,kBAAkB,GAAG;AACjB,QAAI,CAAC,KAAKrB,KAAV,EAAiB;AACb;AACH;;AACD,UAAMvK,KAAK,GAAG,KAAKuK,KAAL,CAAWvK,KAAzB;AACAA,IAAAA,KAAK,CAACoB,KAAN,GAAc1D,mBAAmB,CAAC,KAAKgE,OAAL,CAAaN,KAAd,CAAjC;AACApB,IAAAA,KAAK,CAACkB,MAAN,GAAexD,mBAAmB,CAAC,KAAKgE,OAAL,CAAaR,MAAd,CAAlC;AACAlB,IAAAA,KAAK,CAAC+N,QAAN,GAAiBrQ,mBAAmB,CAAC,KAAKgE,OAAL,CAAaqM,QAAd,CAApC;AACA/N,IAAAA,KAAK,CAACgO,SAAN,GAAkBtQ,mBAAmB,CAAC,KAAKgE,OAAL,CAAasM,SAAd,CAArC;AACAhO,IAAAA,KAAK,CAACiO,QAAN,GAAiBvQ,mBAAmB,CAAC,KAAKgE,OAAL,CAAauM,QAAd,CAApC;AACAjO,IAAAA,KAAK,CAACkO,SAAN,GAAkBxQ,mBAAmB,CAAC,KAAKgE,OAAL,CAAawM,SAAd,CAArC;AACH;AACD;;;AACAlC,EAAAA,oBAAoB,CAACmC,aAAD,EAAgB;AAChC,SAAK5D,KAAL,CAAWvK,KAAX,CAAiBoO,aAAjB,GAAiCD,aAAa,GAAG,EAAH,GAAQ,MAAtD;AACH;AACD;;;AACAlC,EAAAA,eAAe,GAAG;AACd,UAAMoC,YAAY,GAAG,8BAArB;AACA,SAAK1D,gBAAL,GAAwB,KAAKnL,SAAL,CAAewK,aAAf,CAA6B,KAA7B,CAAxB;;AACA,SAAKW,gBAAL,CAAsB1K,SAAtB,CAAgCC,GAAhC,CAAoC,sBAApC;;AACA,QAAI,KAAKwB,OAAL,CAAagE,aAAjB,EAAgC;AAC5B,WAAKwG,cAAL,CAAoB,KAAKvB,gBAAzB,EAA2C,KAAKjJ,OAAL,CAAagE,aAAxD,EAAuE,IAAvE;AACH,KANa,CAOd;AACA;;;AACA,SAAK4E,KAAL,CAAWmB,aAAX,CAAyB6C,YAAzB,CAAsC,KAAK3D,gBAA3C,EAA6D,KAAKL,KAAlE,EATc,CAUd;AACA;;;AACA,SAAKK,gBAAL,CAAsBvC,gBAAtB,CAAuC,OAAvC,EAAgD,KAAK6C,qBAArD,EAZc,CAad;;;AACA,QAAI,OAAOsD,qBAAP,KAAiC,WAArC,EAAkD;AAC9C,WAAK9M,OAAL,CAAa+M,iBAAb,CAA+B,MAAM;AACjCD,QAAAA,qBAAqB,CAAC,MAAM;AACxB,cAAI,KAAK5D,gBAAT,EAA2B;AACvB,iBAAKA,gBAAL,CAAsB1K,SAAtB,CAAgCC,GAAhC,CAAoCmO,YAApC;AACH;AACJ,SAJoB,CAArB;AAKH,OAND;AAOH,KARD,MASK;AACD,WAAK1D,gBAAL,CAAsB1K,SAAtB,CAAgCC,GAAhC,CAAoCmO,YAApC;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI1C,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKrB,KAAL,CAAWmE,WAAf,EAA4B;AACxB,WAAKnE,KAAL,CAAWd,UAAX,CAAsBU,WAAtB,CAAkC,KAAKI,KAAvC;AACH;AACJ;AACD;;;AACA8B,EAAAA,cAAc,GAAG;AACb,UAAMsC,gBAAgB,GAAG,KAAK/D,gBAA9B;;AACA,QAAI,CAAC+D,gBAAL,EAAuB;AACnB;AACH;;AACD,QAAIC,SAAJ;;AACA,UAAMC,YAAY,GAAG,MAAM;AACvB;AACA,UAAIF,gBAAJ,EAAsB;AAClBA,QAAAA,gBAAgB,CAACrG,mBAAjB,CAAqC,OAArC,EAA8C,KAAK4C,qBAAnD;AACAyD,QAAAA,gBAAgB,CAACrG,mBAAjB,CAAqC,eAArC,EAAsDuG,YAAtD;;AACA,aAAKnC,gBAAL,CAAsBiC,gBAAtB;AACH;;AACD,UAAI,KAAKhN,OAAL,CAAagE,aAAjB,EAAgC;AAC5B,aAAKwG,cAAL,CAAoBwC,gBAApB,EAAsC,KAAKhN,OAAL,CAAagE,aAAnD,EAAkE,KAAlE;AACH;;AACDmJ,MAAAA,YAAY,CAACF,SAAD,CAAZ;AACH,KAXD;;AAYAD,IAAAA,gBAAgB,CAACzO,SAAjB,CAA2BU,MAA3B,CAAkC,8BAAlC;;AACA,SAAKc,OAAL,CAAa+M,iBAAb,CAA+B,MAAM;AACjCE,MAAAA,gBAAgB,CAACtG,gBAAjB,CAAkC,eAAlC,EAAmDwG,YAAnD;AACH,KAFD,EAnBa,CAsBb;AACA;;;AACAF,IAAAA,gBAAgB,CAAC1O,KAAjB,CAAuBoO,aAAvB,GAAuC,MAAvC,CAxBa,CAyBb;AACA;AACA;;AACAO,IAAAA,SAAS,GAAG,KAAKlN,OAAL,CAAa+M,iBAAb,CAA+B,MAAMM,UAAU,CAACF,YAAD,EAAe,GAAf,CAA/C,CAAZ;AACH;AACD;;;AACA1C,EAAAA,cAAc,CAACnJ,OAAD,EAAUgM,UAAV,EAAsBC,KAAtB,EAA6B;AACvC,UAAM/O,SAAS,GAAG8C,OAAO,CAAC9C,SAA1B;AACAtC,IAAAA,WAAW,CAACoR,UAAD,CAAX,CAAwBE,OAAxB,CAAgCC,QAAQ,IAAI;AACxC;AACA;AACA,UAAIA,QAAJ,EAAc;AACVF,QAAAA,KAAK,GAAG/O,SAAS,CAACC,GAAV,CAAcgP,QAAd,CAAH,GAA6BjP,SAAS,CAACU,MAAV,CAAiBuO,QAAjB,CAAlC;AACH;AACJ,KAND;AAOH;AACD;;;AACA5C,EAAAA,wBAAwB,GAAG;AACvB;AACA;AACA;AACA,SAAK7K,OAAL,CAAa+M,iBAAb,CAA+B,MAAM;AACjC;AACA;AACA;AACA,YAAMW,YAAY,GAAG,KAAK1N,OAAL,CAAaqK,QAAb,CAChBC,IADgB,CACXpN,SAAS,CAACF,KAAK,CAAC,KAAKoM,YAAN,EAAoB,KAAKC,YAAzB,CAAN,CADE,EAEhBvI,SAFgB,CAEN,MAAM;AACjB;AACA;AACA,YAAI,CAAC,KAAKgI,KAAN,IAAe,CAAC,KAAKD,KAArB,IAA8B,KAAKC,KAAL,CAAW6E,QAAX,CAAoB3H,MAApB,KAA+B,CAAjE,EAAoE;AAChE,cAAI,KAAK8C,KAAL,IAAc,KAAK7I,OAAL,CAAa8D,UAA/B,EAA2C;AACvC,iBAAK0G,cAAL,CAAoB,KAAK3B,KAAzB,EAAgC,KAAK7I,OAAL,CAAa8D,UAA7C,EAAyD,KAAzD;AACH;;AACD,cAAI,KAAK8E,KAAL,IAAc,KAAKA,KAAL,CAAWmB,aAA7B,EAA4C;AACxC,iBAAKC,mBAAL,GAA2B,KAAKpB,KAAL,CAAWmB,aAAtC;;AACA,iBAAKC,mBAAL,CAAyBjC,WAAzB,CAAqC,KAAKa,KAA1C;AACH;;AACD6E,UAAAA,YAAY,CAACvM,WAAb;AACH;AACJ,OAfoB,CAArB;AAgBH,KApBD;AAqBH;AACD;;;AACA4J,EAAAA,sBAAsB,GAAG;AACrB,UAAMjH,cAAc,GAAG,KAAK2F,eAA5B;;AACA,QAAI3F,cAAJ,EAAoB;AAChBA,MAAAA,cAAc,CAACpF,OAAf;;AACA,UAAIoF,cAAc,CAACvD,MAAnB,EAA2B;AACvBuD,QAAAA,cAAc,CAACvD,MAAf;AACH;AACJ;AACJ;AACD;;;AACAyK,EAAAA,gBAAgB,CAAC4C,QAAD,EAAW;AACvB,QAAIA,QAAJ,EAAc;AACV,UAAIA,QAAQ,CAAC7F,UAAb,EAAyB;AACrB6F,QAAAA,QAAQ,CAAC7F,UAAT,CAAoBC,WAApB,CAAgC4F,QAAhC;AACH,OAHS,CAIV;AACA;AACA;;;AACA,UAAI,KAAK1E,gBAAL,KAA0B0E,QAA9B,EAAwC;AACpC,aAAK1E,gBAAL,GAAwB,IAAxB;AACH;AACJ;AACJ;;AA5YY;AA+YjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAM2E,gBAAgB,GAAG,6CAAzB;AACA;;AACA,MAAMC,cAAc,GAAG,eAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iCAAN,CAAwC;AACpCvQ,EAAAA,WAAW,CAACwQ,WAAD,EAAcvQ,cAAd,EAA8BM,SAA9B,EAAyCgJ,SAAzC,EAAoDkH,iBAApD,EAAuE;AAC9E,SAAKxQ,cAAL,GAAsBA,cAAtB;AACA,SAAKM,SAAL,GAAiBA,SAAjB;AACA,SAAKgJ,SAAL,GAAiBA,SAAjB;AACA,SAAKkH,iBAAL,GAAyBA,iBAAzB;AACA;;AACA,SAAKC,oBAAL,GAA4B;AAAEvO,MAAAA,KAAK,EAAE,CAAT;AAAYF,MAAAA,MAAM,EAAE;AAApB,KAA5B;AACA;;AACA,SAAK0O,SAAL,GAAiB,KAAjB;AACA;;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA;;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA;;AACA,SAAKC,sBAAL,GAA8B,IAA9B;AACA;;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA;;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA;;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA;;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA;;AACA,SAAKC,gBAAL,GAAwB,IAAI7R,OAAJ,EAAxB;AACA;;AACA,SAAK8R,mBAAL,GAA2B7R,YAAY,CAACwM,KAAxC;AACA;;AACA,SAAKsF,QAAL,GAAgB,CAAhB;AACA;;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA;;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACA;;AACA,SAAKC,eAAL,GAAuB,KAAKL,gBAA5B;AACA,SAAKM,SAAL,CAAejB,WAAf;AACH;AACD;;;AACa,MAATkB,SAAS,GAAG;AACZ,WAAO,KAAKR,mBAAZ;AACH;AACD;;;AACA1Q,EAAAA,MAAM,CAACwC,UAAD,EAAa;AACf,QAAI,KAAKJ,WAAL,IAAoBI,UAAU,KAAK,KAAKJ,WAAxC,KACC,OAAOK,SAAP,KAAqB,WAArB,IAAoCA,SADrC,CAAJ,EACqD;AACjD,YAAMZ,KAAK,CAAC,0DAAD,CAAX;AACH;;AACD,SAAKsP,kBAAL;;AACA3O,IAAAA,UAAU,CAACqJ,WAAX,CAAuBrL,SAAvB,CAAiCC,GAAjC,CAAqCoP,gBAArC;AACA,SAAKzN,WAAL,GAAmBI,UAAnB;AACA,SAAK4O,YAAL,GAAoB5O,UAAU,CAACqJ,WAA/B;AACA,SAAKf,KAAL,GAAatI,UAAU,CAACmC,cAAxB;AACA,SAAK0M,WAAL,GAAmB,KAAnB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,aAAL,GAAqB,IAArB;;AACA,SAAKX,mBAAL,CAAyBzN,WAAzB;;AACA,SAAKyN,mBAAL,GAA2B,KAAKnR,cAAL,CAAoB+R,MAApB,GAA6B1O,SAA7B,CAAuC,MAAM;AACpE;AACA;AACA;AACA,WAAKwO,gBAAL,GAAwB,IAAxB;AACA,WAAK9D,KAAL;AACH,KAN0B,CAA3B;AAOH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,KAAK,GAAG;AACJ;AACA,QAAI,KAAK6D,WAAL,IAAoB,CAAC,KAAKtI,SAAL,CAAeqB,SAAxC,EAAmD;AAC/C;AACH,KAJG,CAKJ;AACA;AACA;;;AACA,QAAI,CAAC,KAAKkH,gBAAN,IAA0B,KAAKf,eAA/B,IAAkD,KAAKgB,aAA3D,EAA0E;AACtE,WAAKE,mBAAL;AACA;AACH;;AACD,SAAKC,kBAAL;;AACA,SAAKC,0BAAL;;AACA,SAAKC,uBAAL,GAdI,CAeJ;AACA;AACA;;;AACA,SAAKC,aAAL,GAAqB,KAAKC,wBAAL,EAArB;AACA,SAAKC,WAAL,GAAmB,KAAKC,cAAL,EAAnB;AACA,SAAKC,YAAL,GAAoB,KAAKnH,KAAL,CAAWlG,qBAAX,EAApB;AACA,UAAMsN,UAAU,GAAG,KAAKH,WAAxB;AACA,UAAMrN,WAAW,GAAG,KAAKuN,YAAzB;AACA,UAAME,YAAY,GAAG,KAAKN,aAA1B,CAvBI,CAwBJ;;AACA,UAAMO,YAAY,GAAG,EAArB,CAzBI,CA0BJ;;AACA,QAAIC,QAAJ,CA3BI,CA4BJ;AACA;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAK5B,mBAArB,EAA0C;AACtC;AACA,UAAI6B,WAAW,GAAG,KAAKC,eAAL,CAAqBN,UAArB,EAAiCI,GAAjC,CAAlB,CAFsC,CAGtC;AACA;AACA;;;AACA,UAAIG,YAAY,GAAG,KAAKC,gBAAL,CAAsBH,WAAtB,EAAmC7N,WAAnC,EAAgD4N,GAAhD,CAAnB,CANsC,CAOtC;;;AACA,UAAIK,UAAU,GAAG,KAAKC,cAAL,CAAoBH,YAApB,EAAkC/N,WAAlC,EAA+CyN,YAA/C,EAA6DG,GAA7D,CAAjB,CARsC,CAStC;;;AACA,UAAIK,UAAU,CAACE,0BAAf,EAA2C;AACvC,aAAK1C,SAAL,GAAiB,KAAjB;;AACA,aAAK2C,cAAL,CAAoBR,GAApB,EAAyBC,WAAzB;;AACA;AACH,OAdqC,CAetC;AACA;;;AACA,UAAI,KAAKQ,6BAAL,CAAmCJ,UAAnC,EAA+CF,YAA/C,EAA6DN,YAA7D,CAAJ,EAAgF;AAC5E;AACA;AACAC,QAAAA,YAAY,CAACxK,IAAb,CAAkB;AACdoL,UAAAA,QAAQ,EAAEV,GADI;AAEd7L,UAAAA,MAAM,EAAE8L,WAFM;AAGd7N,UAAAA,WAHc;AAIduO,UAAAA,eAAe,EAAE,KAAKC,yBAAL,CAA+BX,WAA/B,EAA4CD,GAA5C;AAJH,SAAlB;AAMA;AACH,OA3BqC,CA4BtC;AACA;AACA;;;AACA,UAAI,CAACD,QAAD,IAAaA,QAAQ,CAACM,UAAT,CAAoBQ,WAApB,GAAkCR,UAAU,CAACQ,WAA9D,EAA2E;AACvEd,QAAAA,QAAQ,GAAG;AAAEM,UAAAA,UAAF;AAAcF,UAAAA,YAAd;AAA4BF,UAAAA,WAA5B;AAAyCS,UAAAA,QAAQ,EAAEV,GAAnD;AAAwD5N,UAAAA;AAAxD,SAAX;AACH;AACJ,KAhEG,CAiEJ;AACA;;;AACA,QAAI0N,YAAY,CAACpK,MAAjB,EAAyB;AACrB,UAAIoL,OAAO,GAAG,IAAd;AACA,UAAIC,SAAS,GAAG,CAAC,CAAjB;;AACA,WAAK,MAAMC,GAAX,IAAkBlB,YAAlB,EAAgC;AAC5B,cAAMmB,KAAK,GAAGD,GAAG,CAACL,eAAJ,CAAoBtR,KAApB,GAA4B2R,GAAG,CAACL,eAAJ,CAAoBxR,MAAhD,IAA0D6R,GAAG,CAACN,QAAJ,CAAaQ,MAAb,IAAuB,CAAjF,CAAd;;AACA,YAAID,KAAK,GAAGF,SAAZ,EAAuB;AACnBA,UAAAA,SAAS,GAAGE,KAAZ;AACAH,UAAAA,OAAO,GAAGE,GAAV;AACH;AACJ;;AACD,WAAKnD,SAAL,GAAiB,KAAjB;;AACA,WAAK2C,cAAL,CAAoBM,OAAO,CAACJ,QAA5B,EAAsCI,OAAO,CAAC3M,MAA9C;;AACA;AACH,KAhFG,CAiFJ;AACA;;;AACA,QAAI,KAAK2J,QAAT,EAAmB;AACf;AACA,WAAKD,SAAL,GAAiB,IAAjB;;AACA,WAAK2C,cAAL,CAAoBT,QAAQ,CAACW,QAA7B,EAAuCX,QAAQ,CAACE,WAAhD;;AACA;AACH,KAxFG,CAyFJ;AACA;;;AACA,SAAKO,cAAL,CAAoBT,QAAQ,CAACW,QAA7B,EAAuCX,QAAQ,CAACE,WAAhD;AACH;;AACDhQ,EAAAA,MAAM,GAAG;AACL,SAAKmP,kBAAL;;AACA,SAAKH,aAAL,GAAqB,IAArB;AACA,SAAKkC,mBAAL,GAA2B,IAA3B;;AACA,SAAK7C,mBAAL,CAAyBzN,WAAzB;AACH;AACD;;;AACAuJ,EAAAA,OAAO,GAAG;AACN,QAAI,KAAK2E,WAAT,EAAsB;AAClB;AACH,KAHK,CAIN;AACA;;;AACA,QAAI,KAAKD,YAAT,EAAuB;AACnBsC,MAAAA,YAAY,CAAC,KAAKtC,YAAL,CAAkB7Q,KAAnB,EAA0B;AAClCX,QAAAA,GAAG,EAAE,EAD6B;AAElCC,QAAAA,IAAI,EAAE,EAF4B;AAGlCiE,QAAAA,KAAK,EAAE,EAH2B;AAIlCH,QAAAA,MAAM,EAAE,EAJ0B;AAKlClC,QAAAA,MAAM,EAAE,EAL0B;AAMlCE,QAAAA,KAAK,EAAE,EAN2B;AAOlCgS,QAAAA,UAAU,EAAE,EAPsB;AAQlCC,QAAAA,cAAc,EAAE;AARkB,OAA1B,CAAZ;AAUH;;AACD,QAAI,KAAK9I,KAAT,EAAgB;AACZ,WAAK6G,0BAAL;AACH;;AACD,QAAI,KAAKvP,WAAT,EAAsB;AAClB,WAAKA,WAAL,CAAiByJ,WAAjB,CAA6BrL,SAA7B,CAAuCU,MAAvC,CAA8C2O,gBAA9C;AACH;;AACD,SAAKtN,MAAL;;AACA,SAAKoO,gBAAL,CAAsB1D,QAAtB;;AACA,SAAK7K,WAAL,GAAmB,KAAKgP,YAAL,GAAoB,IAAvC;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,mBAAmB,GAAG;AAClB,QAAI,CAAC,KAAKJ,WAAN,KAAsB,CAAC,KAAKtI,SAAN,IAAmB,KAAKA,SAAL,CAAeqB,SAAxD,CAAJ,EAAwE;AACpE,WAAK2H,WAAL,GAAmB,KAAKC,cAAL,EAAnB;AACA,WAAKC,YAAL,GAAoB,KAAKnH,KAAL,CAAWlG,qBAAX,EAApB;AACA,WAAKiN,aAAL,GAAqB,KAAKC,wBAAL,EAArB;AACA,YAAM+B,YAAY,GAAG,KAAKtC,aAAL,IAAsB,KAAKb,mBAAL,CAAyB,CAAzB,CAA3C;;AACA,YAAM6B,WAAW,GAAG,KAAKC,eAAL,CAAqB,KAAKT,WAA1B,EAAuC8B,YAAvC,CAApB;;AACA,WAAKf,cAAL,CAAoBe,YAApB,EAAkCtB,WAAlC;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIuB,EAAAA,wBAAwB,CAACC,WAAD,EAAc;AAClC,SAAKtD,YAAL,GAAoBsD,WAApB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,aAAa,CAAC9C,SAAD,EAAY;AACrB,SAAKR,mBAAL,GAA2BQ,SAA3B,CADqB,CAErB;AACA;;AACA,QAAIA,SAAS,CAACpJ,OAAV,CAAkB,KAAKyJ,aAAvB,MAA0C,CAAC,CAA/C,EAAkD;AAC9C,WAAKA,aAAL,GAAqB,IAArB;AACH;;AACD,SAAKJ,kBAAL;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI8C,EAAAA,kBAAkB,CAACC,MAAD,EAAS;AACvB,SAAK1D,eAAL,GAAuB0D,MAAvB;AACA,WAAO,IAAP;AACH;AACD;;;AACAC,EAAAA,sBAAsB,CAACC,kBAAkB,GAAG,IAAtB,EAA4B;AAC9C,SAAK9D,sBAAL,GAA8B8D,kBAA9B;AACA,WAAO,IAAP;AACH;AACD;;;AACAC,EAAAA,iBAAiB,CAACC,aAAa,GAAG,IAAjB,EAAuB;AACpC,SAAKjE,cAAL,GAAsBiE,aAAtB;AACA,WAAO,IAAP;AACH;AACD;;;AACAC,EAAAA,QAAQ,CAACC,OAAO,GAAG,IAAX,EAAiB;AACrB,SAAKpE,QAAL,GAAgBoE,OAAhB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,kBAAkB,CAACC,QAAQ,GAAG,IAAZ,EAAkB;AAChC,SAAKnE,eAAL,GAAuBmE,QAAvB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIzD,EAAAA,SAAS,CAACxK,MAAD,EAAS;AACd,SAAKkO,OAAL,GAAelO,MAAf;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACImO,EAAAA,kBAAkB,CAACC,MAAD,EAAS;AACvB,SAAKhE,QAAL,GAAgBgE,MAAhB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,kBAAkB,CAACD,MAAD,EAAS;AACvB,SAAK/D,QAAL,GAAgB+D,MAAhB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,qBAAqB,CAACC,QAAD,EAAW;AAC5B,SAAKC,wBAAL,GAAgCD,QAAhC;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;;;AACIxC,EAAAA,eAAe,CAACN,UAAD,EAAaI,GAAb,EAAkB;AAC7B,QAAI4C,CAAJ;;AACA,QAAI5C,GAAG,CAACzL,OAAJ,IAAe,QAAnB,EAA6B;AACzB;AACA;AACAqO,MAAAA,CAAC,GAAGhD,UAAU,CAACrS,IAAX,GAAmBqS,UAAU,CAACvQ,KAAX,GAAmB,CAA1C;AACH,KAJD,MAKK;AACD,YAAMwT,MAAM,GAAG,KAAKC,MAAL,KAAgBlD,UAAU,CAACpO,KAA3B,GAAmCoO,UAAU,CAACrS,IAA7D;AACA,YAAMwV,IAAI,GAAG,KAAKD,MAAL,KAAgBlD,UAAU,CAACrS,IAA3B,GAAkCqS,UAAU,CAACpO,KAA1D;AACAoR,MAAAA,CAAC,GAAG5C,GAAG,CAACzL,OAAJ,IAAe,OAAf,GAAyBsO,MAAzB,GAAkCE,IAAtC;AACH;;AACD,QAAIC,CAAJ;;AACA,QAAIhD,GAAG,CAACxL,OAAJ,IAAe,QAAnB,EAA6B;AACzBwO,MAAAA,CAAC,GAAGpD,UAAU,CAACtS,GAAX,GAAkBsS,UAAU,CAACzQ,MAAX,GAAoB,CAA1C;AACH,KAFD,MAGK;AACD6T,MAAAA,CAAC,GAAGhD,GAAG,CAACxL,OAAJ,IAAe,KAAf,GAAuBoL,UAAU,CAACtS,GAAlC,GAAwCsS,UAAU,CAACvO,MAAvD;AACH;;AACD,WAAO;AAAEuR,MAAAA,CAAF;AAAKI,MAAAA;AAAL,KAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI5C,EAAAA,gBAAgB,CAACH,WAAD,EAAc7N,WAAd,EAA2B4N,GAA3B,EAAgC;AAC5C;AACA;AACA,QAAIiD,aAAJ;;AACA,QAAIjD,GAAG,CAACvL,QAAJ,IAAgB,QAApB,EAA8B;AAC1BwO,MAAAA,aAAa,GAAG,CAAC7Q,WAAW,CAAC/C,KAAb,GAAqB,CAArC;AACH,KAFD,MAGK,IAAI2Q,GAAG,CAACvL,QAAJ,KAAiB,OAArB,EAA8B;AAC/BwO,MAAAA,aAAa,GAAG,KAAKH,MAAL,KAAgB,CAAC1Q,WAAW,CAAC/C,KAA7B,GAAqC,CAArD;AACH,KAFI,MAGA;AACD4T,MAAAA,aAAa,GAAG,KAAKH,MAAL,KAAgB,CAAhB,GAAoB,CAAC1Q,WAAW,CAAC/C,KAAjD;AACH;;AACD,QAAI6T,aAAJ;;AACA,QAAIlD,GAAG,CAACtL,QAAJ,IAAgB,QAApB,EAA8B;AAC1BwO,MAAAA,aAAa,GAAG,CAAC9Q,WAAW,CAACjD,MAAb,GAAsB,CAAtC;AACH,KAFD,MAGK;AACD+T,MAAAA,aAAa,GAAGlD,GAAG,CAACtL,QAAJ,IAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CAACtC,WAAW,CAACjD,MAAzD;AACH,KAnB2C,CAoB5C;;;AACA,WAAO;AACHyT,MAAAA,CAAC,EAAE3C,WAAW,CAAC2C,CAAZ,GAAgBK,aADhB;AAEHD,MAAAA,CAAC,EAAE/C,WAAW,CAAC+C,CAAZ,GAAgBE;AAFhB,KAAP;AAIH;AACD;;;AACA5C,EAAAA,cAAc,CAAC6C,KAAD,EAAQC,cAAR,EAAwBpU,QAAxB,EAAkC0R,QAAlC,EAA4C;AACtD;AACA;AACA,UAAMtM,OAAO,GAAGiP,4BAA4B,CAACD,cAAD,CAA5C;AACA,QAAI;AAAER,MAAAA,CAAF;AAAKI,MAAAA;AAAL,QAAWG,KAAf;;AACA,QAAI9O,OAAO,GAAG,KAAKiP,UAAL,CAAgB5C,QAAhB,EAA0B,GAA1B,CAAd;;AACA,QAAIpM,OAAO,GAAG,KAAKgP,UAAL,CAAgB5C,QAAhB,EAA0B,GAA1B,CAAd,CANsD,CAOtD;;;AACA,QAAIrM,OAAJ,EAAa;AACTuO,MAAAA,CAAC,IAAIvO,OAAL;AACH;;AACD,QAAIC,OAAJ,EAAa;AACT0O,MAAAA,CAAC,IAAI1O,OAAL;AACH,KAbqD,CActD;;;AACA,QAAIiP,YAAY,GAAG,IAAIX,CAAvB;AACA,QAAIY,aAAa,GAAIZ,CAAC,GAAGxO,OAAO,CAAC/E,KAAb,GAAsBL,QAAQ,CAACK,KAAnD;AACA,QAAIoU,WAAW,GAAG,IAAIT,CAAtB;AACA,QAAIU,cAAc,GAAIV,CAAC,GAAG5O,OAAO,CAACjF,MAAb,GAAuBH,QAAQ,CAACG,MAArD,CAlBsD,CAmBtD;;AACA,QAAIwU,YAAY,GAAG,KAAKC,kBAAL,CAAwBxP,OAAO,CAAC/E,KAAhC,EAAuCkU,YAAvC,EAAqDC,aAArD,CAAnB;;AACA,QAAIK,aAAa,GAAG,KAAKD,kBAAL,CAAwBxP,OAAO,CAACjF,MAAhC,EAAwCsU,WAAxC,EAAqDC,cAArD,CAApB;;AACA,QAAI7C,WAAW,GAAG8C,YAAY,GAAGE,aAAjC;AACA,WAAO;AACHhD,MAAAA,WADG;AAEHN,MAAAA,0BAA0B,EAAGnM,OAAO,CAAC/E,KAAR,GAAgB+E,OAAO,CAACjF,MAAzB,KAAqC0R,WAF9D;AAGHiD,MAAAA,wBAAwB,EAAED,aAAa,KAAKzP,OAAO,CAACjF,MAHjD;AAIH4U,MAAAA,0BAA0B,EAAEJ,YAAY,IAAIvP,OAAO,CAAC/E;AAJjD,KAAP;AAMH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIoR,EAAAA,6BAA6B,CAACO,GAAD,EAAMmC,KAAN,EAAanU,QAAb,EAAuB;AAChD,QAAI,KAAKgP,sBAAT,EAAiC;AAC7B,YAAMgG,eAAe,GAAGhV,QAAQ,CAACqC,MAAT,GAAkB8R,KAAK,CAACH,CAAhD;AACA,YAAMiB,cAAc,GAAGjV,QAAQ,CAACwC,KAAT,GAAiB2R,KAAK,CAACP,CAA9C;AACA,YAAM3G,SAAS,GAAGiI,aAAa,CAAC,KAAKpU,WAAL,CAAiBmL,SAAjB,GAA6BgB,SAA9B,CAA/B;AACA,YAAMD,QAAQ,GAAGkI,aAAa,CAAC,KAAKpU,WAAL,CAAiBmL,SAAjB,GAA6Be,QAA9B,CAA9B;AACA,YAAMmI,WAAW,GAAGnD,GAAG,CAAC8C,wBAAJ,IACf7H,SAAS,IAAI,IAAb,IAAqBA,SAAS,IAAI+H,eADvC;AAEA,YAAMI,aAAa,GAAGpD,GAAG,CAAC+C,0BAAJ,IACjB/H,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,IAAIiI,cADrC;AAEA,aAAOE,WAAW,IAAIC,aAAtB;AACH;;AACD,WAAO,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,oBAAoB,CAACC,KAAD,EAAQlB,cAAR,EAAwB3S,cAAxB,EAAwC;AACxD;AACA;AACA;AACA,QAAI,KAAK0Q,mBAAL,IAA4B,KAAKlD,eAArC,EAAsD;AAClD,aAAO;AACH2E,QAAAA,CAAC,EAAE0B,KAAK,CAAC1B,CAAN,GAAU,KAAKzB,mBAAL,CAAyByB,CADnC;AAEHI,QAAAA,CAAC,EAAEsB,KAAK,CAACtB,CAAN,GAAU,KAAK7B,mBAAL,CAAyB6B;AAFnC,OAAP;AAIH,KATuD,CAUxD;AACA;;;AACA,UAAM5O,OAAO,GAAGiP,4BAA4B,CAACD,cAAD,CAA5C;AACA,UAAMpU,QAAQ,GAAG,KAAKuQ,aAAtB,CAbwD,CAcxD;AACA;;AACA,UAAMgF,aAAa,GAAG7T,IAAI,CAAC8T,GAAL,CAASF,KAAK,CAAC1B,CAAN,GAAUxO,OAAO,CAAC/E,KAAlB,GAA0BL,QAAQ,CAACK,KAA5C,EAAmD,CAAnD,CAAtB;AACA,UAAMoV,cAAc,GAAG/T,IAAI,CAAC8T,GAAL,CAASF,KAAK,CAACtB,CAAN,GAAU5O,OAAO,CAACjF,MAAlB,GAA2BH,QAAQ,CAACG,MAA7C,EAAqD,CAArD,CAAvB;AACA,UAAMuV,WAAW,GAAGhU,IAAI,CAAC8T,GAAL,CAASxV,QAAQ,CAAC1B,GAAT,GAAemD,cAAc,CAACnD,GAA9B,GAAoCgX,KAAK,CAACtB,CAAnD,EAAsD,CAAtD,CAApB;AACA,UAAM2B,YAAY,GAAGjU,IAAI,CAAC8T,GAAL,CAASxV,QAAQ,CAACzB,IAAT,GAAgBkD,cAAc,CAAClD,IAA/B,GAAsC+W,KAAK,CAAC1B,CAArD,EAAwD,CAAxD,CAArB,CAnBwD,CAoBxD;;AACA,QAAIgC,KAAK,GAAG,CAAZ;AACA,QAAIC,KAAK,GAAG,CAAZ,CAtBwD,CAuBxD;AACA;AACA;;AACA,QAAIzQ,OAAO,CAAC/E,KAAR,IAAiBL,QAAQ,CAACK,KAA9B,EAAqC;AACjCuV,MAAAA,KAAK,GAAGD,YAAY,IAAI,CAACJ,aAAzB;AACH,KAFD,MAGK;AACDK,MAAAA,KAAK,GAAGN,KAAK,CAAC1B,CAAN,GAAU,KAAK1E,eAAf,GAAkClP,QAAQ,CAACzB,IAAT,GAAgBkD,cAAc,CAAClD,IAAhC,GAAwC+W,KAAK,CAAC1B,CAA/E,GAAmF,CAA3F;AACH;;AACD,QAAIxO,OAAO,CAACjF,MAAR,IAAkBH,QAAQ,CAACG,MAA/B,EAAuC;AACnC0V,MAAAA,KAAK,GAAGH,WAAW,IAAI,CAACD,cAAxB;AACH,KAFD,MAGK;AACDI,MAAAA,KAAK,GAAGP,KAAK,CAACtB,CAAN,GAAU,KAAK9E,eAAf,GAAkClP,QAAQ,CAAC1B,GAAT,GAAemD,cAAc,CAACnD,GAA/B,GAAsCgX,KAAK,CAACtB,CAA7E,GAAiF,CAAzF;AACH;;AACD,SAAK7B,mBAAL,GAA2B;AAAEyB,MAAAA,CAAC,EAAEgC,KAAL;AAAY5B,MAAAA,CAAC,EAAE6B;AAAf,KAA3B;AACA,WAAO;AACHjC,MAAAA,CAAC,EAAE0B,KAAK,CAAC1B,CAAN,GAAUgC,KADV;AAEH5B,MAAAA,CAAC,EAAEsB,KAAK,CAACtB,CAAN,GAAU6B;AAFV,KAAP;AAIH;AACD;AACJ;AACA;AACA;AACA;;;AACIrE,EAAAA,cAAc,CAACE,QAAD,EAAWT,WAAX,EAAwB;AAClC,SAAK6E,mBAAL,CAAyBpE,QAAzB;;AACA,SAAKqE,wBAAL,CAA8B9E,WAA9B,EAA2CS,QAA3C;;AACA,SAAKsE,qBAAL,CAA2B/E,WAA3B,EAAwCS,QAAxC;;AACA,QAAIA,QAAQ,CAACjN,UAAb,EAAyB;AACrB,WAAKwR,gBAAL,CAAsBvE,QAAQ,CAACjN,UAA/B;AACH,KANiC,CAOlC;;;AACA,SAAKwL,aAAL,GAAqByB,QAArB,CARkC,CASlC;AACA;AACA;;AACA,QAAI,KAAKrC,gBAAL,CAAsBnI,SAAtB,CAAgCR,MAApC,EAA4C;AACxC,YAAMZ,wBAAwB,GAAG,KAAKoQ,oBAAL,EAAjC;;AACA,YAAMC,WAAW,GAAG,IAAIvQ,8BAAJ,CAAmC8L,QAAnC,EAA6C5L,wBAA7C,CAApB;;AACA,WAAKuJ,gBAAL,CAAsBlI,IAAtB,CAA2BgP,WAA3B;AACH;;AACD,SAAKnG,gBAAL,GAAwB,KAAxB;AACH;AACD;;;AACA8F,EAAAA,mBAAmB,CAACpE,QAAD,EAAW;AAC1B,QAAI,CAAC,KAAKiC,wBAAV,EAAoC;AAChC;AACH;;AACD,UAAMyC,QAAQ,GAAG,KAAKtG,YAAL,CAAkB9G,gBAAlB,CAAmC,KAAK2K,wBAAxC,CAAjB;;AACA,QAAI0C,OAAJ;AACA,QAAIC,OAAO,GAAG5E,QAAQ,CAAChM,QAAvB;;AACA,QAAIgM,QAAQ,CAACjM,QAAT,KAAsB,QAA1B,EAAoC;AAChC4Q,MAAAA,OAAO,GAAG,QAAV;AACH,KAFD,MAGK,IAAI,KAAKvC,MAAL,EAAJ,EAAmB;AACpBuC,MAAAA,OAAO,GAAG3E,QAAQ,CAACjM,QAAT,KAAsB,OAAtB,GAAgC,OAAhC,GAA0C,MAApD;AACH,KAFI,MAGA;AACD4Q,MAAAA,OAAO,GAAG3E,QAAQ,CAACjM,QAAT,KAAsB,OAAtB,GAAgC,MAAhC,GAAyC,OAAnD;AACH;;AACD,SAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoP,QAAQ,CAAC1P,MAA7B,EAAqCM,CAAC,EAAtC,EAA0C;AACtCoP,MAAAA,QAAQ,CAACpP,CAAD,CAAR,CAAY/H,KAAZ,CAAkBsX,eAAlB,GAAqC,GAAEF,OAAQ,IAAGC,OAAQ,EAA1D;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI1E,EAAAA,yBAAyB,CAACzM,MAAD,EAASuM,QAAT,EAAmB;AACxC,UAAM1R,QAAQ,GAAG,KAAKuQ,aAAtB;;AACA,UAAMiG,KAAK,GAAG,KAAK1C,MAAL,EAAd;;AACA,QAAI3T,MAAJ,EAAY7B,GAAZ,EAAiB+D,MAAjB;;AACA,QAAIqP,QAAQ,CAAChM,QAAT,KAAsB,KAA1B,EAAiC;AAC7B;AACApH,MAAAA,GAAG,GAAG6G,MAAM,CAAC6O,CAAb;AACA7T,MAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAT,GAAkB7B,GAAlB,GAAwB,KAAK4Q,eAAtC;AACH,KAJD,MAKK,IAAIwC,QAAQ,CAAChM,QAAT,KAAsB,QAA1B,EAAoC;AACrC;AACA;AACA;AACArD,MAAAA,MAAM,GAAGrC,QAAQ,CAACG,MAAT,GAAkBgF,MAAM,CAAC6O,CAAzB,GAA6B,KAAK9E,eAAL,GAAuB,CAA7D;AACA/O,MAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAT,GAAkBkC,MAAlB,GAA2B,KAAK6M,eAAzC;AACH,KANI,MAOA;AACD;AACA;AACA;AACA;AACA,YAAMuH,8BAA8B,GAAG/U,IAAI,CAACgV,GAAL,CAAS1W,QAAQ,CAACqC,MAAT,GAAkB8C,MAAM,CAAC6O,CAAzB,GAA6BhU,QAAQ,CAAC1B,GAA/C,EAAoD6G,MAAM,CAAC6O,CAA3D,CAAvC;AACA,YAAM2C,cAAc,GAAG,KAAK/H,oBAAL,CAA0BzO,MAAjD;AACAA,MAAAA,MAAM,GAAGsW,8BAA8B,GAAG,CAA1C;AACAnY,MAAAA,GAAG,GAAG6G,MAAM,CAAC6O,CAAP,GAAWyC,8BAAjB;;AACA,UAAItW,MAAM,GAAGwW,cAAT,IAA2B,CAAC,KAAK3G,gBAAjC,IAAqD,CAAC,KAAKjB,cAA/D,EAA+E;AAC3EzQ,QAAAA,GAAG,GAAG6G,MAAM,CAAC6O,CAAP,GAAY2C,cAAc,GAAG,CAAnC;AACH;AACJ,KA5BuC,CA6BxC;;;AACA,UAAMC,4BAA4B,GAAIlF,QAAQ,CAACjM,QAAT,KAAsB,OAAtB,IAAiC,CAAC+Q,KAAnC,IAChC9E,QAAQ,CAACjM,QAAT,KAAsB,KAAtB,IAA+B+Q,KADpC,CA9BwC,CAgCxC;;AACA,UAAMK,2BAA2B,GAAInF,QAAQ,CAACjM,QAAT,KAAsB,KAAtB,IAA+B,CAAC+Q,KAAjC,IAC/B9E,QAAQ,CAACjM,QAAT,KAAsB,OAAtB,IAAiC+Q,KADtC;AAEA,QAAInW,KAAJ,EAAW9B,IAAX,EAAiBiE,KAAjB;;AACA,QAAIqU,2BAAJ,EAAiC;AAC7BrU,MAAAA,KAAK,GAAGxC,QAAQ,CAACK,KAAT,GAAiB8E,MAAM,CAACyO,CAAxB,GAA4B,KAAK1E,eAAzC;AACA7O,MAAAA,KAAK,GAAG8E,MAAM,CAACyO,CAAP,GAAW,KAAK1E,eAAxB;AACH,KAHD,MAIK,IAAI0H,4BAAJ,EAAkC;AACnCrY,MAAAA,IAAI,GAAG4G,MAAM,CAACyO,CAAd;AACAvT,MAAAA,KAAK,GAAGL,QAAQ,CAACwC,KAAT,GAAiB2C,MAAM,CAACyO,CAAhC;AACH,KAHI,MAIA;AACD;AACA;AACA;AACA;AACA,YAAM6C,8BAA8B,GAAG/U,IAAI,CAACgV,GAAL,CAAS1W,QAAQ,CAACwC,KAAT,GAAiB2C,MAAM,CAACyO,CAAxB,GAA4B5T,QAAQ,CAACzB,IAA9C,EAAoD4G,MAAM,CAACyO,CAA3D,CAAvC;AACA,YAAMkD,aAAa,GAAG,KAAKlI,oBAAL,CAA0BvO,KAAhD;AACAA,MAAAA,KAAK,GAAGoW,8BAA8B,GAAG,CAAzC;AACAlY,MAAAA,IAAI,GAAG4G,MAAM,CAACyO,CAAP,GAAW6C,8BAAlB;;AACA,UAAIpW,KAAK,GAAGyW,aAAR,IAAyB,CAAC,KAAK9G,gBAA/B,IAAmD,CAAC,KAAKjB,cAA7D,EAA6E;AACzExQ,QAAAA,IAAI,GAAG4G,MAAM,CAACyO,CAAP,GAAYkD,aAAa,GAAG,CAAnC;AACH;AACJ;;AACD,WAAO;AAAExY,MAAAA,GAAG,EAAEA,GAAP;AAAYC,MAAAA,IAAI,EAAEA,IAAlB;AAAwB8D,MAAAA,MAAM,EAAEA,MAAhC;AAAwCG,MAAAA,KAAK,EAAEA,KAA/C;AAAsDnC,MAAAA,KAAtD;AAA6DF,MAAAA;AAA7D,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI6V,EAAAA,qBAAqB,CAAC7Q,MAAD,EAASuM,QAAT,EAAmB;AACpC,UAAMC,eAAe,GAAG,KAAKC,yBAAL,CAA+BzM,MAA/B,EAAuCuM,QAAvC,CAAxB,CADoC,CAEpC;AACA;;;AACA,QAAI,CAAC,KAAK1B,gBAAN,IAA0B,CAAC,KAAKjB,cAApC,EAAoD;AAChD4C,MAAAA,eAAe,CAACxR,MAAhB,GAAyBuB,IAAI,CAACgV,GAAL,CAAS/E,eAAe,CAACxR,MAAzB,EAAiC,KAAKyO,oBAAL,CAA0BzO,MAA3D,CAAzB;AACAwR,MAAAA,eAAe,CAACtR,KAAhB,GAAwBqB,IAAI,CAACgV,GAAL,CAAS/E,eAAe,CAACtR,KAAzB,EAAgC,KAAKuO,oBAAL,CAA0BvO,KAA1D,CAAxB;AACH;;AACD,UAAM0W,MAAM,GAAG,EAAf;;AACA,QAAI,KAAKC,iBAAL,EAAJ,EAA8B;AAC1BD,MAAAA,MAAM,CAACzY,GAAP,GAAayY,MAAM,CAACxY,IAAP,GAAc,GAA3B;AACAwY,MAAAA,MAAM,CAAC1U,MAAP,GAAgB0U,MAAM,CAACvU,KAAP,GAAeuU,MAAM,CAAC5J,SAAP,GAAmB4J,MAAM,CAAC7J,QAAP,GAAkB,EAApE;AACA6J,MAAAA,MAAM,CAAC1W,KAAP,GAAe0W,MAAM,CAAC5W,MAAP,GAAgB,MAA/B;AACH,KAJD,MAKK;AACD,YAAMgN,SAAS,GAAG,KAAKrM,WAAL,CAAiBmL,SAAjB,GAA6BkB,SAA/C;;AACA,YAAMD,QAAQ,GAAG,KAAKpM,WAAL,CAAiBmL,SAAjB,GAA6BiB,QAA9C;;AACA6J,MAAAA,MAAM,CAAC5W,MAAP,GAAgBxD,mBAAmB,CAACgV,eAAe,CAACxR,MAAjB,CAAnC;AACA4W,MAAAA,MAAM,CAACzY,GAAP,GAAa3B,mBAAmB,CAACgV,eAAe,CAACrT,GAAjB,CAAhC;AACAyY,MAAAA,MAAM,CAAC1U,MAAP,GAAgB1F,mBAAmB,CAACgV,eAAe,CAACtP,MAAjB,CAAnC;AACA0U,MAAAA,MAAM,CAAC1W,KAAP,GAAe1D,mBAAmB,CAACgV,eAAe,CAACtR,KAAjB,CAAlC;AACA0W,MAAAA,MAAM,CAACxY,IAAP,GAAc5B,mBAAmB,CAACgV,eAAe,CAACpT,IAAjB,CAAjC;AACAwY,MAAAA,MAAM,CAACvU,KAAP,GAAe7F,mBAAmB,CAACgV,eAAe,CAACnP,KAAjB,CAAlC,CARC,CASD;;AACA,UAAIkP,QAAQ,CAACjM,QAAT,KAAsB,QAA1B,EAAoC;AAChCsR,QAAAA,MAAM,CAAC1E,UAAP,GAAoB,QAApB;AACH,OAFD,MAGK;AACD0E,QAAAA,MAAM,CAAC1E,UAAP,GAAoBX,QAAQ,CAACjM,QAAT,KAAsB,KAAtB,GAA8B,UAA9B,GAA2C,YAA/D;AACH;;AACD,UAAIiM,QAAQ,CAAChM,QAAT,KAAsB,QAA1B,EAAoC;AAChCqR,QAAAA,MAAM,CAACzE,cAAP,GAAwB,QAAxB;AACH,OAFD,MAGK;AACDyE,QAAAA,MAAM,CAACzE,cAAP,GAAwBZ,QAAQ,CAAChM,QAAT,KAAsB,QAAtB,GAAiC,UAAjC,GAA8C,YAAtE;AACH;;AACD,UAAIyH,SAAJ,EAAe;AACX4J,QAAAA,MAAM,CAAC5J,SAAP,GAAmBxQ,mBAAmB,CAACwQ,SAAD,CAAtC;AACH;;AACD,UAAID,QAAJ,EAAc;AACV6J,QAAAA,MAAM,CAAC7J,QAAP,GAAkBvQ,mBAAmB,CAACuQ,QAAD,CAArC;AACH;AACJ;;AACD,SAAK0B,oBAAL,GAA4B+C,eAA5B;AACAS,IAAAA,YAAY,CAAC,KAAKtC,YAAL,CAAkB7Q,KAAnB,EAA0B8X,MAA1B,CAAZ;AACH;AACD;;;AACAzG,EAAAA,uBAAuB,GAAG;AACtB8B,IAAAA,YAAY,CAAC,KAAKtC,YAAL,CAAkB7Q,KAAnB,EAA0B;AAClCX,MAAAA,GAAG,EAAE,GAD6B;AAElCC,MAAAA,IAAI,EAAE,GAF4B;AAGlCiE,MAAAA,KAAK,EAAE,GAH2B;AAIlCH,MAAAA,MAAM,EAAE,GAJ0B;AAKlClC,MAAAA,MAAM,EAAE,EAL0B;AAMlCE,MAAAA,KAAK,EAAE,EAN2B;AAOlCgS,MAAAA,UAAU,EAAE,EAPsB;AAQlCC,MAAAA,cAAc,EAAE;AARkB,KAA1B,CAAZ;AAUH;AACD;;;AACAjC,EAAAA,0BAA0B,GAAG;AACzB+B,IAAAA,YAAY,CAAC,KAAK5I,KAAL,CAAWvK,KAAZ,EAAmB;AAC3BX,MAAAA,GAAG,EAAE,EADsB;AAE3BC,MAAAA,IAAI,EAAE,EAFqB;AAG3B8D,MAAAA,MAAM,EAAE,EAHmB;AAI3BG,MAAAA,KAAK,EAAE,EAJoB;AAK3BkP,MAAAA,QAAQ,EAAE,EALiB;AAM3BuF,MAAAA,SAAS,EAAE;AANgB,KAAnB,CAAZ;AAQH;AACD;;;AACAlB,EAAAA,wBAAwB,CAAC9E,WAAD,EAAcS,QAAd,EAAwB;AAC5C,UAAMqF,MAAM,GAAG,EAAf;;AACA,UAAMG,gBAAgB,GAAG,KAAKF,iBAAL,EAAzB;;AACA,UAAMG,qBAAqB,GAAG,KAAKnI,sBAAnC;;AACA,UAAMrL,MAAM,GAAG,KAAK7C,WAAL,CAAiBmL,SAAjB,EAAf;;AACA,QAAIiL,gBAAJ,EAAsB;AAClB,YAAMzV,cAAc,GAAG,KAAKtD,cAAL,CAAoBa,yBAApB,EAAvB;;AACAoT,MAAAA,YAAY,CAAC2E,MAAD,EAAS,KAAKK,iBAAL,CAAuB1F,QAAvB,EAAiCT,WAAjC,EAA8CxP,cAA9C,CAAT,CAAZ;AACA2Q,MAAAA,YAAY,CAAC2E,MAAD,EAAS,KAAKM,iBAAL,CAAuB3F,QAAvB,EAAiCT,WAAjC,EAA8CxP,cAA9C,CAAT,CAAZ;AACH,KAJD,MAKK;AACDsV,MAAAA,MAAM,CAACrF,QAAP,GAAkB,QAAlB;AACH,KAZ2C,CAa5C;AACA;AACA;AACA;AACA;;;AACA,QAAI4F,eAAe,GAAG,EAAtB;;AACA,QAAIjS,OAAO,GAAG,KAAKiP,UAAL,CAAgB5C,QAAhB,EAA0B,GAA1B,CAAd;;AACA,QAAIpM,OAAO,GAAG,KAAKgP,UAAL,CAAgB5C,QAAhB,EAA0B,GAA1B,CAAd;;AACA,QAAIrM,OAAJ,EAAa;AACTiS,MAAAA,eAAe,IAAK,cAAajS,OAAQ,MAAzC;AACH;;AACD,QAAIC,OAAJ,EAAa;AACTgS,MAAAA,eAAe,IAAK,cAAahS,OAAQ,KAAzC;AACH;;AACDyR,IAAAA,MAAM,CAACE,SAAP,GAAmBK,eAAe,CAACC,IAAhB,EAAnB,CA3B4C,CA4B5C;AACA;AACA;AACA;AACA;;AACA,QAAI5T,MAAM,CAACwJ,SAAX,EAAsB;AAClB,UAAI+J,gBAAJ,EAAsB;AAClBH,QAAAA,MAAM,CAAC5J,SAAP,GAAmBxQ,mBAAmB,CAACgH,MAAM,CAACwJ,SAAR,CAAtC;AACH,OAFD,MAGK,IAAIgK,qBAAJ,EAA2B;AAC5BJ,QAAAA,MAAM,CAAC5J,SAAP,GAAmB,EAAnB;AACH;AACJ;;AACD,QAAIxJ,MAAM,CAACuJ,QAAX,EAAqB;AACjB,UAAIgK,gBAAJ,EAAsB;AAClBH,QAAAA,MAAM,CAAC7J,QAAP,GAAkBvQ,mBAAmB,CAACgH,MAAM,CAACuJ,QAAR,CAArC;AACH,OAFD,MAGK,IAAIiK,qBAAJ,EAA2B;AAC5BJ,QAAAA,MAAM,CAAC7J,QAAP,GAAkB,EAAlB;AACH;AACJ;;AACDkF,IAAAA,YAAY,CAAC,KAAK5I,KAAL,CAAWvK,KAAZ,EAAmB8X,MAAnB,CAAZ;AACH;AACD;;;AACAK,EAAAA,iBAAiB,CAAC1F,QAAD,EAAWT,WAAX,EAAwBxP,cAAxB,EAAwC;AACrD;AACA;AACA,QAAIsV,MAAM,GAAG;AAAEzY,MAAAA,GAAG,EAAE,EAAP;AAAW+D,MAAAA,MAAM,EAAE;AAAnB,KAAb;;AACA,QAAI8O,YAAY,GAAG,KAAKC,gBAAL,CAAsBH,WAAtB,EAAmC,KAAKN,YAAxC,EAAsDe,QAAtD,CAAnB;;AACA,QAAI,KAAK7C,SAAT,EAAoB;AAChBsC,MAAAA,YAAY,GAAG,KAAKkE,oBAAL,CAA0BlE,YAA1B,EAAwC,KAAKR,YAA7C,EAA2DlP,cAA3D,CAAf;AACH;;AACD,QAAI+V,qBAAqB,GAAG,KAAK7I,iBAAL,CAAuBhG,mBAAvB,GAA6CrF,qBAA7C,GAAqEhF,GAAjG,CARqD,CASrD;AACA;AACA;AACA;;;AACA6S,IAAAA,YAAY,CAAC6C,CAAb,IAAkBwD,qBAAlB,CAbqD,CAcrD;AACA;;AACA,QAAI9F,QAAQ,CAAChM,QAAT,KAAsB,QAA1B,EAAoC;AAChC;AACA;AACA,YAAM+R,cAAc,GAAG,KAAKhZ,SAAL,CAAeK,eAAf,CAA+B4Y,YAAtD;AACAX,MAAAA,MAAM,CAAC1U,MAAP,GAAiB,GAAEoV,cAAc,IAAItG,YAAY,CAAC6C,CAAb,GAAiB,KAAKrD,YAAL,CAAkBxQ,MAAvC,CAA+C,IAAhF;AACH,KALD,MAMK;AACD4W,MAAAA,MAAM,CAACzY,GAAP,GAAa3B,mBAAmB,CAACwU,YAAY,CAAC6C,CAAd,CAAhC;AACH;;AACD,WAAO+C,MAAP;AACH;AACD;;;AACAM,EAAAA,iBAAiB,CAAC3F,QAAD,EAAWT,WAAX,EAAwBxP,cAAxB,EAAwC;AACrD;AACA;AACA,QAAIsV,MAAM,GAAG;AAAExY,MAAAA,IAAI,EAAE,EAAR;AAAYiE,MAAAA,KAAK,EAAE;AAAnB,KAAb;;AACA,QAAI2O,YAAY,GAAG,KAAKC,gBAAL,CAAsBH,WAAtB,EAAmC,KAAKN,YAAxC,EAAsDe,QAAtD,CAAnB;;AACA,QAAI,KAAK7C,SAAT,EAAoB;AAChBsC,MAAAA,YAAY,GAAG,KAAKkE,oBAAL,CAA0BlE,YAA1B,EAAwC,KAAKR,YAA7C,EAA2DlP,cAA3D,CAAf;AACH,KAPoD,CAQrD;AACA;AACA;AACA;;;AACA,QAAIkW,uBAAJ;;AACA,QAAI,KAAK7D,MAAL,EAAJ,EAAmB;AACf6D,MAAAA,uBAAuB,GAAGjG,QAAQ,CAACjM,QAAT,KAAsB,KAAtB,GAA8B,MAA9B,GAAuC,OAAjE;AACH,KAFD,MAGK;AACDkS,MAAAA,uBAAuB,GAAGjG,QAAQ,CAACjM,QAAT,KAAsB,KAAtB,GAA8B,OAA9B,GAAwC,MAAlE;AACH,KAlBoD,CAmBrD;AACA;;;AACA,QAAIkS,uBAAuB,KAAK,OAAhC,EAAyC;AACrC,YAAMC,aAAa,GAAG,KAAKnZ,SAAL,CAAeK,eAAf,CAA+B+Y,WAArD;AACAd,MAAAA,MAAM,CAACvU,KAAP,GAAgB,GAAEoV,aAAa,IAAIzG,YAAY,CAACyC,CAAb,GAAiB,KAAKjD,YAAL,CAAkBtQ,KAAvC,CAA8C,IAA7E;AACH,KAHD,MAIK;AACD0W,MAAAA,MAAM,CAACxY,IAAP,GAAc5B,mBAAmB,CAACwU,YAAY,CAACyC,CAAd,CAAjC;AACH;;AACD,WAAOmD,MAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIb,EAAAA,oBAAoB,GAAG;AACnB;AACA,UAAM4B,YAAY,GAAG,KAAKpH,cAAL,EAArB;;AACA,UAAMqH,aAAa,GAAG,KAAKvO,KAAL,CAAWlG,qBAAX,EAAtB,CAHmB,CAInB;AACA;AACA;;;AACA,UAAM0U,qBAAqB,GAAG,KAAK7I,YAAL,CAAkB8I,GAAlB,CAAsBC,UAAU,IAAI;AAC9D,aAAOA,UAAU,CAACC,aAAX,GAA2BC,aAA3B,CAAyC9U,qBAAzC,EAAP;AACH,KAF6B,CAA9B;;AAGA,WAAO;AACH+U,MAAAA,eAAe,EAAE3V,2BAA2B,CAACoV,YAAD,EAAeE,qBAAf,CADzC;AAEHM,MAAAA,mBAAmB,EAAEvW,4BAA4B,CAAC+V,YAAD,EAAeE,qBAAf,CAF9C;AAGHO,MAAAA,gBAAgB,EAAE7V,2BAA2B,CAACqV,aAAD,EAAgBC,qBAAhB,CAH1C;AAIHQ,MAAAA,oBAAoB,EAAEzW,4BAA4B,CAACgW,aAAD,EAAgBC,qBAAhB;AAJ/C,KAAP;AAMH;AACD;;;AACApD,EAAAA,kBAAkB,CAAClO,MAAD,EAAS,GAAG+R,SAAZ,EAAuB;AACrC,WAAOA,SAAS,CAACC,MAAV,CAAiB,CAACC,YAAD,EAAeC,eAAf,KAAmC;AACvD,aAAOD,YAAY,GAAGjX,IAAI,CAAC8T,GAAL,CAASoD,eAAT,EAA0B,CAA1B,CAAtB;AACH,KAFM,EAEJlS,MAFI,CAAP;AAGH;AACD;;;AACA8J,EAAAA,wBAAwB,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA,UAAMnQ,KAAK,GAAG,KAAK5B,SAAL,CAAeK,eAAf,CAA+B+Y,WAA7C;AACA,UAAM1X,MAAM,GAAG,KAAK1B,SAAL,CAAeK,eAAf,CAA+B4Y,YAA9C;;AACA,UAAMjW,cAAc,GAAG,KAAKtD,cAAL,CAAoBa,yBAApB,EAAvB;;AACA,WAAO;AACHV,MAAAA,GAAG,EAAEmD,cAAc,CAACnD,GAAf,GAAqB,KAAK4Q,eAD5B;AAEH3Q,MAAAA,IAAI,EAAEkD,cAAc,CAAClD,IAAf,GAAsB,KAAK2Q,eAF9B;AAGH1M,MAAAA,KAAK,EAAEf,cAAc,CAAClD,IAAf,GAAsB8B,KAAtB,GAA8B,KAAK6O,eAHvC;AAIH7M,MAAAA,MAAM,EAAEZ,cAAc,CAACnD,GAAf,GAAqB6B,MAArB,GAA8B,KAAK+O,eAJxC;AAKH7O,MAAAA,KAAK,EAAEA,KAAK,GAAI,IAAI,KAAK6O,eALtB;AAMH/O,MAAAA,MAAM,EAAEA,MAAM,GAAI,IAAI,KAAK+O;AANxB,KAAP;AAQH;AACD;;;AACA4E,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKhT,WAAL,CAAiBgM,YAAjB,OAAoC,KAA3C;AACH;AACD;;;AACAkK,EAAAA,iBAAiB,GAAG;AAChB,WAAO,CAAC,KAAKhI,sBAAN,IAAgC,KAAKH,SAA5C;AACH;AACD;;;AACAyF,EAAAA,UAAU,CAAC5C,QAAD,EAAWmH,IAAX,EAAiB;AACvB,QAAIA,IAAI,KAAK,GAAb,EAAkB;AACd;AACA;AACA,aAAOnH,QAAQ,CAACrM,OAAT,IAAoB,IAApB,GAA2B,KAAKkK,QAAhC,GAA2CmC,QAAQ,CAACrM,OAA3D;AACH;;AACD,WAAOqM,QAAQ,CAACpM,OAAT,IAAoB,IAApB,GAA2B,KAAKkK,QAAhC,GAA2CkC,QAAQ,CAACpM,OAA3D;AACH;AACD;;;AACAuK,EAAAA,kBAAkB,GAAG;AACjB,QAAI,OAAO1O,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;AAC/C,UAAI,CAAC,KAAKiO,mBAAL,CAAyB1I,MAA9B,EAAsC;AAClC,cAAMnG,KAAK,CAAC,uEAAD,CAAX;AACH,OAH8C,CAI/C;AACA;;;AACA,WAAK6O,mBAAL,CAAyBlB,OAAzB,CAAiC4K,IAAI,IAAI;AACrC5S,QAAAA,0BAA0B,CAAC,SAAD,EAAY4S,IAAI,CAACvT,OAAjB,CAA1B;AACAQ,QAAAA,wBAAwB,CAAC,SAAD,EAAY+S,IAAI,CAACtT,OAAjB,CAAxB;AACAU,QAAAA,0BAA0B,CAAC,UAAD,EAAa4S,IAAI,CAACrT,QAAlB,CAA1B;AACAM,QAAAA,wBAAwB,CAAC,UAAD,EAAa+S,IAAI,CAACpT,QAAlB,CAAxB;AACH,OALD;AAMH;AACJ;AACD;;;AACAuQ,EAAAA,gBAAgB,CAACjI,UAAD,EAAa;AACzB,QAAI,KAAKxE,KAAT,EAAgB;AACZ5M,MAAAA,WAAW,CAACoR,UAAD,CAAX,CAAwBE,OAAxB,CAAgCC,QAAQ,IAAI;AACxC,YAAIA,QAAQ,KAAK,EAAb,IAAmB,KAAKsB,oBAAL,CAA0BjJ,OAA1B,CAAkC2H,QAAlC,MAAgD,CAAC,CAAxE,EAA2E;AACvE,eAAKsB,oBAAL,CAA0BnJ,IAA1B,CAA+B6H,QAA/B;;AACA,eAAK3E,KAAL,CAAWtK,SAAX,CAAqBC,GAArB,CAAyBgP,QAAzB;AACH;AACJ,OALD;AAMH;AACJ;AACD;;;AACAiC,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAK5G,KAAT,EAAgB;AACZ,WAAKiG,oBAAL,CAA0BvB,OAA1B,CAAkCC,QAAQ,IAAI;AAC1C,aAAK3E,KAAL,CAAWtK,SAAX,CAAqBU,MAArB,CAA4BuO,QAA5B;AACH,OAFD;;AAGA,WAAKsB,oBAAL,GAA4B,EAA5B;AACH;AACJ;AACD;;;AACAiB,EAAAA,cAAc,GAAG;AACb,UAAMvL,MAAM,GAAG,KAAKkO,OAApB;;AACA,QAAIlO,MAAM,YAAYpJ,UAAtB,EAAkC;AAC9B,aAAOoJ,MAAM,CAACiT,aAAP,CAAqB9U,qBAArB,EAAP;AACH,KAJY,CAKb;;;AACA,QAAI6B,MAAM,YAAY4T,OAAtB,EAA+B;AAC3B,aAAO5T,MAAM,CAAC7B,qBAAP,EAAP;AACH;;AACD,UAAMjD,KAAK,GAAG8E,MAAM,CAAC9E,KAAP,IAAgB,CAA9B;AACA,UAAMF,MAAM,GAAGgF,MAAM,CAAChF,MAAP,IAAiB,CAAhC,CAVa,CAWb;;AACA,WAAO;AACH7B,MAAAA,GAAG,EAAE6G,MAAM,CAAC6O,CADT;AAEH3R,MAAAA,MAAM,EAAE8C,MAAM,CAAC6O,CAAP,GAAW7T,MAFhB;AAGH5B,MAAAA,IAAI,EAAE4G,MAAM,CAACyO,CAHV;AAIHpR,MAAAA,KAAK,EAAE2C,MAAM,CAACyO,CAAP,GAAWvT,KAJf;AAKHF,MAAAA,MALG;AAMHE,MAAAA;AANG,KAAP;AAQH;;AAh4BmC;AAk4BxC;;;AACA,SAAS+R,YAAT,CAAsB4G,WAAtB,EAAmCC,MAAnC,EAA2C;AACvC,OAAK,IAAIjU,GAAT,IAAgBiU,MAAhB,EAAwB;AACpB,QAAIA,MAAM,CAACC,cAAP,CAAsBlU,GAAtB,CAAJ,EAAgC;AAC5BgU,MAAAA,WAAW,CAAChU,GAAD,CAAX,GAAmBiU,MAAM,CAACjU,GAAD,CAAzB;AACH;AACJ;;AACD,SAAOgU,WAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAAS9D,aAAT,CAAuBiE,KAAvB,EAA8B;AAC1B,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,IAAI,IAA1C,EAAgD;AAC5C,UAAM,CAAClT,KAAD,EAAQmT,KAAR,IAAiBD,KAAK,CAACE,KAAN,CAAY7K,cAAZ,CAAvB;AACA,WAAQ,CAAC4K,KAAD,IAAUA,KAAK,KAAK,IAArB,GAA6BE,UAAU,CAACrT,KAAD,CAAvC,GAAiD,IAAxD;AACH;;AACD,SAAOkT,KAAK,IAAI,IAAhB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS9E,4BAAT,CAAsCkF,UAAtC,EAAkD;AAC9C,SAAO;AACHjb,IAAAA,GAAG,EAAEoD,IAAI,CAAC8X,KAAL,CAAWD,UAAU,CAACjb,GAAtB,CADF;AAEHkE,IAAAA,KAAK,EAAEd,IAAI,CAAC8X,KAAL,CAAWD,UAAU,CAAC/W,KAAtB,CAFJ;AAGHH,IAAAA,MAAM,EAAEX,IAAI,CAAC8X,KAAL,CAAWD,UAAU,CAAClX,MAAtB,CAHL;AAIH9D,IAAAA,IAAI,EAAEmD,IAAI,CAAC8X,KAAL,CAAWD,UAAU,CAAChb,IAAtB,CAJH;AAKH8B,IAAAA,KAAK,EAAEqB,IAAI,CAAC8X,KAAL,CAAWD,UAAU,CAAClZ,KAAtB,CALJ;AAMHF,IAAAA,MAAM,EAAEuB,IAAI,CAAC8X,KAAL,CAAWD,UAAU,CAACpZ,MAAtB;AANL,GAAP;AAQH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMsZ,yBAAN,CAAgC;AAC5Bvb,EAAAA,WAAW,CAACwb,SAAD,EAAYC,UAAZ,EAAwBjL,WAAxB,EAAqCkL,aAArC,EAAoDxb,QAApD,EAA8Dyb,QAA9D,EAAwEC,gBAAxE,EAA0F;AACjG;AACA,SAAK1K,mBAAL,GAA2B,EAA3B,CAFiG,CAGjG;AACA;AACA;AACA;;AACA,SAAKhF,iBAAL,GAAyB,IAAIqE,iCAAJ,CAAsCC,WAAtC,EAAmDkL,aAAnD,EAAkExb,QAAlE,EAA4Eyb,QAA5E,EAAsFC,gBAAtF,EACpBjH,sBADoB,CACG,KADH,EAEpBI,QAFoB,CAEX,KAFW,EAGpBN,kBAHoB,CAGD,CAHC,CAAzB;AAIA,SAAKoH,oBAAL,CAA0BL,SAA1B,EAAqCC,UAArC;AACA,SAAKK,gBAAL,GAAwB,KAAK5P,iBAAL,CAAuBsF,eAA/C;AACH;AACD;;;AACa,MAATE,SAAS,GAAG;AACZ,WAAO,KAAKR,mBAAZ;AACH;AACD;;;AACA1Q,EAAAA,MAAM,CAACwC,UAAD,EAAa;AACf,SAAKJ,WAAL,GAAmBI,UAAnB;;AACA,SAAKkJ,iBAAL,CAAuB1L,MAAvB,CAA8BwC,UAA9B;;AACA,QAAI,KAAK+Y,UAAT,EAAqB;AACjB/Y,MAAAA,UAAU,CAACsL,YAAX,CAAwB,KAAKyN,UAA7B;AACA,WAAKA,UAAL,GAAkB,IAAlB;AACH;AACJ;AACD;;;AACA7O,EAAAA,OAAO,GAAG;AACN,SAAKhB,iBAAL,CAAuBgB,OAAvB;AACH;AACD;;;AACAnK,EAAAA,MAAM,GAAG;AACL,SAAKmJ,iBAAL,CAAuBnJ,MAAvB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIiL,EAAAA,KAAK,GAAG;AACJ,SAAK9B,iBAAL,CAAuB8B,KAAvB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIgO,EAAAA,uBAAuB,GAAG;AACtB,SAAK9P,iBAAL,CAAuB+F,mBAAvB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIqC,EAAAA,wBAAwB,CAACC,WAAD,EAAc;AAClC,SAAKrI,iBAAL,CAAuBoI,wBAAvB,CAAgDC,WAAhD;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIsH,EAAAA,oBAAoB,CAACL,SAAD,EAAYC,UAAZ,EAAwBtU,OAAxB,EAAiCC,OAAjC,EAA0C;AAC1D,UAAMoM,QAAQ,GAAG,IAAIxM,sBAAJ,CAA2BwU,SAA3B,EAAsCC,UAAtC,EAAkDtU,OAAlD,EAA2DC,OAA3D,CAAjB;;AACA,SAAK8J,mBAAL,CAAyB9I,IAAzB,CAA8BoL,QAA9B;;AACA,SAAKtH,iBAAL,CAAuBsI,aAAvB,CAAqC,KAAKtD,mBAA1C;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI+K,EAAAA,aAAa,CAAC1N,GAAD,EAAM;AACf;AACA;AACA;AACA,QAAI,KAAK3L,WAAT,EAAsB;AAClB,WAAKA,WAAL,CAAiB0L,YAAjB,CAA8BC,GAA9B;AACH,KAFD,MAGK;AACD,WAAKwN,UAAL,GAAkBxN,GAAlB;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI2N,EAAAA,WAAW,CAAC7G,MAAD,EAAS;AAChB,SAAKnJ,iBAAL,CAAuBkJ,kBAAvB,CAA0CC,MAA1C;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI8G,EAAAA,WAAW,CAAC9G,MAAD,EAAS;AAChB,SAAKnJ,iBAAL,CAAuBoJ,kBAAvB,CAA0CD,MAA1C;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AACzB,SAAKhJ,iBAAL,CAAuB+I,kBAAvB,CAA0CC,QAA1C;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIV,EAAAA,aAAa,CAAC9C,SAAD,EAAY;AACrB,SAAKR,mBAAL,GAA2BQ,SAAS,CAAC5H,KAAV,EAA3B;;AACA,SAAKoC,iBAAL,CAAuBsI,aAAvB,CAAqC,KAAKtD,mBAA1C;;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIO,EAAAA,SAAS,CAACxK,MAAD,EAAS;AACd,SAAKiF,iBAAL,CAAuBuF,SAAvB,CAAiCxK,MAAjC;;AACA,WAAO,IAAP;AACH;;AAjI2B;AAoIhC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMmV,YAAY,GAAG,4BAArB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAN,CAA6B;AACzBrc,EAAAA,WAAW,GAAG;AACV,SAAKsc,YAAL,GAAoB,QAApB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,EAAf;AACH;;AACDtc,EAAAA,MAAM,CAACwC,UAAD,EAAa;AACf,UAAMyC,MAAM,GAAGzC,UAAU,CAAC+K,SAAX,EAAf;AACA,SAAKnL,WAAL,GAAmBI,UAAnB;;AACA,QAAI,KAAK6Z,MAAL,IAAe,CAACpX,MAAM,CAACtD,KAA3B,EAAkC;AAC9Ba,MAAAA,UAAU,CAACmL,UAAX,CAAsB;AAAEhM,QAAAA,KAAK,EAAE,KAAK0a;AAAd,OAAtB;AACH;;AACD,QAAI,KAAKC,OAAL,IAAgB,CAACrX,MAAM,CAACxD,MAA5B,EAAoC;AAChCe,MAAAA,UAAU,CAACmL,UAAX,CAAsB;AAAElM,QAAAA,MAAM,EAAE,KAAK6a;AAAf,OAAtB;AACH;;AACD9Z,IAAAA,UAAU,CAACqJ,WAAX,CAAuBrL,SAAvB,CAAiCC,GAAjC,CAAqCmb,YAArC;AACA,SAAKvK,WAAL,GAAmB,KAAnB;AACH;AACD;AACJ;AACA;AACA;;;AACIzR,EAAAA,GAAG,CAAC2H,KAAK,GAAG,EAAT,EAAa;AACZ,SAAKyU,aAAL,GAAqB,EAArB;AACA,SAAKD,UAAL,GAAkBxU,KAAlB;AACA,SAAK4U,WAAL,GAAmB,YAAnB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACItc,EAAAA,IAAI,CAAC0H,KAAK,GAAG,EAAT,EAAa;AACb,SAAK2U,YAAL,GAAoB,EAApB;AACA,SAAKD,WAAL,GAAmB1U,KAAnB;AACA,SAAK6U,eAAL,GAAuB,YAAvB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIzY,EAAAA,MAAM,CAAC4D,KAAK,GAAG,EAAT,EAAa;AACf,SAAKwU,UAAL,GAAkB,EAAlB;AACA,SAAKC,aAAL,GAAqBzU,KAArB;AACA,SAAK4U,WAAL,GAAmB,UAAnB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIrY,EAAAA,KAAK,CAACyD,KAAK,GAAG,EAAT,EAAa;AACd,SAAK0U,WAAL,GAAmB,EAAnB;AACA,SAAKC,YAAL,GAAoB3U,KAApB;AACA,SAAK6U,eAAL,GAAuB,UAAvB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIza,EAAAA,KAAK,CAAC4F,KAAK,GAAG,EAAT,EAAa;AACd,QAAI,KAAKnF,WAAT,EAAsB;AAClB,WAAKA,WAAL,CAAiBuL,UAAjB,CAA4B;AAAEhM,QAAAA,KAAK,EAAE4F;AAAT,OAA5B;AACH,KAFD,MAGK;AACD,WAAK8U,MAAL,GAAc9U,KAAd;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI9F,EAAAA,MAAM,CAAC8F,KAAK,GAAG,EAAT,EAAa;AACf,QAAI,KAAKnF,WAAT,EAAsB;AAClB,WAAKA,WAAL,CAAiBuL,UAAjB,CAA4B;AAAElM,QAAAA,MAAM,EAAE8F;AAAV,OAA5B;AACH,KAFD,MAGK;AACD,WAAK+U,OAAL,GAAe/U,KAAf;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIgV,EAAAA,kBAAkB,CAAC1H,MAAM,GAAG,EAAV,EAAc;AAC5B,SAAKhV,IAAL,CAAUgV,MAAV;AACA,SAAKuH,eAAL,GAAuB,QAAvB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,gBAAgB,CAAC3H,MAAM,GAAG,EAAV,EAAc;AAC1B,SAAKjV,GAAL,CAASiV,MAAT;AACA,SAAKsH,WAAL,GAAmB,QAAnB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI3O,EAAAA,KAAK,GAAG;AACJ;AACA;AACA;AACA,QAAI,CAAC,KAAKpL,WAAN,IAAqB,CAAC,KAAKA,WAAL,CAAiBC,WAAjB,EAA1B,EAA0D;AACtD;AACH;;AACD,UAAMgW,MAAM,GAAG,KAAKjW,WAAL,CAAiBuC,cAAjB,CAAgCpE,KAA/C;AACA,UAAMkc,YAAY,GAAG,KAAKra,WAAL,CAAiByJ,WAAjB,CAA6BtL,KAAlD;;AACA,UAAM0E,MAAM,GAAG,KAAK7C,WAAL,CAAiBmL,SAAjB,EAAf;;AACA,UAAM;AAAE5L,MAAAA,KAAF;AAASF,MAAAA,MAAT;AAAiB+M,MAAAA,QAAjB;AAA2BC,MAAAA;AAA3B,QAAyCxJ,MAA/C;AACA,UAAMyX,yBAAyB,GAAG,CAAC/a,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,OAA/B,MAC7B,CAAC6M,QAAD,IAAaA,QAAQ,KAAK,MAA1B,IAAoCA,QAAQ,KAAK,OADpB,CAAlC;AAEA,UAAMmO,uBAAuB,GAAG,CAAClb,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,OAAjC,MAC3B,CAACgN,SAAD,IAAcA,SAAS,KAAK,MAA5B,IAAsCA,SAAS,KAAK,OADzB,CAAhC;AAEA4J,IAAAA,MAAM,CAACrF,QAAP,GAAkB,KAAK8I,YAAvB;AACAzD,IAAAA,MAAM,CAACuE,UAAP,GAAoBF,yBAAyB,GAAG,GAAH,GAAS,KAAKT,WAA3D;AACA5D,IAAAA,MAAM,CAACwE,SAAP,GAAmBF,uBAAuB,GAAG,GAAH,GAAS,KAAKZ,UAAxD;AACA1D,IAAAA,MAAM,CAACyE,YAAP,GAAsB,KAAKd,aAA3B;AACA3D,IAAAA,MAAM,CAAC0E,WAAP,GAAqB,KAAKb,YAA1B;;AACA,QAAIQ,yBAAJ,EAA+B;AAC3BD,MAAAA,YAAY,CAAC7I,cAAb,GAA8B,YAA9B;AACH,KAFD,MAGK,IAAI,KAAKwI,eAAL,KAAyB,QAA7B,EAAuC;AACxCK,MAAAA,YAAY,CAAC7I,cAAb,GAA8B,QAA9B;AACH,KAFI,MAGA,IAAI,KAAKxR,WAAL,CAAiBmL,SAAjB,GAA6BS,SAA7B,KAA2C,KAA/C,EAAsD;AACvD;AACA;AACA;AACA;AACA,UAAI,KAAKoO,eAAL,KAAyB,YAA7B,EAA2C;AACvCK,QAAAA,YAAY,CAAC7I,cAAb,GAA8B,UAA9B;AACH,OAFD,MAGK,IAAI,KAAKwI,eAAL,KAAyB,UAA7B,EAAyC;AAC1CK,QAAAA,YAAY,CAAC7I,cAAb,GAA8B,YAA9B;AACH;AACJ,KAXI,MAYA;AACD6I,MAAAA,YAAY,CAAC7I,cAAb,GAA8B,KAAKwI,eAAnC;AACH;;AACDK,IAAAA,YAAY,CAAC9I,UAAb,GAA0BgJ,uBAAuB,GAAG,YAAH,GAAkB,KAAKR,WAAxE;AACH;AACD;AACJ;AACA;AACA;;;AACIzP,EAAAA,OAAO,GAAG;AACN,QAAI,KAAK2E,WAAL,IAAoB,CAAC,KAAKjP,WAA9B,EAA2C;AACvC;AACH;;AACD,UAAMiW,MAAM,GAAG,KAAKjW,WAAL,CAAiBuC,cAAjB,CAAgCpE,KAA/C;AACA,UAAMyc,MAAM,GAAG,KAAK5a,WAAL,CAAiByJ,WAAhC;AACA,UAAM4Q,YAAY,GAAGO,MAAM,CAACzc,KAA5B;AACAyc,IAAAA,MAAM,CAACxc,SAAP,CAAiBU,MAAjB,CAAwB0a,YAAxB;AACAa,IAAAA,YAAY,CAAC7I,cAAb,GAA8B6I,YAAY,CAAC9I,UAAb,GAA0B0E,MAAM,CAACwE,SAAP,GACpDxE,MAAM,CAACyE,YAAP,GAAsBzE,MAAM,CAACuE,UAAP,GAAoBvE,MAAM,CAAC0E,WAAP,GAAqB1E,MAAM,CAACrF,QAAP,GAAkB,EADrF;AAEA,SAAK5Q,WAAL,GAAmB,IAAnB;AACA,SAAKiP,WAAL,GAAmB,IAAnB;AACH;;AAnLwB;AAsL7B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;IACM4L,sB;AAAN,QAAMA,sBAAN,CAA6B;AACzBzd,IAAAA,WAAW,CAACC,cAAD,EAAiBM,SAAjB,EAA4BgJ,SAA5B,EAAuCkH,iBAAvC,EAA0D;AACjE,WAAKxQ,cAAL,GAAsBA,cAAtB;AACA,WAAKM,SAAL,GAAiBA,SAAjB;AACA,WAAKgJ,SAAL,GAAiBA,SAAjB;AACA,WAAKkH,iBAAL,GAAyBA,iBAAzB;AACH;AACD;AACJ;AACA;;;AACIiN,IAAAA,MAAM,GAAG;AACL,aAAO,IAAIrB,sBAAJ,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7L,IAAAA,WAAW,CAACmN,UAAD,EAAanC,SAAb,EAAwBC,UAAxB,EAAoC;AAC3C,aAAO,IAAIF,yBAAJ,CAA8BC,SAA9B,EAAyCC,UAAzC,EAAqDkC,UAArD,EAAiE,KAAK1d,cAAtE,EAAsF,KAAKM,SAA3F,EAAsG,KAAKgJ,SAA3G,EAAsH,KAAKkH,iBAA3H,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACImN,IAAAA,mBAAmB,CAAC3W,MAAD,EAAS;AACxB,aAAO,IAAIsJ,iCAAJ,CAAsCtJ,MAAtC,EAA8C,KAAKhH,cAAnD,EAAmE,KAAKM,SAAxE,EAAmF,KAAKgJ,SAAxF,EAAmG,KAAKkH,iBAAxG,CAAP;AACH;;AA9BwB;;AAgC7BgN,EAAAA,sBAAsB,CAAC7X,IAAvB,GAA8B,SAASiY,8BAAT,CAAwC/X,CAAxC,EAA2C;AAAE,WAAO,KAAKA,CAAC,IAAI2X,sBAAV,EAAkC1gB,MAAM,CAACgJ,QAAP,CAAgB/I,MAAM,CAACH,aAAvB,CAAlC,EAAyEE,MAAM,CAACgJ,QAAP,CAAgBzI,QAAhB,CAAzE,EAAoGP,MAAM,CAACgJ,QAAP,CAAgB9I,MAAM,CAAC8B,QAAvB,CAApG,EAAsIhC,MAAM,CAACgJ,QAAP,CAAgBqE,gBAAhB,CAAtI,CAAP;AAAkL,GAA7P;;AACAqT,EAAAA,sBAAsB,CAACzX,KAAvB,GAA+BxI,EAAE,CAACyI,kBAAH,CAAsB;AAAEC,IAAAA,OAAO,EAAE,SAAS2X,8BAAT,GAA0C;AAAE,aAAO,IAAIJ,sBAAJ,CAA2BjgB,EAAE,CAACuI,QAAH,CAAYpJ,EAAE,CAACE,aAAf,CAA3B,EAA0DW,EAAE,CAACuI,QAAH,CAAY1I,IAAI,CAACC,QAAjB,CAA1D,EAAsFE,EAAE,CAACuI,QAAH,CAAYnH,EAAE,CAACG,QAAf,CAAtF,EAAgHvB,EAAE,CAACuI,QAAH,CAAYqE,gBAAZ,CAAhH,CAAP;AAAwJ,KAA/M;AAAiNjE,IAAAA,KAAK,EAAEsX,sBAAxN;AAAgPrX,IAAAA,UAAU,EAAE;AAA5P,GAAtB,CAA/B;SAjCMqX,sB;;;AAwCN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOxa,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAMsE,CANrF;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,IAAI6a,YAAY,GAAG,CAAnB,C,CACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,O;AAAN,QAAMA,OAAN,CAAc;AACV/d,IAAAA,WAAW;AACX;AACAge,IAAAA,gBAFW,EAEOvN,iBAFP,EAE0BwN,yBAF1B,EAEqDC,gBAFrD,EAEuE3S,mBAFvE,EAE4F4S,SAF5F,EAEuG3b,OAFvG,EAEgHjC,SAFhH,EAE2H6d,eAF3H,EAE4I5S,SAF5I,EAEuJC,uBAFvJ,EAEgL;AACvL,WAAKuS,gBAAL,GAAwBA,gBAAxB;AACA,WAAKvN,iBAAL,GAAyBA,iBAAzB;AACA,WAAKwN,yBAAL,GAAiCA,yBAAjC;AACA,WAAKC,gBAAL,GAAwBA,gBAAxB;AACA,WAAK3S,mBAAL,GAA2BA,mBAA3B;AACA,WAAK4S,SAAL,GAAiBA,SAAjB;AACA,WAAK3b,OAAL,GAAeA,OAAf;AACA,WAAKjC,SAAL,GAAiBA,SAAjB;AACA,WAAK6d,eAAL,GAAuBA,eAAvB;AACA,WAAK5S,SAAL,GAAiBA,SAAjB;AACA,WAAKC,uBAAL,GAA+BA,uBAA/B;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI4S,IAAAA,MAAM,CAAC5Y,MAAD,EAAS;AACX,YAAM6Y,IAAI,GAAG,KAAKC,kBAAL,EAAb;;AACA,YAAMC,IAAI,GAAG,KAAKC,kBAAL,CAAwBH,IAAxB,CAAb;;AACA,YAAMI,YAAY,GAAG,KAAKC,mBAAL,CAAyBH,IAAzB,CAArB;;AACA,YAAMI,aAAa,GAAG,IAAIvY,aAAJ,CAAkBZ,MAAlB,CAAtB;AACAmZ,MAAAA,aAAa,CAACpQ,SAAd,GAA0BoQ,aAAa,CAACpQ,SAAd,IAA2B,KAAK4P,eAAL,CAAqBrW,KAA1E;AACA,aAAO,IAAIoD,UAAJ,CAAeuT,YAAf,EAA6BJ,IAA7B,EAAmCE,IAAnC,EAAyCI,aAAzC,EAAwD,KAAKpc,OAA7D,EAAsE,KAAK+I,mBAA3E,EAAgG,KAAKhL,SAArG,EAAgH,KAAKiL,SAArH,EAAgI,KAAKC,uBAArI,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI+H,IAAAA,QAAQ,GAAG;AACP,aAAO,KAAK0K,gBAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACIO,IAAAA,kBAAkB,CAACH,IAAD,EAAO;AACrB,YAAME,IAAI,GAAG,KAAKje,SAAL,CAAewK,aAAf,CAA6B,KAA7B,CAAb;;AACAyT,MAAAA,IAAI,CAACK,EAAL,GAAW,eAAcf,YAAY,EAAG,EAAxC;AACAU,MAAAA,IAAI,CAACxd,SAAL,CAAeC,GAAf,CAAmB,kBAAnB;AACAqd,MAAAA,IAAI,CAACrT,WAAL,CAAiBuT,IAAjB;AACA,aAAOA,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACID,IAAAA,kBAAkB,GAAG;AACjB,YAAMD,IAAI,GAAG,KAAK/d,SAAL,CAAewK,aAAf,CAA6B,KAA7B,CAAb;;AACA,WAAK0F,iBAAL,CAAuBhG,mBAAvB,GAA6CQ,WAA7C,CAAyDqT,IAAzD;;AACA,aAAOA,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIK,IAAAA,mBAAmB,CAACH,IAAD,EAAO;AACtB;AACA;AACA,UAAI,CAAC,KAAKM,OAAV,EAAmB;AACf,aAAKA,OAAL,GAAe,KAAKX,SAAL,CAAeY,GAAf,CAAmBjhB,cAAnB,CAAf;AACH;;AACD,aAAO,IAAIqB,eAAJ,CAAoBqf,IAApB,EAA0B,KAAKP,yBAA/B,EAA0D,KAAKa,OAA/D,EAAwE,KAAKX,SAA7E,EAAwF,KAAK5d,SAA7F,CAAP;AACH;;AAtES;;AAwEdwd,EAAAA,OAAO,CAACnY,IAAR,GAAe,SAASoZ,eAAT,CAAyBlZ,CAAzB,EAA4B;AAAE,WAAO,KAAKA,CAAC,IAAIiY,OAAV,EAAmBhhB,MAAM,CAACgJ,QAAP,CAAgBT,qBAAhB,CAAnB,EAA2DvI,MAAM,CAACgJ,QAAP,CAAgBqE,gBAAhB,CAA3D,EAA8FrN,MAAM,CAACgJ,QAAP,CAAgBhJ,MAAM,CAACgB,wBAAvB,CAA9F,EAAgJhB,MAAM,CAACgJ,QAAP,CAAgB0X,sBAAhB,CAAhJ,EAAyL1gB,MAAM,CAACgJ,QAAP,CAAgB2C,yBAAhB,CAAzL,EAAqO3L,MAAM,CAACgJ,QAAP,CAAgBhJ,MAAM,CAACiB,QAAvB,CAArO,EAAuQjB,MAAM,CAACgJ,QAAP,CAAgBhJ,MAAM,CAACW,MAAvB,CAAvQ,EAAuSX,MAAM,CAACgJ,QAAP,CAAgBzI,QAAhB,CAAvS,EAAkUP,MAAM,CAACgJ,QAAP,CAAgB7I,MAAM,CAAC+B,cAAvB,CAAlU,EAA0WlC,MAAM,CAACgJ,QAAP,CAAgB5I,MAAM,CAACI,QAAvB,CAA1W,EAA4YR,MAAM,CAACgJ,QAAP,CAAgBuD,6BAAhB,CAA5Y,CAAP;AAAqc,GAAlf;;AACAyU,EAAAA,OAAO,CAAC/X,KAAR,GAAgB,aAAcjJ,MAAM,CAACkJ,kBAAP,CAA0B;AAAEE,IAAAA,KAAK,EAAE4X,OAAT;AAAkB7X,IAAAA,OAAO,EAAE6X,OAAO,CAACnY;AAAnC,GAA1B,CAA9B;SAzEMmY,O;;;AAuFN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAO9a,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAKoH,CALnI;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMgc,mBAAmB,GAAG,CACxB;AACI5X,EAAAA,OAAO,EAAE,OADb;AAEIC,EAAAA,OAAO,EAAE,QAFb;AAGIC,EAAAA,QAAQ,EAAE,OAHd;AAIIC,EAAAA,QAAQ,EAAE;AAJd,CADwB,EAOxB;AACIH,EAAAA,OAAO,EAAE,OADb;AAEIC,EAAAA,OAAO,EAAE,KAFb;AAGIC,EAAAA,QAAQ,EAAE,OAHd;AAIIC,EAAAA,QAAQ,EAAE;AAJd,CAPwB,EAaxB;AACIH,EAAAA,OAAO,EAAE,KADb;AAEIC,EAAAA,OAAO,EAAE,KAFb;AAGIC,EAAAA,QAAQ,EAAE,KAHd;AAIIC,EAAAA,QAAQ,EAAE;AAJd,CAbwB,EAmBxB;AACIH,EAAAA,OAAO,EAAE,KADb;AAEIC,EAAAA,OAAO,EAAE,QAFb;AAGIC,EAAAA,QAAQ,EAAE,KAHd;AAIIC,EAAAA,QAAQ,EAAE;AAJd,CAnBwB,CAA5B;AA0BA;;AACA,MAAM0X,qCAAqC,gBAAG,IAAIjhB,cAAJ,CAAmB,uCAAnB,CAA9C;AACA;AACA;AACA;AACA;;IACMkhB,gB;AAAN,QAAMA,gBAAN,CAAuB;AACnBnf,IAAAA,WAAW;AACX;AACA2d,IAAAA,UAFW,EAEC;AACR,WAAKA,UAAL,GAAkBA,UAAlB;AACH;;AALkB;;AAOvBwB,EAAAA,gBAAgB,CAACvZ,IAAjB,GAAwB,SAASwZ,wBAAT,CAAkCtZ,CAAlC,EAAqC;AAAE,WAAO,KAAKA,CAAC,IAAIqZ,gBAAV,EAA4BpiB,MAAM,CAACsiB,iBAAP,CAAyBtiB,MAAM,CAACc,UAAhC,CAA5B,CAAP;AAAkF,GAAjJ;;AACAshB,EAAAA,gBAAgB,CAACG,IAAjB,GAAwB,aAAcviB,MAAM,CAACwiB,iBAAP,CAAyB;AAAE1V,IAAAA,IAAI,EAAEsV,gBAAR;AAA0BK,IAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,oBAAL,EAA2B,EAA3B,CAAD,EAAiC,CAAC,EAAD,EAAK,gBAAL,EAAuB,EAAvB,CAAjC,EAA6D,CAAC,EAAD,EAAK,kBAAL,EAAyB,EAAzB,CAA7D,CAArC;AAAiIC,IAAAA,QAAQ,EAAE,CAAC,kBAAD;AAA3I,GAAzB,CAAtC;SARMN,gB;;;AAYN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOlc,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAMwD,CANvE;AAOA;AACA;AACA;AACA;;;IACMyc,mB;AAAN,QAAMA,mBAAN,CAA0B;AACtB;AACA1f,IAAAA,WAAW,CAAC2f,QAAD,EAAWC,WAAX,EAAwBC,gBAAxB,EAA0CC,qBAA1C,EAAiEC,IAAjE,EAAuE;AAC9E,WAAKJ,QAAL,GAAgBA,QAAhB;AACA,WAAKI,IAAL,GAAYA,IAAZ;AACA,WAAKC,YAAL,GAAoB,KAApB;AACA,WAAKC,aAAL,GAAqB,KAArB;AACA,WAAKpP,cAAL,GAAsB,KAAtB;AACA,WAAKqP,mBAAL,GAA2B,KAA3B;AACA,WAAKC,KAAL,GAAa,KAAb;AACA,WAAKC,qBAAL,GAA6B7gB,YAAY,CAACwM,KAA1C;AACA,WAAKsU,mBAAL,GAA2B9gB,YAAY,CAACwM,KAAxC;AACA,WAAKuU,mBAAL,GAA2B/gB,YAAY,CAACwM,KAAxC;AACA,WAAKwU,qBAAL,GAA6BhhB,YAAY,CAACwM,KAA1C;AACA;;AACA,WAAKyU,cAAL,GAAsB,CAAtB;AACA;;AACA,WAAKC,IAAL,GAAY,KAAZ;AACA;;AACA,WAAKC,YAAL,GAAoB,KAApB;AACA;;AACA,WAAKhT,aAAL,GAAqB,IAAIvP,YAAJ,EAArB;AACA;;AACA,WAAKwiB,cAAL,GAAsB,IAAIxiB,YAAJ,EAAtB;AACA;;AACA,WAAKqC,MAAL,GAAc,IAAIrC,YAAJ,EAAd;AACA;;AACA,WAAK4E,MAAL,GAAc,IAAI5E,YAAJ,EAAd;AACA;;AACA,WAAKyiB,cAAL,GAAsB,IAAIziB,YAAJ,EAAtB;AACA;;AACA,WAAK0iB,mBAAL,GAA2B,IAAI1iB,YAAJ,EAA3B;AACA,WAAK2iB,eAAL,GAAuB,IAAI1hB,cAAJ,CAAmBwgB,WAAnB,EAAgCC,gBAAhC,CAAvB;AACA,WAAKkB,sBAAL,GAA8BjB,qBAA9B;AACA,WAAKxZ,cAAL,GAAsB,KAAKya,sBAAL,EAAtB;AACH;AACD;;;AACW,QAAP5Z,OAAO,GAAG;AAAE,aAAO,KAAKkK,QAAZ;AAAuB;;AAC5B,QAAPlK,OAAO,CAACA,OAAD,EAAU;AACjB,WAAKkK,QAAL,GAAgBlK,OAAhB;;AACA,UAAI,KAAK6Z,SAAT,EAAoB;AAChB,aAAKC,uBAAL,CAA6B,KAAKD,SAAlC;AACH;AACJ;AACD;;;AACW,QAAP5Z,OAAO,GAAG;AAAE,aAAO,KAAKkK,QAAZ;AAAuB;;AAC5B,QAAPlK,OAAO,CAACA,OAAD,EAAU;AACjB,WAAKkK,QAAL,GAAgBlK,OAAhB;;AACA,UAAI,KAAK4Z,SAAT,EAAoB;AAChB,aAAKC,uBAAL,CAA6B,KAAKD,SAAlC;AACH;AACJ;AACD;;;AACe,QAAXxa,WAAW,GAAG;AAAE,aAAO,KAAKwZ,YAAZ;AAA2B;;AAChC,QAAXxZ,WAAW,CAACuB,KAAD,EAAQ;AAAE,WAAKiY,YAAL,GAAoBrhB,qBAAqB,CAACoJ,KAAD,CAAzC;AAAmD;AAC5E;;;AACgB,QAAZmZ,YAAY,GAAG;AAAE,aAAO,KAAKjB,aAAZ;AAA4B;;AACjC,QAAZiB,YAAY,CAACnZ,KAAD,EAAQ;AAAE,WAAKkY,aAAL,GAAqBthB,qBAAqB,CAACoJ,KAAD,CAA1C;AAAoD;AAC9E;;;AACsB,QAAlB6M,kBAAkB,GAAG;AAAE,aAAO,KAAKsL,mBAAZ;AAAkC;;AACvC,QAAlBtL,kBAAkB,CAAC7M,KAAD,EAAQ;AAC1B,WAAKmY,mBAAL,GAA2BvhB,qBAAqB,CAACoJ,KAAD,CAAhD;AACH;AACD;;;AACiB,QAAb+M,aAAa,GAAG;AAAE,aAAO,KAAKjE,cAAZ;AAA6B;;AAClC,QAAbiE,aAAa,CAAC/M,KAAD,EAAQ;AAAE,WAAK8I,cAAL,GAAsBlS,qBAAqB,CAACoJ,KAAD,CAA3C;AAAqD;AAChF;;;AACQ,QAAJK,IAAI,GAAG;AAAE,aAAO,KAAK+X,KAAZ;AAAoB;;AACzB,QAAJ/X,IAAI,CAACL,KAAD,EAAQ;AAAE,WAAKoY,KAAL,GAAaxhB,qBAAqB,CAACoJ,KAAD,CAAlC;AAA4C;AAC9D;;;AACc,QAAV/E,UAAU,GAAG;AACb,aAAO,KAAKJ,WAAZ;AACH;AACD;;;AACO,QAAH2L,GAAG,GAAG;AACN,aAAO,KAAKwR,IAAL,GAAY,KAAKA,IAAL,CAAUhY,KAAtB,GAA8B,KAArC;AACH;;AACDI,IAAAA,WAAW,GAAG;AACV,WAAKkY,mBAAL,CAAyB1c,WAAzB;;AACA,WAAK2c,mBAAL,CAAyB3c,WAAzB;;AACA,WAAKyc,qBAAL,CAA2Bzc,WAA3B;;AACA,WAAK4c,qBAAL,CAA2B5c,WAA3B;;AACA,UAAI,KAAKf,WAAT,EAAsB;AAClB,aAAKA,WAAL,CAAiBsK,OAAjB;AACH;AACJ;;AACDiU,IAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAI,KAAKJ,SAAT,EAAoB;AAChB,aAAKC,uBAAL,CAA6B,KAAKD,SAAlC;;AACA,aAAKpe,WAAL,CAAiBuL,UAAjB,CAA4B;AACxBhM,UAAAA,KAAK,EAAE,KAAKA,KADY;AAExB2M,UAAAA,QAAQ,EAAE,KAAKA,QAFS;AAGxB7M,UAAAA,MAAM,EAAE,KAAKA,MAHW;AAIxB8M,UAAAA,SAAS,EAAE,KAAKA;AAJQ,SAA5B;;AAMA,YAAIqS,OAAO,CAAC,QAAD,CAAP,IAAqB,KAAKX,IAA9B,EAAoC;AAChC,eAAKO,SAAL,CAAehT,KAAf;AACH;AACJ;;AACD,UAAIoT,OAAO,CAAC,MAAD,CAAX,EAAqB;AACjB,aAAKX,IAAL,GAAY,KAAKY,cAAL,EAAZ,GAAoC,KAAKC,cAAL,EAApC;AACH;AACJ;AACD;;;AACAC,IAAAA,cAAc,GAAG;AACb,UAAI,CAAC,KAAK7P,SAAN,IAAmB,CAAC,KAAKA,SAAL,CAAelJ,MAAvC,EAA+C;AAC3C,aAAKkJ,SAAL,GAAiBuN,mBAAjB;AACH;;AACD,YAAMjc,UAAU,GAAG,KAAKJ,WAAL,GAAmB,KAAK+c,QAAL,CAActB,MAAd,CAAqB,KAAKmD,YAAL,EAArB,CAAtC;;AACA,WAAKnB,mBAAL,GAA2Brd,UAAU,CAAC2K,WAAX,GAAyBrK,SAAzB,CAAmC,MAAM,KAAK9C,MAAL,CAAYihB,IAAZ,EAAzC,CAA3B;AACA,WAAKnB,mBAAL,GAA2Btd,UAAU,CAAC4K,WAAX,GAAyBtK,SAAzB,CAAmC,MAAM,KAAKP,MAAL,CAAY0e,IAAZ,EAAzC,CAA3B;AACAze,MAAAA,UAAU,CAAC6K,aAAX,GAA2BvK,SAA3B,CAAsCsF,KAAD,IAAW;AAC5C,aAAKgY,cAAL,CAAoB3X,IAApB,CAAyBL,KAAzB;;AACA,YAAIA,KAAK,CAAC8Y,OAAN,KAAkB9hB,MAAlB,IAA4B,CAAC,KAAK8gB,YAAlC,IAAkD,CAAC7gB,cAAc,CAAC+I,KAAD,CAArE,EAA8E;AAC1EA,UAAAA,KAAK,CAAC+Y,cAAN;;AACA,eAAKL,cAAL;AACH;AACJ,OAND;;AAOA,WAAK1e,WAAL,CAAiBkL,oBAAjB,GAAwCxK,SAAxC,CAAmDsF,KAAD,IAAW;AACzD,aAAKiY,mBAAL,CAAyB5X,IAAzB,CAA8BL,KAA9B;AACH,OAFD;AAGH;AACD;;;AACA4Y,IAAAA,YAAY,GAAG;AACX,YAAMrV,gBAAgB,GAAG,KAAK6U,SAAL,GACrB,KAAK7U,gBAAL,IAAyB,KAAKyV,uBAAL,EAD7B;;AAEA,YAAMhD,aAAa,GAAG,IAAIvY,aAAJ,CAAkB;AACpCmI,QAAAA,SAAS,EAAE,KAAKuR,IADoB;AAEpC5T,QAAAA,gBAFoC;AAGpC7F,QAAAA,cAAc,EAAE,KAAKA,cAHe;AAIpCE,QAAAA,WAAW,EAAE,KAAKA;AAJkB,OAAlB,CAAtB;;AAMA,UAAI,KAAKrE,KAAL,IAAc,KAAKA,KAAL,KAAe,CAAjC,EAAoC;AAChCyc,QAAAA,aAAa,CAACzc,KAAd,GAAsB,KAAKA,KAA3B;AACH;;AACD,UAAI,KAAKF,MAAL,IAAe,KAAKA,MAAL,KAAgB,CAAnC,EAAsC;AAClC2c,QAAAA,aAAa,CAAC3c,MAAd,GAAuB,KAAKA,MAA5B;AACH;;AACD,UAAI,KAAK6M,QAAL,IAAiB,KAAKA,QAAL,KAAkB,CAAvC,EAA0C;AACtC8P,QAAAA,aAAa,CAAC9P,QAAd,GAAyB,KAAKA,QAA9B;AACH;;AACD,UAAI,KAAKC,SAAL,IAAkB,KAAKA,SAAL,KAAmB,CAAzC,EAA4C;AACxC6P,QAAAA,aAAa,CAAC7P,SAAd,GAA0B,KAAKA,SAA/B;AACH;;AACD,UAAI,KAAKtI,aAAT,EAAwB;AACpBmY,QAAAA,aAAa,CAACnY,aAAd,GAA8B,KAAKA,aAAnC;AACH;;AACD,UAAI,KAAKF,UAAT,EAAqB;AACjBqY,QAAAA,aAAa,CAACrY,UAAd,GAA2B,KAAKA,UAAhC;AACH;;AACD,aAAOqY,aAAP;AACH;AACD;;;AACAqC,IAAAA,uBAAuB,CAAC9U,gBAAD,EAAmB;AACtC,YAAMuF,SAAS,GAAG,KAAKA,SAAL,CAAeqI,GAAf,CAAmB8H,eAAe,KAAK;AACrDxa,QAAAA,OAAO,EAAEwa,eAAe,CAACxa,OAD4B;AAErDC,QAAAA,OAAO,EAAEua,eAAe,CAACva,OAF4B;AAGrDC,QAAAA,QAAQ,EAAEsa,eAAe,CAACta,QAH2B;AAIrDC,QAAAA,QAAQ,EAAEqa,eAAe,CAACra,QAJ2B;AAKrDL,QAAAA,OAAO,EAAE0a,eAAe,CAAC1a,OAAhB,IAA2B,KAAKA,OALY;AAMrDC,QAAAA,OAAO,EAAEya,eAAe,CAACza,OAAhB,IAA2B,KAAKA,OANY;AAOrDb,QAAAA,UAAU,EAAEsb,eAAe,CAACtb,UAAhB,IAA8BQ;AAPW,OAAL,CAAlC,CAAlB;AASA,aAAOoF,gBAAgB,CAClBsF,SADE,CACQ,KAAKxK,MAAL,CAAY0W,UADpB,EAEFnJ,aAFE,CAEY9C,SAFZ,EAGFiD,sBAHE,CAGqB,KAAKC,kBAH1B,EAIFG,QAJE,CAIO,KAAK3M,IAJZ,EAKFyM,iBALE,CAKgB,KAAKC,aALrB,EAMFL,kBANE,CAMiB,KAAK+L,cANtB,EAOFvL,kBAPE,CAOiB,KAAKiM,YAPtB,EAQF3L,qBARE,CAQoB,KAAKuM,uBARzB,CAAP;AASH;AACD;;;AACAF,IAAAA,uBAAuB,GAAG;AACtB,YAAM1T,QAAQ,GAAG,KAAKyR,QAAL,CAAcnM,QAAd,GAAyBoK,mBAAzB,CAA6C,KAAK3W,MAAL,CAAY0W,UAAzD,CAAjB;;AACA,WAAKsD,uBAAL,CAA6B/S,QAA7B;;AACA,aAAOA,QAAP;AACH;AACD;;;AACAmT,IAAAA,cAAc,GAAG;AACb,UAAI,CAAC,KAAKze,WAAV,EAAuB;AACnB,aAAK2e,cAAL;AACH,OAFD,MAGK;AACD;AACA,aAAK3e,WAAL,CAAiBmL,SAAjB,GAA6BvH,WAA7B,GAA2C,KAAKA,WAAhD;AACH;;AACD,UAAI,CAAC,KAAK5D,WAAL,CAAiBC,WAAjB,EAAL,EAAqC;AACjC,aAAKD,WAAL,CAAiBpC,MAAjB,CAAwB,KAAKsgB,eAA7B;AACH;;AACD,UAAI,KAAKta,WAAT,EAAsB;AAClB,aAAK4Z,qBAAL,GAA6B,KAAKxd,WAAL,CAAiB8K,aAAjB,GAAiCpK,SAAjC,CAA2CsF,KAAK,IAAI;AAC7E,eAAK8E,aAAL,CAAmB+T,IAAnB,CAAwB7Y,KAAxB;AACH,SAF4B,CAA7B;AAGH,OAJD,MAKK;AACD,aAAKwX,qBAAL,CAA2Bzc,WAA3B;AACH;;AACD,WAAK4c,qBAAL,CAA2B5c,WAA3B,GAnBa,CAoBb;AACA;;;AACA,UAAI,KAAKgd,cAAL,CAAoB3X,SAApB,CAA8BR,MAA9B,GAAuC,CAA3C,EAA8C;AAC1C,aAAK+X,qBAAL,GAA6B,KAAKS,SAAL,CAAexP,eAAf,CACxB1E,IADwB,CACnBnN,SAAS,CAAC,MAAM,KAAKghB,cAAL,CAAoB3X,SAApB,CAA8BR,MAA9B,GAAuC,CAA9C,CADU,EAExBlF,SAFwB,CAEdkQ,QAAQ,IAAI;AACvB,eAAKmN,cAAL,CAAoBc,IAApB,CAAyBjO,QAAzB;;AACA,cAAI,KAAKmN,cAAL,CAAoB3X,SAApB,CAA8BR,MAA9B,KAAyC,CAA7C,EAAgD;AAC5C,iBAAK+X,qBAAL,CAA2B5c,WAA3B;AACH;AACJ,SAP4B,CAA7B;AAQH;AACJ;AACD;;;AACA2d,IAAAA,cAAc,GAAG;AACb,UAAI,KAAK1e,WAAT,EAAsB;AAClB,aAAKA,WAAL,CAAiBG,MAAjB;AACH;;AACD,WAAKqd,qBAAL,CAA2Bzc,WAA3B;;AACA,WAAK4c,qBAAL,CAA2B5c,WAA3B;AACH;;AA5NqB;;AA8N1B+b,EAAAA,mBAAmB,CAAC9Z,IAApB,GAA2B,SAASmc,2BAAT,CAAqCjc,CAArC,EAAwC;AAAE,WAAO,KAAKA,CAAC,IAAI4Z,mBAAV,EAA+B3iB,MAAM,CAACsiB,iBAAP,CAAyBtB,OAAzB,CAA/B,EAAkEhhB,MAAM,CAACsiB,iBAAP,CAAyBtiB,MAAM,CAACqB,WAAhC,CAAlE,EAAgHrB,MAAM,CAACsiB,iBAAP,CAAyBtiB,MAAM,CAACsB,gBAAhC,CAAhH,EAAmKtB,MAAM,CAACsiB,iBAAP,CAAyBH,qCAAzB,CAAnK,EAAoOniB,MAAM,CAACsiB,iBAAP,CAAyBniB,MAAM,CAAC+B,cAAhC,EAAgD,CAAhD,CAApO,CAAP;AAAiS,GAAtW;;AACAygB,EAAAA,mBAAmB,CAACJ,IAApB,GAA2B,aAAcviB,MAAM,CAACwiB,iBAAP,CAAyB;AAAE1V,IAAAA,IAAI,EAAE6V,mBAAR;AAA6BF,IAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,uBAAL,EAA8B,EAA9B,CAAD,EAAoC,CAAC,EAAD,EAAK,mBAAL,EAA0B,EAA1B,CAApC,EAAmE,CAAC,EAAD,EAAK,qBAAL,EAA4B,EAA5B,CAAnE,CAAxC;AAA6IwC,IAAAA,MAAM,EAAE;AAAExB,MAAAA,cAAc,EAAE,CAAC,mCAAD,EAAsC,gBAAtC,CAAlB;AAA2EC,MAAAA,IAAI,EAAE,CAAC,yBAAD,EAA4B,MAA5B,CAAjF;AAAsHC,MAAAA,YAAY,EAAE,CAAC,iCAAD,EAAoC,cAApC,CAApI;AAAyLpa,MAAAA,cAAc,EAAE,CAAC,mCAAD,EAAsC,gBAAtC,CAAzM;AAAkQa,MAAAA,OAAO,EAAE,CAAC,4BAAD,EAA+B,SAA/B,CAA3Q;AAAsTC,MAAAA,OAAO,EAAE,CAAC,4BAAD,EAA+B,SAA/B,CAA/T;AAA0WZ,MAAAA,WAAW,EAAE,CAAC,gCAAD,EAAmC,aAAnC,CAAvX;AAA0a0a,MAAAA,YAAY,EAAE,CAAC,iCAAD,EAAoC,cAApC,CAAxb;AAA6etM,MAAAA,kBAAkB,EAAE,CAAC,uCAAD,EAA0C,oBAA1C,CAAjgB;AAAkkBE,MAAAA,aAAa,EAAE,CAAC,kCAAD,EAAqC,eAArC,CAAjlB;AAAwoB1M,MAAAA,IAAI,EAAE,CAAC,yBAAD,EAA4B,MAA5B,CAA9oB;AAAmrBsJ,MAAAA,SAAS,EAAE,CAAC,8BAAD,EAAiC,WAAjC,CAA9rB;AAA6uBzK,MAAAA,MAAM,EAAE,CAAC,2BAAD,EAA8B,QAA9B,CAArvB;AAA8xBkF,MAAAA,gBAAgB,EAAE,CAAC,qCAAD,EAAwC,kBAAxC,CAAhzB;AAA62BhK,MAAAA,KAAK,EAAE,CAAC,0BAAD,EAA6B,OAA7B,CAAp3B;AAA25BF,MAAAA,MAAM,EAAE,CAAC,2BAAD,EAA8B,QAA9B,CAAn6B;AAA48B6M,MAAAA,QAAQ,EAAE,CAAC,6BAAD,EAAgC,UAAhC,CAAt9B;AAAmgCC,MAAAA,SAAS,EAAE,CAAC,8BAAD,EAAiC,WAAjC,CAA9gC;AAA6jCtI,MAAAA,aAAa,EAAE,CAAC,kCAAD,EAAqC,eAArC,CAA5kC;AAAmoCF,MAAAA,UAAU,EAAE,CAAC,+BAAD,EAAkC,YAAlC,CAA/oC;AAAgsCub,MAAAA,uBAAuB,EAAE,CAAC,sCAAD,EAAyC,yBAAzC;AAAztC,KAArJ;AAAq7CG,IAAAA,OAAO,EAAE;AAAEvU,MAAAA,aAAa,EAAE,eAAjB;AAAkCiT,MAAAA,cAAc,EAAE,gBAAlD;AAAoEngB,MAAAA,MAAM,EAAE,QAA5E;AAAsFuC,MAAAA,MAAM,EAAE,QAA9F;AAAwG6d,MAAAA,cAAc,EAAE,gBAAxH;AAA0IC,MAAAA,mBAAmB,EAAE;AAA/J,KAA97C;AAAsnDpB,IAAAA,QAAQ,EAAE,CAAC,qBAAD,CAAhoD;AAAypDyC,IAAAA,QAAQ,EAAE,CAACnlB,MAAM,CAAColB,oBAAR;AAAnqD,GAAzB,CAAzC;SA/NMzC,mB;;;AAoQN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOzc,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAsFC,CAtFhB;AAuFA;;;AACA,SAASmf,sDAAT,CAAgElb,OAAhE,EAAyE;AACrE,SAAO,MAAMA,OAAO,CAAC8W,gBAAR,CAAyBrY,UAAzB,EAAb;AACH;AACD;;;AACA,MAAM0c,8CAA8C,GAAG;AACnDC,EAAAA,OAAO,EAAEpD,qCAD0C;AAEnDqD,EAAAA,IAAI,EAAE,CAACxE,OAAD,CAF6C;AAGnDyE,EAAAA,UAAU,EAAEJ;AAHuC,CAAvD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMK,a;AAAN,QAAMA,aAAN,CAAoB;;AAEpBA,EAAAA,aAAa,CAAC7c,IAAd,GAAqB,SAAS8c,qBAAT,CAA+B5c,CAA/B,EAAkC;AAAE,WAAO,KAAKA,CAAC,IAAI2c,aAAV,GAAP;AAAoC,GAA7F;;AACAA,EAAAA,aAAa,CAACE,IAAd,GAAqB,aAAc5lB,MAAM,CAAC6lB,gBAAP,CAAwB;AAAE/Y,IAAAA,IAAI,EAAE4Y;AAAR,GAAxB,CAAnC;AACAA,EAAAA,aAAa,CAACI,IAAd,GAAqB,aAAc9lB,MAAM,CAAC+lB,gBAAP,CAAwB;AAAEC,IAAAA,SAAS,EAAE,CAChEhF,OADgE,EAEhEsE,8CAFgE,CAAb;AAGpDW,IAAAA,OAAO,EAAE,CAAC,CAAC9jB,UAAD,EAAaG,YAAb,EAA2BvC,eAA3B,CAAD,EAA8CA,eAA9C;AAH2C,GAAxB,CAAnC;SAJM2lB,a;;;AAQN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOxf,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAWO,CAXtB;;AAYA;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOggB,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDlmB,MAAM,CAACmmB,kBAAP,CAA0BT,aAA1B,EAAyC;AAAEU,IAAAA,YAAY,EAAE,YAAY;AAAE,aAAO,CAACzD,mBAAD,EAAsBP,gBAAtB,CAAP;AAAiD,KAA/E;AAAiF6D,IAAAA,OAAO,EAAE,YAAY;AAAE,aAAO,CAAC9jB,UAAD,EAAaG,YAAb,EAA2BvC,eAA3B,CAAP;AAAqD,KAA7J;AAA+JsmB,IAAAA,OAAO,EAAE,YAAY;AAAE,aAAO,CAAC1D,mBAAD,EAAsBP,gBAAtB,EAAwCriB,eAAxC,CAAP;AAAkE;AAAxP,GAAzC,CAAnD;AAA0V,CAAzW;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMumB,0B;AAAN,QAAMA,0BAAN,SAAyCjZ,gBAAzC,CAA0D;AACtDpK,IAAAA,WAAW,CAACO,SAAD,EAAYob,QAAZ,EAAsB;AAC7B,YAAMpb,SAAN,EAAiBob,QAAjB;AACH;;AACDxT,IAAAA,WAAW,GAAG;AACV,YAAMA,WAAN;;AACA,UAAI,KAAKmb,oBAAL,IAA6B,KAAKC,mBAAtC,EAA2D;AACvD,aAAKhjB,SAAL,CAAe6I,mBAAf,CAAmC,KAAKka,oBAAxC,EAA8D,KAAKC,mBAAnE;AACH;AACJ;;AACD7Y,IAAAA,gBAAgB,GAAG;AACf,YAAMA,gBAAN;;AACA,WAAK8Y,gCAAL;;AACA,WAAKC,4BAAL,CAAkC,MAAM,KAAKD,gCAAL,EAAxC;AACH;;AACDA,IAAAA,gCAAgC,GAAG;AAC/B,UAAI,CAAC,KAAKlZ,iBAAV,EAA6B;AACzB;AACH;;AACD,YAAMoZ,iBAAiB,GAAG,KAAKC,oBAAL,EAA1B;AACA,YAAMnG,MAAM,GAAGkG,iBAAiB,IAAI,KAAKnjB,SAAL,CAAea,IAAnD;AACAoc,MAAAA,MAAM,CAACvS,WAAP,CAAmB,KAAKX,iBAAxB;AACH;;AACDmZ,IAAAA,4BAA4B,CAACG,EAAD,EAAK;AAC7B,YAAMC,SAAS,GAAG,KAAKC,aAAL,EAAlB;;AACA,UAAID,SAAJ,EAAe;AACX,YAAI,KAAKN,mBAAT,EAA8B;AAC1B,eAAKhjB,SAAL,CAAe6I,mBAAf,CAAmCya,SAAnC,EAA8C,KAAKN,mBAAnD;AACH;;AACD,aAAKhjB,SAAL,CAAe4I,gBAAf,CAAgC0a,SAAhC,EAA2CD,EAA3C;;AACA,aAAKL,mBAAL,GAA2BK,EAA3B;AACH;AACJ;;AACDE,IAAAA,aAAa,GAAG;AACZ,UAAI,CAAC,KAAKR,oBAAV,EAAgC;AAC5B,cAAM/iB,SAAS,GAAG,KAAKA,SAAvB;;AACA,YAAIA,SAAS,CAACwjB,iBAAd,EAAiC;AAC7B,eAAKT,oBAAL,GAA4B,kBAA5B;AACH,SAFD,MAGK,IAAI/iB,SAAS,CAACyjB,uBAAd,EAAuC;AACxC,eAAKV,oBAAL,GAA4B,wBAA5B;AACH,SAFI,MAGA,IAAI/iB,SAAS,CAAC0jB,oBAAd,EAAoC;AACrC,eAAKX,oBAAL,GAA4B,qBAA5B;AACH,SAFI,MAGA,IAAI/iB,SAAS,CAAC2jB,mBAAd,EAAmC;AACpC,eAAKZ,oBAAL,GAA4B,oBAA5B;AACH;AACJ;;AACD,aAAO,KAAKA,oBAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACIK,IAAAA,oBAAoB,GAAG;AACnB,YAAMpjB,SAAS,GAAG,KAAKA,SAAvB;AACA,aAAOA,SAAS,CAACmjB,iBAAV,IACHnjB,SAAS,CAAC4jB,uBADP,IAEH5jB,SAAS,CAAC6jB,oBAFP,IAGH7jB,SAAS,CAAC8jB,mBAHP,IAIH,IAJJ;AAKH;;AA9DqD;;AAgE1DhB,EAAAA,0BAA0B,CAACzd,IAA3B,GAAkC,SAAS0e,kCAAT,CAA4Cxe,CAA5C,EAA+C;AAAE,WAAO,KAAKA,CAAC,IAAIud,0BAAV,EAAsCtmB,MAAM,CAACgJ,QAAP,CAAgBzI,QAAhB,CAAtC,EAAiEP,MAAM,CAACgJ,QAAP,CAAgB9I,MAAM,CAAC8B,QAAvB,CAAjE,CAAP;AAA4G,GAA/L;;AACAskB,EAAAA,0BAA0B,CAACrd,KAA3B,GAAmCxI,EAAE,CAACyI,kBAAH,CAAsB;AAAEC,IAAAA,OAAO,EAAE,SAASoe,kCAAT,GAA8C;AAAE,aAAO,IAAIjB,0BAAJ,CAA+B7lB,EAAE,CAACuI,QAAH,CAAY1I,IAAI,CAACC,QAAjB,CAA/B,EAA2DE,EAAE,CAACuI,QAAH,CAAYnH,EAAE,CAACG,QAAf,CAA3D,CAAP;AAA8F,KAAzJ;AAA2JoH,IAAAA,KAAK,EAAEkd,0BAAlK;AAA8Ljd,IAAAA,UAAU,EAAE;AAA1M,GAAtB,CAAnC;SAjEMid,0B;;;AAsEN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOpgB,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAM0C,CANzD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASlD,mBAAT,EAA8B2f,mBAA9B,EAAmDP,gBAAnD,EAAqE7c,mBAArE,EAA0FoF,8BAA1F,EAA0H6T,yBAA1H,EAAqJvU,sBAArJ,EAA6KuJ,iCAA7K,EAAgN8S,0BAAhN,EAA4OhH,sBAA5O,EAAoQzY,kBAApQ,EAAwRma,OAAxR,EAAiS1X,aAAjS,EAAgT+D,gBAAhT,EAAkU1B,yBAAlU,EAA6V+Z,aAA7V,EAA4WnZ,6BAA5W,EAA2YmU,sBAA3Y,EAAmatS,UAAna,EAA+arG,wBAA/a,EAAycQ,qBAAzc,EAAgemC,mBAAhe,EAAqfO,0BAArf,EAAihBH,wBAAjhB,EAA2iBqX,qCAAqC,IAAIqF,2CAAplB,EAAioBnC,sDAAsD,IAAIoC,2CAA3rB,EAAwuBnC,8CAA8C,IAAIoC,2CAA1xB,EAAu0Bxc,qBAAqB,IAAIyc,2CAAh2B","sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, Platform, _isTestEnvironment } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target) ||\n                    overlayRef.overlayElement.contains(origin)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('pointerdown', this._pointerDownListener, true);\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        const finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                this._disposeBackdrop(backdropToDetach);\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            if (backdrop.parentNode) {\n                backdrop.parentNode.removeChild(backdrop);\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height)\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n        this.onPositionChange = this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location },\n    { type: OverlayOutsideClickDispatcher }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location }, { type: OverlayOutsideClickDispatcher }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    disableClose: [{ type: Input, args: ['cdkConnectedOverlayDisableClose',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], disableClose: [{\n            type: Input,\n            args: ['cdkConnectedOverlayDisableClose']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };\n\n"]},"metadata":{},"sourceType":"module"}