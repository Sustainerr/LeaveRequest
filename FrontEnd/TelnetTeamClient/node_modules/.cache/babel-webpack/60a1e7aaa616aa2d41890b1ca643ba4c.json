{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"app/services/shared\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, authenticationService) {\n      this.router = router;\n      this.authenticationService = authenticationService;\n      this.userId = 0;\n    }\n\n    canActivate(route, state) {\n      // check if user is logged in\n      if (this.authenticationService.isAuthenticated()) {\n        const routeFunction = route.data['function'];\n\n        if (routeFunction === undefined) {\n          return true;\n        }\n\n        const profile = this.authenticationService.getProfile();\n        const fonctions = profile.currentUser.functionsId;\n\n        if (profile) {\n          // check if route is restricted by function\n          if (fonctions.indexOf(routeFunction) === -1) {\n            // user not authorised so redirect to home page\n            this.router.navigate(['/dashboard']);\n            return false;\n          } // route is authorised by function\n\n\n          return true;\n        }\n      } // user is not logged in so redirect to login page with the return url\n\n\n      this.router.navigate(['/auth/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n  return AuthGuard;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/guards/auth.guard.ts"],"names":["i0","i1","i2","AuthGuard","constructor","router","authenticationService","userId","canActivate","route","state","isAuthenticated","routeFunction","data","undefined","profile","getProfile","fonctions","currentUser","functionsId","indexOf","navigate","queryParams","returnUrl","url","ɵfac","AuthGuard_Factory","t","ɵɵinject","Router","AuthenticationService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,qBAApB;AACA,WAAaC,SAAb;AAAO,QAAMA,SAAN,CAAgB;AACnBC,IAAAA,WAAW,CAACC,MAAD,EAASC,qBAAT,EAAgC;AACvC,WAAKD,MAAL,GAAcA,MAAd;AACA,WAAKC,qBAAL,GAA6BA,qBAA7B;AACA,WAAKC,MAAL,GAAc,CAAd;AACH;;AACDC,IAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAe;AACtB;AACA,UAAI,KAAKJ,qBAAL,CAA2BK,eAA3B,EAAJ,EAAkD;AAC9C,cAAMC,aAAa,GAAGH,KAAK,CAACI,IAAN,CAAW,UAAX,CAAtB;;AACA,YAAID,aAAa,KAAKE,SAAtB,EAAiC;AAC7B,iBAAO,IAAP;AACH;;AACD,cAAMC,OAAO,GAAG,KAAKT,qBAAL,CAA2BU,UAA3B,EAAhB;AACA,cAAMC,SAAS,GAAGF,OAAO,CAACG,WAAR,CAAoBC,WAAtC;;AACA,YAAIJ,OAAJ,EAAa;AACT;AACA,cAAIE,SAAS,CAACG,OAAV,CAAkBR,aAAlB,MAAqC,CAAC,CAA1C,EAA6C;AACzC;AACA,iBAAKP,MAAL,CAAYgB,QAAZ,CAAqB,CAAC,YAAD,CAArB;AACA,mBAAO,KAAP;AACH,WANQ,CAOT;;;AACA,iBAAO,IAAP;AACH;AACJ,OAnBqB,CAoBtB;;;AACA,WAAKhB,MAAL,CAAYgB,QAAZ,CAAqB,CAAC,aAAD,CAArB,EAAsC;AAAEC,QAAAA,WAAW,EAAE;AAAEC,UAAAA,SAAS,EAAEb,KAAK,CAACc;AAAnB;AAAf,OAAtC;AACA,aAAO,KAAP;AACH;;AA7BkB;;AA+BvBrB,EAAAA,SAAS,CAACsB,IAAV,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAAE,WAAO,KAAKA,CAAC,IAAIxB,SAAV,EAAqBH,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,MAAf,CAArB,EAA6C7B,EAAE,CAAC4B,QAAH,CAAY1B,EAAE,CAAC4B,qBAAf,CAA7C,CAAP;AAA6F,GAA9I;;AACA3B,EAAAA,SAAS,CAAC4B,KAAV,GAAkB,aAAc/B,EAAE,CAACgC,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAE9B,SAAT;AAAoB+B,IAAAA,OAAO,EAAE/B,SAAS,CAACsB;AAAvC,GAAtB,CAAhC;AAhCA,SAAatB,SAAb;AAAA","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"app/services/shared\";\r\nexport class AuthGuard {\r\n    constructor(router, authenticationService) {\r\n        this.router = router;\r\n        this.authenticationService = authenticationService;\r\n        this.userId = 0;\r\n    }\r\n    canActivate(route, state) {\r\n        // check if user is logged in\r\n        if (this.authenticationService.isAuthenticated()) {\r\n            const routeFunction = route.data['function'];\r\n            if (routeFunction === undefined) {\r\n                return true;\r\n            }\r\n            const profile = this.authenticationService.getProfile();\r\n            const fonctions = profile.currentUser.functionsId;\r\n            if (profile) {\r\n                // check if route is restricted by function\r\n                if (fonctions.indexOf(routeFunction) === -1) {\r\n                    // user not authorised so redirect to home page\r\n                    this.router.navigate(['/dashboard']);\r\n                    return false;\r\n                }\r\n                // route is authorised by function\r\n                return true;\r\n            }\r\n        }\r\n        // user is not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/auth/login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}\r\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService)); };\r\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}