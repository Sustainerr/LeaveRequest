{"ast":null,"code":"import { InjectionToken, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Used to generate unique ID for each accordion. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst CDK_ACCORDION = /*#__PURE__*/new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n\nlet CdkAccordion = /*#__PURE__*/(() => {\n  class CdkAccordion {\n    constructor() {\n      /** Emits when the state of the accordion changes */\n      this._stateChanges = new Subject();\n      /** Stream that emits true/false when openAll/closeAll is triggered. */\n\n      this._openCloseAllActions = new Subject();\n      /** A readonly id value to use for unique selection coordination. */\n\n      this.id = `cdk-accordion-${nextId$1++}`;\n      this._multi = false;\n    }\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n\n\n    get multi() {\n      return this._multi;\n    }\n\n    set multi(multi) {\n      this._multi = coerceBooleanProperty(multi);\n    }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n\n\n    openAll() {\n      if (this._multi) {\n        this._openCloseAllActions.next(true);\n      }\n    }\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n\n\n    closeAll() {\n      this._openCloseAllActions.next(false);\n    }\n\n    ngOnChanges(changes) {\n      this._stateChanges.next(changes);\n    }\n\n    ngOnDestroy() {\n      this._stateChanges.complete();\n\n      this._openCloseAllActions.complete();\n    }\n\n  }\n\n  CdkAccordion.ɵfac = function CdkAccordion_Factory(t) {\n    return new (t || CdkAccordion)();\n  };\n\n  CdkAccordion.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkAccordion,\n    selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]],\n    inputs: {\n      multi: \"multi\"\n    },\n    exportAs: [\"cdkAccordion\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_ACCORDION,\n      useExisting: CdkAccordion\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkAccordion;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Used to generate unique ID for each accordion item. */\n\n\nlet nextId = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n\nlet CdkAccordionItem = /*#__PURE__*/(() => {\n  class CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n      this.accordion = accordion;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._expansionDispatcher = _expansionDispatcher;\n      /** Subscription to openAll/closeAll events. */\n\n      this._openCloseAllSubscription = Subscription.EMPTY;\n      /** Event emitted every time the AccordionItem is closed. */\n\n      this.closed = new EventEmitter();\n      /** Event emitted every time the AccordionItem is opened. */\n\n      this.opened = new EventEmitter();\n      /** Event emitted when the AccordionItem is destroyed. */\n\n      this.destroyed = new EventEmitter();\n      /**\n       * Emits whenever the expanded state of the accordion changes.\n       * Primarily used to facilitate two-way binding.\n       * @docs-private\n       */\n\n      this.expandedChange = new EventEmitter();\n      /** The unique AccordionItem id. */\n\n      this.id = `cdk-accordion-child-${nextId++}`;\n      this._expanded = false;\n      this._disabled = false;\n      /** Unregister function for _expansionDispatcher. */\n\n      this._removeUniqueSelectionListener = () => {};\n\n      this._removeUniqueSelectionListener = _expansionDispatcher.listen((id, accordionId) => {\n        if (this.accordion && !this.accordion.multi && this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      }); // When an accordion item is hosted in an accordion, subscribe to open/close events.\n\n      if (this.accordion) {\n        this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n      }\n    }\n    /** Whether the AccordionItem is expanded. */\n\n\n    get expanded() {\n      return this._expanded;\n    }\n\n    set expanded(expanded) {\n      expanded = coerceBooleanProperty(expanded); // Only emit events and update the internal value if the value changes.\n\n      if (this._expanded !== expanded) {\n        this._expanded = expanded;\n        this.expandedChange.emit(expanded);\n\n        if (expanded) {\n          this.opened.emit();\n          /**\n           * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n           * the name value is the id of the accordion.\n           */\n\n          const accordionId = this.accordion ? this.accordion.id : this.id;\n\n          this._expansionDispatcher.notify(this.id, accordionId);\n        } else {\n          this.closed.emit();\n        } // Ensures that the animation will run when the value is set outside of an `@Input`.\n        // This includes cases like the open, close and toggle methods.\n\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Whether the AccordionItem is disabled. */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(disabled) {\n      this._disabled = coerceBooleanProperty(disabled);\n    }\n    /** Emits an event for the accordion item being destroyed. */\n\n\n    ngOnDestroy() {\n      this.opened.complete();\n      this.closed.complete();\n      this.destroyed.emit();\n      this.destroyed.complete();\n\n      this._removeUniqueSelectionListener();\n\n      this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n\n\n    toggle() {\n      if (!this.disabled) {\n        this.expanded = !this.expanded;\n      }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n\n\n    close() {\n      if (!this.disabled) {\n        this.expanded = false;\n      }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n\n\n    open() {\n      if (!this.disabled) {\n        this.expanded = true;\n      }\n    }\n\n    _subscribeToOpenCloseAllActions() {\n      return this.accordion._openCloseAllActions.subscribe(expanded => {\n        // Only change expanded state if item is enabled\n        if (!this.disabled) {\n          this.expanded = expanded;\n        }\n      });\n    }\n\n  }\n\n  CdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) {\n    return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CDK_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher));\n  };\n\n  CdkAccordionItem.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkAccordionItem,\n    selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]],\n    inputs: {\n      expanded: \"expanded\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      closed: \"closed\",\n      opened: \"opened\",\n      destroyed: \"destroyed\",\n      expandedChange: \"expandedChange\"\n    },\n    exportAs: [\"cdkAccordionItem\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([// Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {\n      provide: CDK_ACCORDION,\n      useValue: ɵ0\n    }])]\n  });\n  return CdkAccordionItem;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet CdkAccordionModule = /*#__PURE__*/(() => {\n  class CdkAccordionModule {}\n\n  CdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) {\n    return new (t || CdkAccordionModule)();\n  };\n\n  CdkAccordionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkAccordionModule\n  });\n  CdkAccordionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return CdkAccordionModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, {\n    declarations: [CdkAccordion, CdkAccordionItem],\n    exports: [CdkAccordion, CdkAccordionItem]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule, CDK_ACCORDION as ɵangular_material_src_cdk_accordion_accordion_a };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/accordion.js"],"names":["InjectionToken","Directive","Input","EventEmitter","Optional","Inject","SkipSelf","ChangeDetectorRef","Output","NgModule","UniqueSelectionDispatcher","coerceBooleanProperty","Subject","Subscription","ɵngcc0","ɵngcc1","nextId$1","CDK_ACCORDION","CdkAccordion","constructor","_stateChanges","_openCloseAllActions","id","_multi","multi","openAll","next","closeAll","ngOnChanges","changes","ngOnDestroy","complete","ɵfac","CdkAccordion_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","ngDevMode","nextId","ɵ0","undefined","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","EMPTY","closed","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","expanded","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","toggle","close","open","subscribe","CdkAccordionItem_Factory","ɵɵdirectiveInject","outputs","useValue","CdkAccordionModule","CdkAccordionModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵangular_material_src_cdk_accordion_accordion_a"],"mappings":"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","sourcesContent":["import { InjectionToken, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = `cdk-accordion-${nextId$1++}`;\n        this._multi = false;\n    }\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    get multi() { return this._multi; }\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this._multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n}\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion',\n                providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = `cdk-accordion-child-${nextId++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Whether the AccordionItem is expanded. */\n    get expanded() { return this._expanded; }\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the AccordionItem is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CDK_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: ɵ0 },\n        ])] });\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: Inject, args: [CDK_ACCORDION,] }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                    // registering to the same accordion.\n                    { provide: CDK_ACCORDION, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_ACCORDION]\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); };\nCdkAccordionModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule, CDK_ACCORDION as ɵangular_material_src_cdk_accordion_accordion_a };\n\n"]},"metadata":{},"sourceType":"module"}