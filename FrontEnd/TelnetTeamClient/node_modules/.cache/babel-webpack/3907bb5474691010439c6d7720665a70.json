{"ast":null,"code":"import { EntityParameter } from 'app/models/shared';\nimport * as i0 from \"@angular/core\";\nexport let EntityParameterService = /*#__PURE__*/(() => {\n  class EntityParameterService {\n    constructor() {// do nothing\n    }\n\n    AddEntityParameter(entityParameters, name, value, dbType, direction) {\n      const entityParameter = new EntityParameter();\n      entityParameter.name = name;\n      entityParameter.value = !(value === null || value === undefined) ? value.toString() : '';\n      entityParameter.dbType = dbType;\n      entityParameter.direction = direction;\n      entityParameters.push(entityParameter);\n      return entityParameters;\n    }\n\n    AddEntityParameters(entityParameters, object) {\n      Object.entries(object).forEach(([key, value]) => {\n        const persisted = Reflect.getMetadata('persisted', object, key);\n\n        if (persisted === true) {\n          this.AddEntityParameter(entityParameters, key, !(value === null || value === undefined) ? value.toString() : '', Reflect.getMetadata('type', object, key), Reflect.getMetadata('dir', object, key));\n        }\n      });\n      return entityParameters;\n    }\n\n  }\n\n  EntityParameterService.ɵfac = function EntityParameterService_Factory(t) {\n    return new (t || EntityParameterService)();\n  };\n\n  EntityParameterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EntityParameterService,\n    factory: EntityParameterService.ɵfac\n  });\n  return EntityParameterService;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/services/shared/entity-parameter.service.ts"],"names":["EntityParameter","i0","EntityParameterService","constructor","AddEntityParameter","entityParameters","name","value","dbType","direction","entityParameter","undefined","toString","push","AddEntityParameters","object","Object","entries","forEach","key","persisted","Reflect","getMetadata","ɵfac","EntityParameterService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"AAAA,SAASA,eAAT,QAAgC,mBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,WAAaC,sBAAb;AAAO,QAAMA,sBAAN,CAA6B;AAChCC,IAAAA,WAAW,GAAG,CACV;AACH;;AACDC,IAAAA,kBAAkB,CAACC,gBAAD,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,MAAhC,EAAwCC,SAAxC,EAAmD;AACjE,YAAMC,eAAe,GAAG,IAAIV,eAAJ,EAAxB;AACAU,MAAAA,eAAe,CAACJ,IAAhB,GAAuBA,IAAvB;AACAI,MAAAA,eAAe,CAACH,KAAhB,GAAwB,EAAEA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKI,SAA9B,IAA2CJ,KAAK,CAACK,QAAN,EAA3C,GAA8D,EAAtF;AACAF,MAAAA,eAAe,CAACF,MAAhB,GAAyBA,MAAzB;AACAE,MAAAA,eAAe,CAACD,SAAhB,GAA4BA,SAA5B;AACAJ,MAAAA,gBAAgB,CAACQ,IAAjB,CAAsBH,eAAtB;AACA,aAAOL,gBAAP;AACH;;AACDS,IAAAA,mBAAmB,CAACT,gBAAD,EAAmBU,MAAnB,EAA2B;AAC1CC,MAAAA,MAAM,CAACC,OAAP,CAAeF,MAAf,EAAuBG,OAAvB,CAA+B,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,KAAkB;AAC7C,cAAMa,SAAS,GAAGC,OAAO,CAACC,WAAR,CAAoB,WAApB,EAAiCP,MAAjC,EAAyCI,GAAzC,CAAlB;;AACA,YAAIC,SAAS,KAAK,IAAlB,EAAwB;AACpB,eAAKhB,kBAAL,CAAwBC,gBAAxB,EAA0Cc,GAA1C,EAA+C,EAAEZ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKI,SAA9B,IAA2CJ,KAAK,CAACK,QAAN,EAA3C,GAA8D,EAA7G,EAAiHS,OAAO,CAACC,WAAR,CAAoB,MAApB,EAA4BP,MAA5B,EAAoCI,GAApC,CAAjH,EAA2JE,OAAO,CAACC,WAAR,CAAoB,KAApB,EAA2BP,MAA3B,EAAmCI,GAAnC,CAA3J;AACH;AACJ,OALD;AAMA,aAAOd,gBAAP;AACH;;AArB+B;;AAuBpCH,EAAAA,sBAAsB,CAACqB,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,WAAO,KAAKA,CAAC,IAAIvB,sBAAV,GAAP;AAA6C,GAAxH;;AACAA,EAAAA,sBAAsB,CAACwB,KAAvB,GAA+B,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAE1B,sBAAT;AAAiC2B,IAAAA,OAAO,EAAE3B,sBAAsB,CAACqB;AAAjE,GAAtB,CAA7C;AAxBA,SAAarB,sBAAb;AAAA","sourcesContent":["import { EntityParameter } from 'app/models/shared';\r\nimport * as i0 from \"@angular/core\";\r\nexport class EntityParameterService {\r\n    constructor() {\r\n        // do nothing\r\n    }\r\n    AddEntityParameter(entityParameters, name, value, dbType, direction) {\r\n        const entityParameter = new EntityParameter();\r\n        entityParameter.name = name;\r\n        entityParameter.value = !(value === null || value === undefined) ? value.toString() : '';\r\n        entityParameter.dbType = dbType;\r\n        entityParameter.direction = direction;\r\n        entityParameters.push(entityParameter);\r\n        return entityParameters;\r\n    }\r\n    AddEntityParameters(entityParameters, object) {\r\n        Object.entries(object).forEach(([key, value]) => {\r\n            const persisted = Reflect.getMetadata('persisted', object, key);\r\n            if (persisted === true) {\r\n                this.AddEntityParameter(entityParameters, key, !(value === null || value === undefined) ? value.toString() : '', Reflect.getMetadata('type', object, key), Reflect.getMetadata('dir', object, key));\r\n            }\r\n        });\r\n        return entityParameters;\r\n    }\r\n}\r\nEntityParameterService.ɵfac = function EntityParameterService_Factory(t) { return new (t || EntityParameterService)(); };\r\nEntityParameterService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EntityParameterService, factory: EntityParameterService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}