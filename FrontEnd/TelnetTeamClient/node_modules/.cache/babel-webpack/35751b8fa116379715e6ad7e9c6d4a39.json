{"ast":null,"code":"import { HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GenericService = /*#__PURE__*/(() => {\n  class GenericService {\n    constructor(http) {\n      this.http = http;\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json; charset=utf-8'\n      });\n    }\n\n    getService(url) {\n      return this.http.get(url);\n    }\n\n    getServiceWithDynamicQueryTerm(url, key, val) {\n      return this.http.get(url + '/?' + key + '=' + val);\n    }\n\n    createService(url, param) {\n      const body = JSON.stringify(param);\n      return this.http.post(url, body, {\n        headers: this.headers\n      });\n    }\n\n    uploadService(url, formData) {\n      return this.http.post(url, formData, {\n        reportProgress: true,\n        observe: 'events'\n      });\n    }\n\n    updateService(url, param) {\n      const params = new HttpParams();\n      const body = JSON.stringify(param);\n      return this.http.put(url, body, {\n        params: params\n      });\n    }\n\n    patchService(url, param) {\n      const params = new HttpParams();\n      const body = JSON.stringify(param);\n      return this.http.patch(url, body, {\n        params: params\n      });\n    }\n\n    deleteService(url, param) {\n      const params = new HttpParams();\n\n      for (const key in param) {\n        if (param.hasOwnProperty(key)) {\n          const val = param[key];\n          params.set(key, val);\n        }\n      }\n\n      return this.http.delete(url, {\n        params: params\n      });\n    }\n\n    deleteServiceWithId(url, key, val) {\n      const params = new HttpParams();\n      return this.http.delete(url + '/?' + key + '=' + val, {\n        params: params\n      });\n    }\n\n  }\n\n  GenericService.ɵfac = function GenericService_Factory(t) {\n    return new (t || GenericService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GenericService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GenericService,\n    factory: GenericService.ɵfac\n  });\n  return GenericService;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/services/shared/generic.service.ts"],"names":["HttpParams","HttpHeaders","i0","i1","GenericService","constructor","http","headers","getService","url","get","getServiceWithDynamicQueryTerm","key","val","createService","param","body","JSON","stringify","post","uploadService","formData","reportProgress","observe","updateService","params","put","patchService","patch","deleteService","hasOwnProperty","set","delete","deleteServiceWithId","ɵfac","GenericService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class GenericService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.headers = new HttpHeaders({ 'Content-Type': 'application/json; charset=utf-8' });\r\n    }\r\n    getService(url) {\r\n        return this.http.get(url);\r\n    }\r\n    getServiceWithDynamicQueryTerm(url, key, val) {\r\n        return this.http.get(url + '/?' + key + '=' + val);\r\n    }\r\n    createService(url, param) {\r\n        const body = JSON.stringify(param);\r\n        return this.http\r\n            .post(url, body, { headers: this.headers });\r\n    }\r\n    uploadService(url, formData) {\r\n        return this.http\r\n            .post(url, formData, { reportProgress: true, observe: 'events' });\r\n    }\r\n    updateService(url, param) {\r\n        const params = new HttpParams();\r\n        const body = JSON.stringify(param);\r\n        return this.http\r\n            .put(url, body, { params: params });\r\n    }\r\n    patchService(url, param) {\r\n        const params = new HttpParams();\r\n        const body = JSON.stringify(param);\r\n        return this.http\r\n            .patch(url, body, { params: params });\r\n    }\r\n    deleteService(url, param) {\r\n        const params = new HttpParams();\r\n        for (const key in param) {\r\n            if (param.hasOwnProperty(key)) {\r\n                const val = param[key];\r\n                params.set(key, val);\r\n            }\r\n        }\r\n        return this.http\r\n            .delete(url, { params: params });\r\n    }\r\n    deleteServiceWithId(url, key, val) {\r\n        const params = new HttpParams();\r\n        return this.http\r\n            .delete(url + '/?' + key + '=' + val, { params: params });\r\n    }\r\n}\r\nGenericService.ɵfac = function GenericService_Factory(t) { return new (t || GenericService)(i0.ɵɵinject(i1.HttpClient)); };\r\nGenericService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: GenericService, factory: GenericService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}