{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common'; // This service is based on the `ng2-cookies` package which sadly is not a service and does\n\nimport * as ɵngcc0 from '@angular/core';\nlet CookieService = /*#__PURE__*/(() => {\n  class CookieService {\n    constructor(document, // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n      this.document = document;\n      this.platformId = platformId;\n      this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * Get cookie Regular Expression\n     *\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n\n\n    static getCookieRegExp(name) {\n      const escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n      return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n\n    static safeDecodeURIComponent(encodedURIComponent) {\n      try {\n        return decodeURIComponent(encodedURIComponent);\n      } catch (_a) {\n        // probably it is not uri encoded. return as is\n        return encodedURIComponent;\n      }\n    }\n    /**\n     * Return `true` if {@link Document} is accessible, otherwise return `false`\n     *\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     */\n\n\n    check(name) {\n      if (!this.documentIsAccessible) {\n        return false;\n      }\n\n      name = encodeURIComponent(name);\n      const regExp = CookieService.getCookieRegExp(name);\n      return regExp.test(this.document.cookie);\n    }\n    /**\n     * Get cookies by name\n     *\n     * @param name Cookie name\n     * @returns property value\n     */\n\n\n    get(name) {\n      if (this.documentIsAccessible && this.check(name)) {\n        name = encodeURIComponent(name);\n        const regExp = CookieService.getCookieRegExp(name);\n        const result = regExp.exec(this.document.cookie);\n        return result[1] ? CookieService.safeDecodeURIComponent(result[1]) : '';\n      } else {\n        return '';\n      }\n    }\n    /**\n     * Get all cookies in JSON format\n     *\n     * @returns all the cookies in json\n     */\n\n\n    getAll() {\n      if (!this.documentIsAccessible) {\n        return {};\n      }\n\n      const cookies = {};\n      const document = this.document;\n\n      if (document.cookie && document.cookie !== '') {\n        document.cookie.split(';').forEach(currentCookie => {\n          const [cookieName, cookieValue] = currentCookie.split('=');\n          cookies[CookieService.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = CookieService.safeDecodeURIComponent(cookieValue);\n        });\n      }\n\n      return cookies;\n    }\n\n    set(name, value, expiresOrOptions, path, domain, secure, sameSite) {\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n        const optionsBody = {\n          expires: expiresOrOptions,\n          path,\n          domain,\n          secure,\n          sameSite: sameSite ? sameSite : 'Lax'\n        };\n        this.set(name, value, optionsBody);\n        return;\n      }\n\n      let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n      const options = expiresOrOptions ? expiresOrOptions : {};\n\n      if (options.expires) {\n        if (typeof options.expires === 'number') {\n          const dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n          cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n        } else {\n          cookieString += 'expires=' + options.expires.toUTCString() + ';';\n        }\n      }\n\n      if (options.path) {\n        cookieString += 'path=' + options.path + ';';\n      }\n\n      if (options.domain) {\n        cookieString += 'domain=' + options.domain + ';';\n      }\n\n      if (options.secure === false && options.sameSite === 'None') {\n        options.secure = true;\n        console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` + `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\n      }\n\n      if (options.secure) {\n        cookieString += 'secure;';\n      }\n\n      if (!options.sameSite) {\n        options.sameSite = 'Lax';\n      }\n\n      cookieString += 'sameSite=' + options.sameSite + ';';\n      this.document.cookie = cookieString;\n    }\n    /**\n     * Delete cookie by name\n     *\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Cookie secure flag\n     * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\n     */\n\n\n    delete(name, path, domain, secure, sameSite = 'Lax') {\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n      this.set(name, '', {\n        expires: expiresDate,\n        path,\n        domain,\n        secure,\n        sameSite\n      });\n    }\n    /**\n     * Delete all cookies\n     *\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Is the Cookie secure\n     * @param sameSite Is the cookie same site\n     */\n\n\n    deleteAll(path, domain, secure, sameSite = 'Lax') {\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      const cookies = this.getAll();\n\n      for (const cookieName in cookies) {\n        if (cookies.hasOwnProperty(cookieName)) {\n          this.delete(cookieName, path, domain, secure, sameSite);\n        }\n      }\n    }\n\n  }\n\n  CookieService.ɵfac = function CookieService_Factory(t) {\n    return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  CookieService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function CookieService_Factory() {\n      return new CookieService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.PLATFORM_ID));\n    },\n    token: CookieService,\n    providedIn: \"root\"\n  });\n  return CookieService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CookieService };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/ngx-cookie-service/__ivy_ngcc__/fesm2015/ngx-cookie-service.js"],"names":["i0","Injectable","Inject","PLATFORM_ID","i1","isPlatformBrowser","DOCUMENT","ɵngcc0","CookieService","constructor","document","platformId","documentIsAccessible","getCookieRegExp","name","escapedName","replace","RegExp","safeDecodeURIComponent","encodedURIComponent","decodeURIComponent","_a","check","encodeURIComponent","regExp","test","cookie","get","result","exec","getAll","cookies","split","forEach","currentCookie","cookieName","cookieValue","set","value","expiresOrOptions","path","domain","secure","sameSite","Date","optionsBody","expires","cookieString","options","dateExpires","getTime","toUTCString","console","warn","delete","expiresDate","deleteAll","hasOwnProperty","ɵfac","CookieService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\n\n// This service is based on the `ng2-cookies` package which sadly is not a service and does\nimport * as ɵngcc0 from '@angular/core';\nclass CookieService {\n    constructor(document, \n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n        this.document = document;\n        this.platformId = platformId;\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * Get cookie Regular Expression\n     *\n     * @param name Cookie name\n     * @returns property RegExp\n     */\n    static getCookieRegExp(name) {\n        const escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n    static safeDecodeURIComponent(encodedURIComponent) {\n        try {\n            return decodeURIComponent(encodedURIComponent);\n        }\n        catch (_a) {\n            // probably it is not uri encoded. return as is\n            return encodedURIComponent;\n        }\n    }\n    /**\n     * Return `true` if {@link Document} is accessible, otherwise return `false`\n     *\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     */\n    check(name) {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n        name = encodeURIComponent(name);\n        const regExp = CookieService.getCookieRegExp(name);\n        return regExp.test(this.document.cookie);\n    }\n    /**\n     * Get cookies by name\n     *\n     * @param name Cookie name\n     * @returns property value\n     */\n    get(name) {\n        if (this.documentIsAccessible && this.check(name)) {\n            name = encodeURIComponent(name);\n            const regExp = CookieService.getCookieRegExp(name);\n            const result = regExp.exec(this.document.cookie);\n            return result[1] ? CookieService.safeDecodeURIComponent(result[1]) : '';\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * Get all cookies in JSON format\n     *\n     * @returns all the cookies in json\n     */\n    getAll() {\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n        const cookies = {};\n        const document = this.document;\n        if (document.cookie && document.cookie !== '') {\n            document.cookie.split(';').forEach((currentCookie) => {\n                const [cookieName, cookieValue] = currentCookie.split('=');\n                cookies[CookieService.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = CookieService.safeDecodeURIComponent(cookieValue);\n            });\n        }\n        return cookies;\n    }\n    set(name, value, expiresOrOptions, path, domain, secure, sameSite) {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n            const optionsBody = {\n                expires: expiresOrOptions,\n                path,\n                domain,\n                secure,\n                sameSite: sameSite ? sameSite : 'Lax',\n            };\n            this.set(name, value, optionsBody);\n            return;\n        }\n        let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        const options = expiresOrOptions ? expiresOrOptions : {};\n        if (options.expires) {\n            if (typeof options.expires === 'number') {\n                const dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            }\n            else {\n                cookieString += 'expires=' + options.expires.toUTCString() + ';';\n            }\n        }\n        if (options.path) {\n            cookieString += 'path=' + options.path + ';';\n        }\n        if (options.domain) {\n            cookieString += 'domain=' + options.domain + ';';\n        }\n        if (options.secure === false && options.sameSite === 'None') {\n            options.secure = true;\n            console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\n                `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\n        }\n        if (options.secure) {\n            cookieString += 'secure;';\n        }\n        if (!options.sameSite) {\n            options.sameSite = 'Lax';\n        }\n        cookieString += 'sameSite=' + options.sameSite + ';';\n        this.document.cookie = cookieString;\n    }\n    /**\n     * Delete cookie by name\n     *\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Cookie secure flag\n     * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\n     */\n    delete(name, path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n        this.set(name, '', { expires: expiresDate, path, domain, secure, sameSite });\n    }\n    /**\n     * Delete all cookies\n     *\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Is the Cookie secure\n     * @param sameSite Is the cookie same site\n     */\n    deleteAll(path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const cookies = this.getAll();\n        for (const cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain, secure, sameSite);\n            }\n        }\n    }\n}\nCookieService.ɵfac = function CookieService_Factory(t) { return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID)); };\nCookieService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CookieService_Factory() { return new CookieService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: CookieService, providedIn: \"root\" });\nCookieService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, null); })();\n\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CookieService };\n\n"]},"metadata":{},"sourceType":"module"}