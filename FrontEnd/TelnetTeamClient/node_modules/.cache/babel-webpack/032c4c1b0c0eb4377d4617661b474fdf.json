{"ast":null,"code":"import { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\n\nconst MAT_MOMENT_DATE_ADAPTER_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n  providedIn: 'root',\n  factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n  return {\n    useUtc: false\n  };\n}\n/** Creates an array and fills it with values. */\n\n\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\n\n\nlet MomentDateAdapter = /*#__PURE__*/(() => {\n  class MomentDateAdapter extends DateAdapter {\n    constructor(dateLocale, _options) {\n      super();\n      this._options = _options;\n      this.setLocale(dateLocale || moment.locale());\n    }\n\n    setLocale(locale) {\n      super.setLocale(locale);\n      let momentLocaleData = moment.localeData(locale);\n      this._localeData = {\n        firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n        longMonths: momentLocaleData.months(),\n        shortMonths: momentLocaleData.monthsShort(),\n        dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n        longDaysOfWeek: momentLocaleData.weekdays(),\n        shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n        narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n      };\n    }\n\n    getYear(date) {\n      return this.clone(date).year();\n    }\n\n    getMonth(date) {\n      return this.clone(date).month();\n    }\n\n    getDate(date) {\n      return this.clone(date).date();\n    }\n\n    getDayOfWeek(date) {\n      return this.clone(date).day();\n    }\n\n    getMonthNames(style) {\n      // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n      return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n\n    getDateNames() {\n      return this._localeData.dates;\n    }\n\n    getDayOfWeekNames(style) {\n      if (style == 'long') {\n        return this._localeData.longDaysOfWeek;\n      }\n\n      if (style == 'short') {\n        return this._localeData.shortDaysOfWeek;\n      }\n\n      return this._localeData.narrowDaysOfWeek;\n    }\n\n    getYearName(date) {\n      return this.clone(date).format('YYYY');\n    }\n\n    getFirstDayOfWeek() {\n      return this._localeData.firstDayOfWeek;\n    }\n\n    getNumDaysInMonth(date) {\n      return this.clone(date).daysInMonth();\n    }\n\n    clone(date) {\n      return date.clone().locale(this.locale);\n    }\n\n    createDate(year, month, date) {\n      // Moment.js will create an invalid date if any of the components are out of bounds, but we\n      // explicitly check each case so we can throw more descriptive errors.\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (month < 0 || month > 11) {\n          throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n        }\n\n        if (date < 1) {\n          throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n        }\n      }\n\n      const result = this._createMoment({\n        year,\n        month,\n        date\n      }).locale(this.locale); // If the result isn't valid, the date must have been out of bounds for this month.\n\n\n      if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n      }\n\n      return result;\n    }\n\n    today() {\n      return this._createMoment().locale(this.locale);\n    }\n\n    parse(value, parseFormat) {\n      if (value && typeof value == 'string') {\n        return this._createMoment(value, parseFormat, this.locale);\n      }\n\n      return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n\n    format(date, displayFormat) {\n      date = this.clone(date);\n\n      if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('MomentDateAdapter: Cannot format invalid date.');\n      }\n\n      return date.format(displayFormat);\n    }\n\n    addCalendarYears(date, years) {\n      return this.clone(date).add({\n        years\n      });\n    }\n\n    addCalendarMonths(date, months) {\n      return this.clone(date).add({\n        months\n      });\n    }\n\n    addCalendarDays(date, days) {\n      return this.clone(date).add({\n        days\n      });\n    }\n\n    toIso8601(date) {\n      return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n\n\n    deserialize(value) {\n      let date;\n\n      if (value instanceof Date) {\n        date = this._createMoment(value).locale(this.locale);\n      } else if (this.isDateInstance(value)) {\n        // Note: assumes that cloning also sets the correct locale.\n        return this.clone(value);\n      }\n\n      if (typeof value === 'string') {\n        if (!value) {\n          return null;\n        }\n\n        date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n      }\n\n      if (date && this.isValid(date)) {\n        return this._createMoment(date).locale(this.locale);\n      }\n\n      return super.deserialize(value);\n    }\n\n    isDateInstance(obj) {\n      return moment.isMoment(obj);\n    }\n\n    isValid(date) {\n      return this.clone(date).isValid();\n    }\n\n    invalid() {\n      return moment.invalid();\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n\n\n    _createMoment(date, format, locale) {\n      const {\n        strict,\n        useUtc\n      } = this._options || {};\n      return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n    }\n\n  }\n\n  MomentDateAdapter.ɵfac = function MomentDateAdapter_Factory(t) {\n    return new (t || MomentDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(MAT_MOMENT_DATE_ADAPTER_OPTIONS, 8));\n  };\n\n  MomentDateAdapter.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MomentDateAdapter,\n    factory: MomentDateAdapter.ɵfac\n  });\n  return MomentDateAdapter;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_MOMENT_DATE_FORMATS = {\n  parse: {\n    dateInput: 'l'\n  },\n  display: {\n    dateInput: 'l',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  }\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet MomentDateModule = /*#__PURE__*/(() => {\n  class MomentDateModule {}\n\n  MomentDateModule.ɵfac = function MomentDateModule_Factory(t) {\n    return new (t || MomentDateModule)();\n  };\n\n  MomentDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MomentDateModule\n  });\n  MomentDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: DateAdapter,\n      useClass: MomentDateAdapter,\n      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n    }]\n  });\n  return MomentDateModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst ɵ0 = MAT_MOMENT_DATE_FORMATS;\nlet MatMomentDateModule = /*#__PURE__*/(() => {\n  class MatMomentDateModule {}\n\n  MatMomentDateModule.ɵfac = function MatMomentDateModule_Factory(t) {\n    return new (t || MatMomentDateModule)();\n  };\n\n  MatMomentDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatMomentDateModule\n  });\n  MatMomentDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: MAT_DATE_FORMATS,\n      useValue: ɵ0\n    }],\n    imports: [[MomentDateModule]]\n  });\n  return MatMomentDateModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMomentDateModule, {\n    imports: [MomentDateModule]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule, ɵ0 };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/@angular/material-moment-adapter/__ivy_ngcc__/fesm2015/material-moment-adapter.js"],"names":["InjectionToken","Injectable","Optional","Inject","NgModule","DateAdapter","MAT_DATE_LOCALE","MAT_DATE_FORMATS","_rollupMoment","_rollupMoment__default","ɵngcc0","moment","MAT_MOMENT_DATE_ADAPTER_OPTIONS","providedIn","factory","MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","useUtc","range","length","valueFunction","valuesArray","Array","i","MomentDateAdapter","constructor","dateLocale","_options","setLocale","locale","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","format","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getYear","date","clone","year","getMonth","month","getDate","getDayOfWeek","day","getMonthNames","style","getDateNames","getDayOfWeekNames","getYearName","getFirstDayOfWeek","getNumDaysInMonth","daysInMonth","ngDevMode","Error","result","_createMoment","isValid","today","parse","value","parseFormat","displayFormat","addCalendarYears","years","add","addCalendarMonths","addCalendarDays","days","toIso8601","deserialize","Date","isDateInstance","ISO_8601","obj","isMoment","invalid","strict","utc","ɵfac","MomentDateAdapter_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","MAT_MOMENT_DATE_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","MomentDateModule","MomentDateModule_Factory","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","providers","provide","useClass","deps","ɵ0","MatMomentDateModule","MatMomentDateModule_Factory","useValue","imports","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,UAAzB,EAAqCC,QAArC,EAA+CC,MAA/C,EAAuDC,QAAvD,QAAuE,eAAvE;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,gBAAvC,QAA+D,wBAA/D;AACA,OAAO,KAAKC,aAAZ,MAA+B,QAA/B;AACA,OAAOC,sBAAP,MAAmC,QAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,MAAMC,MAAM,GAAGF,sBAAsB,IAAID,aAAzC;AACA;;AACA,MAAMI,+BAA+B,gBAAG,IAAIZ,cAAJ,CAAmB,iCAAnB,EAAsD;AAC1Fa,EAAAA,UAAU,EAAE,MAD8E;AAE1FC,EAAAA,OAAO,EAAEC;AAFiF,CAAtD,CAAxC;AAIA;;AACA,SAASA,uCAAT,GAAmD;AAC/C,SAAO;AACHC,IAAAA,MAAM,EAAE;AADL,GAAP;AAGH;AACD;;;AACA,SAASC,KAAT,CAAeC,MAAf,EAAuBC,aAAvB,EAAsC;AAClC,QAAMC,WAAW,GAAGC,KAAK,CAACH,MAAD,CAAzB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC7BF,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBH,aAAa,CAACG,CAAD,CAA9B;AACH;;AACD,SAAOF,WAAP;AACH;AACD;;;IACMG,iB;AAAN,QAAMA,iBAAN,SAAgClB,WAAhC,CAA4C;AACxCmB,IAAAA,WAAW,CAACC,UAAD,EAAaC,QAAb,EAAuB;AAC9B;AACA,WAAKA,QAAL,GAAgBA,QAAhB;AACA,WAAKC,SAAL,CAAeF,UAAU,IAAId,MAAM,CAACiB,MAAP,EAA7B;AACH;;AACDD,IAAAA,SAAS,CAACC,MAAD,EAAS;AACd,YAAMD,SAAN,CAAgBC,MAAhB;AACA,UAAIC,gBAAgB,GAAGlB,MAAM,CAACmB,UAAP,CAAkBF,MAAlB,CAAvB;AACA,WAAKG,WAAL,GAAmB;AACfC,QAAAA,cAAc,EAAEH,gBAAgB,CAACG,cAAjB,EADD;AAEfC,QAAAA,UAAU,EAAEJ,gBAAgB,CAACK,MAAjB,EAFG;AAGfC,QAAAA,WAAW,EAAEN,gBAAgB,CAACO,WAAjB,EAHE;AAIfC,QAAAA,KAAK,EAAEpB,KAAK,CAAC,EAAD,EAAMK,CAAD,IAAO,KAAKgB,UAAL,CAAgB,IAAhB,EAAsB,CAAtB,EAAyBhB,CAAC,GAAG,CAA7B,EAAgCiB,MAAhC,CAAuC,GAAvC,CAAZ,CAJG;AAKfC,QAAAA,cAAc,EAAEX,gBAAgB,CAACY,QAAjB,EALD;AAMfC,QAAAA,eAAe,EAAEb,gBAAgB,CAACc,aAAjB,EANF;AAOfC,QAAAA,gBAAgB,EAAEf,gBAAgB,CAACgB,WAAjB;AAPH,OAAnB;AASH;;AACDC,IAAAA,OAAO,CAACC,IAAD,EAAO;AACV,aAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiBE,IAAjB,EAAP;AACH;;AACDC,IAAAA,QAAQ,CAACH,IAAD,EAAO;AACX,aAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiBI,KAAjB,EAAP;AACH;;AACDC,IAAAA,OAAO,CAACL,IAAD,EAAO;AACV,aAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiBA,IAAjB,EAAP;AACH;;AACDM,IAAAA,YAAY,CAACN,IAAD,EAAO;AACf,aAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiBO,GAAjB,EAAP;AACH;;AACDC,IAAAA,aAAa,CAACC,KAAD,EAAQ;AACjB;AACA,aAAOA,KAAK,IAAI,MAAT,GAAkB,KAAKzB,WAAL,CAAiBE,UAAnC,GAAgD,KAAKF,WAAL,CAAiBI,WAAxE;AACH;;AACDsB,IAAAA,YAAY,GAAG;AACX,aAAO,KAAK1B,WAAL,CAAiBM,KAAxB;AACH;;AACDqB,IAAAA,iBAAiB,CAACF,KAAD,EAAQ;AACrB,UAAIA,KAAK,IAAI,MAAb,EAAqB;AACjB,eAAO,KAAKzB,WAAL,CAAiBS,cAAxB;AACH;;AACD,UAAIgB,KAAK,IAAI,OAAb,EAAsB;AAClB,eAAO,KAAKzB,WAAL,CAAiBW,eAAxB;AACH;;AACD,aAAO,KAAKX,WAAL,CAAiBa,gBAAxB;AACH;;AACDe,IAAAA,WAAW,CAACZ,IAAD,EAAO;AACd,aAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiBR,MAAjB,CAAwB,MAAxB,CAAP;AACH;;AACDqB,IAAAA,iBAAiB,GAAG;AAChB,aAAO,KAAK7B,WAAL,CAAiBC,cAAxB;AACH;;AACD6B,IAAAA,iBAAiB,CAACd,IAAD,EAAO;AACpB,aAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiBe,WAAjB,EAAP;AACH;;AACDd,IAAAA,KAAK,CAACD,IAAD,EAAO;AACR,aAAOA,IAAI,CAACC,KAAL,GAAapB,MAAb,CAAoB,KAAKA,MAAzB,CAAP;AACH;;AACDU,IAAAA,UAAU,CAACW,IAAD,EAAOE,KAAP,EAAcJ,IAAd,EAAoB;AAC1B;AACA;AACA,UAAI,OAAOgB,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;AAC/C,YAAIZ,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAzB,EAA6B;AACzB,gBAAMa,KAAK,CAAE,wBAAuBb,KAAM,4CAA/B,CAAX;AACH;;AACD,YAAIJ,IAAI,GAAG,CAAX,EAAc;AACV,gBAAMiB,KAAK,CAAE,iBAAgBjB,IAAK,mCAAvB,CAAX;AACH;AACJ;;AACD,YAAMkB,MAAM,GAAG,KAAKC,aAAL,CAAmB;AAAEjB,QAAAA,IAAF;AAAQE,QAAAA,KAAR;AAAeJ,QAAAA;AAAf,OAAnB,EAA0CnB,MAA1C,CAAiD,KAAKA,MAAtD,CAAf,CAX0B,CAY1B;;;AACA,UAAI,CAACqC,MAAM,CAACE,OAAP,EAAD,KAAsB,OAAOJ,SAAP,KAAqB,WAArB,IAAoCA,SAA1D,CAAJ,EAA0E;AACtE,cAAMC,KAAK,CAAE,iBAAgBjB,IAAK,2BAA0BI,KAAM,IAAvD,CAAX;AACH;;AACD,aAAOc,MAAP;AACH;;AACDG,IAAAA,KAAK,GAAG;AACJ,aAAO,KAAKF,aAAL,GAAqBtC,MAArB,CAA4B,KAAKA,MAAjC,CAAP;AACH;;AACDyC,IAAAA,KAAK,CAACC,KAAD,EAAQC,WAAR,EAAqB;AACtB,UAAID,KAAK,IAAI,OAAOA,KAAP,IAAgB,QAA7B,EAAuC;AACnC,eAAO,KAAKJ,aAAL,CAAmBI,KAAnB,EAA0BC,WAA1B,EAAuC,KAAK3C,MAA5C,CAAP;AACH;;AACD,aAAO0C,KAAK,GAAG,KAAKJ,aAAL,CAAmBI,KAAnB,EAA0B1C,MAA1B,CAAiC,KAAKA,MAAtC,CAAH,GAAmD,IAA/D;AACH;;AACDW,IAAAA,MAAM,CAACQ,IAAD,EAAOyB,aAAP,EAAsB;AACxBzB,MAAAA,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAX,CAAP;;AACA,UAAI,CAAC,KAAKoB,OAAL,CAAapB,IAAb,CAAD,KAAwB,OAAOgB,SAAP,KAAqB,WAArB,IAAoCA,SAA5D,CAAJ,EAA4E;AACxE,cAAMC,KAAK,CAAC,gDAAD,CAAX;AACH;;AACD,aAAOjB,IAAI,CAACR,MAAL,CAAYiC,aAAZ,CAAP;AACH;;AACDC,IAAAA,gBAAgB,CAAC1B,IAAD,EAAO2B,KAAP,EAAc;AAC1B,aAAO,KAAK1B,KAAL,CAAWD,IAAX,EAAiB4B,GAAjB,CAAqB;AAAED,QAAAA;AAAF,OAArB,CAAP;AACH;;AACDE,IAAAA,iBAAiB,CAAC7B,IAAD,EAAOb,MAAP,EAAe;AAC5B,aAAO,KAAKc,KAAL,CAAWD,IAAX,EAAiB4B,GAAjB,CAAqB;AAAEzC,QAAAA;AAAF,OAArB,CAAP;AACH;;AACD2C,IAAAA,eAAe,CAAC9B,IAAD,EAAO+B,IAAP,EAAa;AACxB,aAAO,KAAK9B,KAAL,CAAWD,IAAX,EAAiB4B,GAAjB,CAAqB;AAAEG,QAAAA;AAAF,OAArB,CAAP;AACH;;AACDC,IAAAA,SAAS,CAAChC,IAAD,EAAO;AACZ,aAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiBR,MAAjB,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIyC,IAAAA,WAAW,CAACV,KAAD,EAAQ;AACf,UAAIvB,IAAJ;;AACA,UAAIuB,KAAK,YAAYW,IAArB,EAA2B;AACvBlC,QAAAA,IAAI,GAAG,KAAKmB,aAAL,CAAmBI,KAAnB,EAA0B1C,MAA1B,CAAiC,KAAKA,MAAtC,CAAP;AACH,OAFD,MAGK,IAAI,KAAKsD,cAAL,CAAoBZ,KAApB,CAAJ,EAAgC;AACjC;AACA,eAAO,KAAKtB,KAAL,CAAWsB,KAAX,CAAP;AACH;;AACD,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAI,CAACA,KAAL,EAAY;AACR,iBAAO,IAAP;AACH;;AACDvB,QAAAA,IAAI,GAAG,KAAKmB,aAAL,CAAmBI,KAAnB,EAA0B3D,MAAM,CAACwE,QAAjC,EAA2CvD,MAA3C,CAAkD,KAAKA,MAAvD,CAAP;AACH;;AACD,UAAImB,IAAI,IAAI,KAAKoB,OAAL,CAAapB,IAAb,CAAZ,EAAgC;AAC5B,eAAO,KAAKmB,aAAL,CAAmBnB,IAAnB,EAAyBnB,MAAzB,CAAgC,KAAKA,MAArC,CAAP;AACH;;AACD,aAAO,MAAMoD,WAAN,CAAkBV,KAAlB,CAAP;AACH;;AACDY,IAAAA,cAAc,CAACE,GAAD,EAAM;AAChB,aAAOzE,MAAM,CAAC0E,QAAP,CAAgBD,GAAhB,CAAP;AACH;;AACDjB,IAAAA,OAAO,CAACpB,IAAD,EAAO;AACV,aAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiBoB,OAAjB,EAAP;AACH;;AACDmB,IAAAA,OAAO,GAAG;AACN,aAAO3E,MAAM,CAAC2E,OAAP,EAAP;AACH;AACD;;;AACApB,IAAAA,aAAa,CAACnB,IAAD,EAAOR,MAAP,EAAeX,MAAf,EAAuB;AAChC,YAAM;AAAE2D,QAAAA,MAAF;AAAUvE,QAAAA;AAAV,UAAqB,KAAKU,QAAL,IAAiB,EAA5C;AACA,aAAOV,MAAM,GACPL,MAAM,CAAC6E,GAAP,CAAWzC,IAAX,EAAiBR,MAAjB,EAAyBX,MAAzB,EAAiC2D,MAAjC,CADO,GAEP5E,MAAM,CAACoC,IAAD,EAAOR,MAAP,EAAeX,MAAf,EAAuB2D,MAAvB,CAFZ;AAGH;;AAjJuC;;AAmJ5ChE,EAAAA,iBAAiB,CAACkE,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,WAAO,KAAKA,CAAC,IAAIpE,iBAAV,EAA6Bb,MAAM,CAACkF,QAAP,CAAgBtF,eAAhB,EAAiC,CAAjC,CAA7B,EAAkEI,MAAM,CAACkF,QAAP,CAAgBhF,+BAAhB,EAAiD,CAAjD,CAAlE,CAAP;AAAgI,GAAjM;;AACAW,EAAAA,iBAAiB,CAACsE,KAAlB,GAA0B,aAAcnF,MAAM,CAACoF,kBAAP,CAA0B;AAAEC,IAAAA,KAAK,EAAExE,iBAAT;AAA4BT,IAAAA,OAAO,EAAES,iBAAiB,CAACkE;AAAvD,GAA1B,CAAxC;SApJMlE,iB;;;AAyJN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOwC,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAYe,CAZ9B;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMiC,uBAAuB,GAAG;AAC5B3B,EAAAA,KAAK,EAAE;AACH4B,IAAAA,SAAS,EAAE;AADR,GADqB;AAI5BC,EAAAA,OAAO,EAAE;AACLD,IAAAA,SAAS,EAAE,GADN;AAELE,IAAAA,cAAc,EAAE,UAFX;AAGLC,IAAAA,aAAa,EAAE,IAHV;AAILC,IAAAA,kBAAkB,EAAE;AAJf;AAJmB,CAAhC;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,gB;AAAN,QAAMA,gBAAN,CAAuB;;AAEvBA,EAAAA,gBAAgB,CAACb,IAAjB,GAAwB,SAASc,wBAAT,CAAkCZ,CAAlC,EAAqC;AAAE,WAAO,KAAKA,CAAC,IAAIW,gBAAV,GAAP;AAAuC,GAAtG;;AACAA,EAAAA,gBAAgB,CAACE,IAAjB,GAAwB,aAAc9F,MAAM,CAAC+F,gBAAP,CAAwB;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAAxB,CAAtC;AACAA,EAAAA,gBAAgB,CAACK,IAAjB,GAAwB,aAAcjG,MAAM,CAACkG,gBAAP,CAAwB;AAAEC,IAAAA,SAAS,EAAE,CACnE;AACIC,MAAAA,OAAO,EAAEzG,WADb;AAEI0G,MAAAA,QAAQ,EAAExF,iBAFd;AAGIyF,MAAAA,IAAI,EAAE,CAAC1G,eAAD,EAAkBM,+BAAlB;AAHV,KADmE;AAAb,GAAxB,CAAtC;SAJM0F,gB;;;AAWN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOvC,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAWO,CAXtB;;AAYA,MAAMkD,EAAE,GAAGjB,uBAAX;IACMkB,mB;AAAN,QAAMA,mBAAN,CAA0B;;AAE1BA,EAAAA,mBAAmB,CAACzB,IAApB,GAA2B,SAAS0B,2BAAT,CAAqCxB,CAArC,EAAwC;AAAE,WAAO,KAAKA,CAAC,IAAIuB,mBAAV,GAAP;AAA0C,GAA/G;;AACAA,EAAAA,mBAAmB,CAACV,IAApB,GAA2B,aAAc9F,MAAM,CAAC+F,gBAAP,CAAwB;AAAEC,IAAAA,IAAI,EAAEQ;AAAR,GAAxB,CAAzC;AACAA,EAAAA,mBAAmB,CAACP,IAApB,GAA2B,aAAcjG,MAAM,CAACkG,gBAAP,CAAwB;AAAEC,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,OAAO,EAAEvG,gBAAX;AAA6B6G,MAAAA,QAAQ,EAAEH;AAAvC,KAAD,CAAb;AAA4DI,IAAAA,OAAO,EAAE,CAAC,CAACf,gBAAD,CAAD;AAArE,GAAxB,CAAzC;SAJMY,mB;;;AAKN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOnD,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAMO,CANtB;;AAOA;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOuD,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD5G,MAAM,CAAC6G,kBAAP,CAA0BL,mBAA1B,EAA+C;AAAEG,IAAAA,OAAO,EAAE,CAACf,gBAAD;AAAX,GAA/C,CAAnD;AAAqI,CAApJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS1F,+BAAT,EAA0CG,uCAA1C,EAAmFiF,uBAAnF,EAA4GkB,mBAA5G,EAAiI3F,iBAAjI,EAAoJ+E,gBAApJ,EAAsKW,EAAtK","sourcesContent":["import { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\nconst MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n    providedIn: 'root',\n    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n    return {\n        useUtc: false\n    };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\nclass MomentDateAdapter extends DateAdapter {\n    constructor(dateLocale, _options) {\n        super();\n        this._options = _options;\n        this.setLocale(dateLocale || moment.locale());\n    }\n    setLocale(locale) {\n        super.setLocale(locale);\n        let momentLocaleData = moment.localeData(locale);\n        this._localeData = {\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n            longMonths: momentLocaleData.months(),\n            shortMonths: momentLocaleData.monthsShort(),\n            dates: range(31, (i) => this.createDate(2017, 0, i + 1).format('D')),\n            longDaysOfWeek: momentLocaleData.weekdays(),\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n        };\n    }\n    getYear(date) {\n        return this.clone(date).year();\n    }\n    getMonth(date) {\n        return this.clone(date).month();\n    }\n    getDate(date) {\n        return this.clone(date).date();\n    }\n    getDayOfWeek(date) {\n        return this.clone(date).day();\n    }\n    getMonthNames(style) {\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n    getDateNames() {\n        return this._localeData.dates;\n    }\n    getDayOfWeekNames(style) {\n        if (style == 'long') {\n            return this._localeData.longDaysOfWeek;\n        }\n        if (style == 'short') {\n            return this._localeData.shortDaysOfWeek;\n        }\n        return this._localeData.narrowDaysOfWeek;\n    }\n    getYearName(date) {\n        return this.clone(date).format('YYYY');\n    }\n    getFirstDayOfWeek() {\n        return this._localeData.firstDayOfWeek;\n    }\n    getNumDaysInMonth(date) {\n        return this.clone(date).daysInMonth();\n    }\n    clone(date) {\n        return date.clone().locale(this.locale);\n    }\n    createDate(year, month, date) {\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\n        // explicitly check each case so we can throw more descriptive errors.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\n        // If the result isn't valid, the date must have been out of bounds for this month.\n        if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return this._createMoment().locale(this.locale);\n    }\n    parse(value, parseFormat) {\n        if (value && typeof value == 'string') {\n            return this._createMoment(value, parseFormat, this.locale);\n        }\n        return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n    format(date, displayFormat) {\n        date = this.clone(date);\n        if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\n        }\n        return date.format(displayFormat);\n    }\n    addCalendarYears(date, years) {\n        return this.clone(date).add({ years });\n    }\n    addCalendarMonths(date, months) {\n        return this.clone(date).add({ months });\n    }\n    addCalendarDays(date, days) {\n        return this.clone(date).add({ days });\n    }\n    toIso8601(date) {\n        return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n    deserialize(value) {\n        let date;\n        if (value instanceof Date) {\n            date = this._createMoment(value).locale(this.locale);\n        }\n        else if (this.isDateInstance(value)) {\n            // Note: assumes that cloning also sets the correct locale.\n            return this.clone(value);\n        }\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n        }\n        if (date && this.isValid(date)) {\n            return this._createMoment(date).locale(this.locale);\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return moment.isMoment(obj);\n    }\n    isValid(date) {\n        return this.clone(date).isValid();\n    }\n    invalid() {\n        return moment.invalid();\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    _createMoment(date, format, locale) {\n        const { strict, useUtc } = this._options || {};\n        return useUtc\n            ? moment.utc(date, format, locale, strict)\n            : moment(date, format, locale, strict);\n    }\n}\nMomentDateAdapter.ɵfac = function MomentDateAdapter_Factory(t) { return new (t || MomentDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(MAT_MOMENT_DATE_ADAPTER_OPTIONS, 8)); };\nMomentDateAdapter.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MomentDateAdapter, factory: MomentDateAdapter.ɵfac });\nMomentDateAdapter.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MomentDateAdapter, [{\n        type: Injectable\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_LOCALE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_MOMENT_DATE_FORMATS = {\n    parse: {\n        dateInput: 'l',\n    },\n    display: {\n        dateInput: 'l',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MomentDateModule {\n}\nMomentDateModule.ɵfac = function MomentDateModule_Factory(t) { return new (t || MomentDateModule)(); };\nMomentDateModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MomentDateModule });\nMomentDateModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        {\n            provide: DateAdapter,\n            useClass: MomentDateAdapter,\n            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n        }\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MomentDateModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    {\n                        provide: DateAdapter,\n                        useClass: MomentDateAdapter,\n                        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                    }\n                ]\n            }]\n    }], null, null); })();\nconst ɵ0 = MAT_MOMENT_DATE_FORMATS;\nclass MatMomentDateModule {\n}\nMatMomentDateModule.ɵfac = function MatMomentDateModule_Factory(t) { return new (t || MatMomentDateModule)(); };\nMatMomentDateModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatMomentDateModule });\nMatMomentDateModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0 }], imports: [[MomentDateModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMomentDateModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MomentDateModule],\n                providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0 }]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMomentDateModule, { imports: [MomentDateModule] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule, ɵ0 };\n\n"]},"metadata":{},"sourceType":"module"}