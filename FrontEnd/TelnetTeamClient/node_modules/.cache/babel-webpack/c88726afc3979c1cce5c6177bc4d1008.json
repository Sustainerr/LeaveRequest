{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { OracleDbType, Direction, Body, UserProfile, Message } from 'app/models/shared';\nimport { JwtHelper } from 'app/helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./core-data.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"ngx-cookie-service\";\nimport * as i4 from \"./entity-parameter.service\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(coreDataService, httpClient, cookieService, entityParameterService) {\n      this.coreDataService = coreDataService;\n      this.httpClient = httpClient;\n      this.cookieService = cookieService;\n      this.entityParameterService = entityParameterService;\n      this.jwtHelper = new JwtHelper();\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json; charset=utf-8'\n      });\n    }\n\n    login(userLogin, userPassword, score) {\n      const entityParameters = new Array();\n      this.entityParameterService.AddEntityParameter(entityParameters, 'userLogin', userLogin, OracleDbType.Varchar2, Direction.Input);\n      this.entityParameterService.AddEntityParameter(entityParameters, 'userPassword', userPassword, OracleDbType.Varchar2, Direction.Input);\n      const body = new Body();\n      body.storedProcedureName = 'SITT.GetAuthenticatedUser';\n      body.entitiesParameters = new Array(entityParameters);\n      body.cursorName = 'curs';\n      return null; // return this.httpClient.post('/Login/Authenticate', JSON.stringify(body), { headers: this.headers })\n      //     .pipe(map((data) => {\n      //         // login successful if there's a jwt token in the response\n      //         const profile: UserProfile = new UserProfile;\n      //         profile.access_token = data['access_token'];\n      //         profile.currentUser = data['currentUser'][0];\n      //         if (!(environment.activitiesStrengthCheck.trim().split(',').includes(profile.currentUser.activityId.toString())) &&\n      //             (environment.activitiesStrengthCheck.trim().toUpperCase() !== 'ALL') || (score >= environment.minStrengthScore)) {\n      //             profile.currentUser.rolesId = data['currentUser'][0]['rolesId'].split(',');\n      //             profile.currentUser.functionsId = data['currentUser'][0]['functionsId'].split(',');\n      //             this.cookieService.set('passwordStrength', 'Strong');\n      //         } else {\n      //             this.cookieService.set('passwordStrength', 'Week');\n      //             profile.currentUser.rolesId = [];\n      //             profile.currentUser.functionsId = [];\n      //         }\n      //         if (profile && profile.access_token) {\n      //             this.setProfile(profile);\n      //             return profile;\n      //         }\n      //         return profile;\n      //     }));\n    }\n\n    logout() {\n      this.cookieService.delete('userLogin');\n      this.cookieService.delete('passwordStrength');\n      this.resetProfile();\n    }\n\n    sendResetPassword(email) {\n      const message = new Message();\n      message.from = 'AdminMail';\n      message.to = email;\n      message.subject = 'Reset Password';\n      message.body = 'Core.ResetPassword';\n      return this.httpClient.post('/Login/SendResetPassword', JSON.stringify(message), {\n        headers: this.headers,\n        responseType: 'text'\n      });\n    }\n\n    resetPassword(userIdentifiers) {\n      return this.httpClient.post('/Login/ResetPassword', JSON.stringify(userIdentifiers), {\n        headers: this.headers,\n        responseType: 'text'\n      });\n    }\n\n    changePassword(userIdentifiers) {\n      return this.httpClient.post('/Login/ChangePassword', JSON.stringify(userIdentifiers), {\n        headers: this.headers,\n        responseType: 'text'\n      });\n    }\n\n    isAuthenticated() {\n      const profile = this.getProfile();\n      const validToken = profile.access_token !== '' && profile.access_token != null;\n      const isTokenExpired = this.isTokenExpired(profile);\n      return validToken && !isTokenExpired;\n    }\n\n    isAuthenticatedButTokenExpired() {\n      const profile = this.getProfile();\n      const validToken = profile.access_token !== '' && profile.access_token != null;\n      const isTokenExpired = this.isTokenExpired(profile);\n      return validToken && isTokenExpired;\n    }\n\n    isTokenExpired(profile) {\n      const expiration = new Date(profile.expires_in);\n      return expiration < new Date();\n    }\n\n    setProfile(profile) {\n      if (profile && profile.access_token && profile.access_token !== '') {\n        const expires_in = this.jwtHelper.getTokenExpirationDate(profile.access_token).toString();\n        localStorage.setItem('access_token', profile.access_token);\n        localStorage.setItem('expires_in', expires_in);\n        localStorage.setItem('currentUser', JSON.stringify(profile.currentUser));\n      }\n    }\n\n    getProfile() {\n      const accessToken = localStorage.getItem('access_token');\n      const userProfile = new UserProfile();\n\n      if (accessToken) {\n        userProfile.access_token = accessToken;\n        userProfile.expires_in = localStorage.getItem('expires_in');\n\n        if (userProfile.currentUser === null || userProfile.currentUser === undefined) {\n          userProfile.currentUser = JSON.parse(localStorage.getItem('currentUser'));\n        }\n      }\n\n      return userProfile;\n    }\n\n    resetProfile() {\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('expires_in');\n      localStorage.removeItem('currentUser');\n      sessionStorage.clear();\n    }\n\n    validateCaptcha(data) {\n      return this.httpClient.post('/Login/Captcha', data, {\n        headers: this.headers,\n        responseType: 'text'\n      });\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.CoreDataService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.CookieService), i0.ɵɵinject(i4.EntityParameterService));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac\n  });\n  return AuthenticationService;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/services/shared/authentication.service.ts"],"names":["HttpHeaders","OracleDbType","Direction","Body","UserProfile","Message","JwtHelper","i0","i1","i2","i3","i4","AuthenticationService","constructor","coreDataService","httpClient","cookieService","entityParameterService","jwtHelper","headers","login","userLogin","userPassword","score","entityParameters","Array","AddEntityParameter","Varchar2","Input","body","storedProcedureName","entitiesParameters","cursorName","logout","delete","resetProfile","sendResetPassword","email","message","from","to","subject","post","JSON","stringify","responseType","resetPassword","userIdentifiers","changePassword","isAuthenticated","profile","getProfile","validToken","access_token","isTokenExpired","isAuthenticatedButTokenExpired","expiration","Date","expires_in","setProfile","getTokenExpirationDate","toString","localStorage","setItem","currentUser","accessToken","getItem","userProfile","undefined","parse","removeItem","sessionStorage","clear","validateCaptcha","data","ɵfac","AuthenticationService_Factory","t","ɵɵinject","CoreDataService","HttpClient","CookieService","EntityParameterService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { OracleDbType, Direction, Body, UserProfile, Message } from 'app/models/shared';\r\nimport { JwtHelper } from 'app/helpers';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./core-data.service\";\r\nimport * as i2 from \"@angular/common/http\";\r\nimport * as i3 from \"ngx-cookie-service\";\r\nimport * as i4 from \"./entity-parameter.service\";\r\nexport class AuthenticationService {\r\n    constructor(coreDataService, httpClient, cookieService, entityParameterService) {\r\n        this.coreDataService = coreDataService;\r\n        this.httpClient = httpClient;\r\n        this.cookieService = cookieService;\r\n        this.entityParameterService = entityParameterService;\r\n        this.jwtHelper = new JwtHelper();\r\n        this.headers = new HttpHeaders({ 'Content-Type': 'application/json; charset=utf-8' });\r\n    }\r\n    login(userLogin, userPassword, score) {\r\n        const entityParameters = new Array();\r\n        this.entityParameterService.AddEntityParameter(entityParameters, 'userLogin', userLogin, OracleDbType.Varchar2, Direction.Input);\r\n        this.entityParameterService.AddEntityParameter(entityParameters, 'userPassword', userPassword, OracleDbType.Varchar2, Direction.Input);\r\n        const body = new Body();\r\n        body.storedProcedureName = 'SITT.GetAuthenticatedUser';\r\n        body.entitiesParameters = new Array(entityParameters);\r\n        body.cursorName = 'curs';\r\n        return null;\r\n        // return this.httpClient.post('/Login/Authenticate', JSON.stringify(body), { headers: this.headers })\r\n        //     .pipe(map((data) => {\r\n        //         // login successful if there's a jwt token in the response\r\n        //         const profile: UserProfile = new UserProfile;\r\n        //         profile.access_token = data['access_token'];\r\n        //         profile.currentUser = data['currentUser'][0];\r\n        //         if (!(environment.activitiesStrengthCheck.trim().split(',').includes(profile.currentUser.activityId.toString())) &&\r\n        //             (environment.activitiesStrengthCheck.trim().toUpperCase() !== 'ALL') || (score >= environment.minStrengthScore)) {\r\n        //             profile.currentUser.rolesId = data['currentUser'][0]['rolesId'].split(',');\r\n        //             profile.currentUser.functionsId = data['currentUser'][0]['functionsId'].split(',');\r\n        //             this.cookieService.set('passwordStrength', 'Strong');\r\n        //         } else {\r\n        //             this.cookieService.set('passwordStrength', 'Week');\r\n        //             profile.currentUser.rolesId = [];\r\n        //             profile.currentUser.functionsId = [];\r\n        //         }\r\n        //         if (profile && profile.access_token) {\r\n        //             this.setProfile(profile);\r\n        //             return profile;\r\n        //         }\r\n        //         return profile;\r\n        //     }));\r\n    }\r\n    logout() {\r\n        this.cookieService.delete('userLogin');\r\n        this.cookieService.delete('passwordStrength');\r\n        this.resetProfile();\r\n    }\r\n    sendResetPassword(email) {\r\n        const message = new Message();\r\n        message.from = 'AdminMail';\r\n        message.to = email;\r\n        message.subject = 'Reset Password';\r\n        message.body = 'Core.ResetPassword';\r\n        return this.httpClient.post('/Login/SendResetPassword', JSON.stringify(message), { headers: this.headers, responseType: 'text' });\r\n    }\r\n    resetPassword(userIdentifiers) {\r\n        return this.httpClient.post('/Login/ResetPassword', JSON.stringify(userIdentifiers), { headers: this.headers, responseType: 'text' });\r\n    }\r\n    changePassword(userIdentifiers) {\r\n        return this.httpClient.post('/Login/ChangePassword', JSON.stringify(userIdentifiers), { headers: this.headers, responseType: 'text' });\r\n    }\r\n    isAuthenticated() {\r\n        const profile = this.getProfile();\r\n        const validToken = profile.access_token !== '' && profile.access_token != null;\r\n        const isTokenExpired = this.isTokenExpired(profile);\r\n        return validToken && !isTokenExpired;\r\n    }\r\n    isAuthenticatedButTokenExpired() {\r\n        const profile = this.getProfile();\r\n        const validToken = profile.access_token !== '' && profile.access_token != null;\r\n        const isTokenExpired = this.isTokenExpired(profile);\r\n        return validToken && isTokenExpired;\r\n    }\r\n    isTokenExpired(profile) {\r\n        const expiration = new Date(profile.expires_in);\r\n        return expiration < new Date();\r\n    }\r\n    setProfile(profile) {\r\n        if (profile && profile.access_token && (profile.access_token !== '')) {\r\n            const expires_in = this.jwtHelper.getTokenExpirationDate(profile.access_token).toString();\r\n            localStorage.setItem('access_token', profile.access_token);\r\n            localStorage.setItem('expires_in', expires_in);\r\n            localStorage.setItem('currentUser', JSON.stringify(profile.currentUser));\r\n        }\r\n    }\r\n    getProfile() {\r\n        const accessToken = localStorage.getItem('access_token');\r\n        const userProfile = new UserProfile();\r\n        if (accessToken) {\r\n            userProfile.access_token = accessToken;\r\n            userProfile.expires_in = localStorage.getItem('expires_in');\r\n            if ((userProfile.currentUser === null) || (userProfile.currentUser === undefined)) {\r\n                userProfile.currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n            }\r\n        }\r\n        return userProfile;\r\n    }\r\n    resetProfile() {\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('expires_in');\r\n        localStorage.removeItem('currentUser');\r\n        sessionStorage.clear();\r\n    }\r\n    validateCaptcha(data) {\r\n        return this.httpClient.post('/Login/Captcha', data, { headers: this.headers, responseType: 'text' });\r\n    }\r\n}\r\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) { return new (t || AuthenticationService)(i0.ɵɵinject(i1.CoreDataService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.CookieService), i0.ɵɵinject(i4.EntityParameterService)); };\r\nAuthenticationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthenticationService, factory: AuthenticationService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}