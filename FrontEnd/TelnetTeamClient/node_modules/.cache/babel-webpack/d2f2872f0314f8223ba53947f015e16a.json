{"ast":null,"code":"import { Group } from 'app/models/shared';\nimport * as i0 from \"@angular/core\";\nexport let GroupsService = /*#__PURE__*/(() => {\n  class GroupsService {\n    constructor() {// do nothing\n    }\n\n    addGroups(data, groupByColumns) {\n      const rootGroup = new Group();\n      rootGroup.expanded = true;\n      return this.getSublevel(data, 0, groupByColumns, rootGroup);\n    }\n\n    getSublevel(data, level, groupByColumns, parent) {\n      if (level >= groupByColumns.length) {\n        return data;\n      }\n\n      const groups = this.uniqueBy(data.map(row => {\n        const result = new Group();\n        result.level = level + 1;\n        result.parent = parent;\n\n        for (let i = 0; i <= level; i++) {\n          result[groupByColumns[i]] = row[groupByColumns[i]];\n        }\n\n        return result;\n      }), JSON.stringify);\n      const currentColumn = groupByColumns[level];\n      let subGroups = [];\n      groups.forEach(group => {\n        const rowsInGroup = data.filter(row => group[currentColumn] === row[currentColumn]);\n        group.totalCounts = rowsInGroup.length;\n        const subGroup = this.getSublevel(rowsInGroup, level + 1, groupByColumns, group);\n        subGroup.unshift(group);\n        subGroups = subGroups.concat(subGroup);\n      });\n      this._allGroup = subGroups;\n      return subGroups;\n    }\n\n    isGroup(item) {\n      return item.level;\n    }\n\n    uniqueBy(a, key) {\n      const seen = {};\n      return a.filter(item => {\n        const k = key(item);\n        return seen.hasOwnProperty(k) ? false : seen[k] = true;\n      });\n    }\n\n  }\n\n  GroupsService.ɵfac = function GroupsService_Factory(t) {\n    return new (t || GroupsService)();\n  };\n\n  GroupsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GroupsService,\n    factory: GroupsService.ɵfac\n  });\n  return GroupsService;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/services/shared/groups.service.ts"],"names":["Group","i0","GroupsService","constructor","addGroups","data","groupByColumns","rootGroup","expanded","getSublevel","level","parent","length","groups","uniqueBy","map","row","result","i","JSON","stringify","currentColumn","subGroups","forEach","group","rowsInGroup","filter","totalCounts","subGroup","unshift","concat","_allGroup","isGroup","item","a","key","seen","k","hasOwnProperty","ɵfac","GroupsService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { Group } from 'app/models/shared';\r\nimport * as i0 from \"@angular/core\";\r\nexport class GroupsService {\r\n    constructor() {\r\n        // do nothing\r\n    }\r\n    addGroups(data, groupByColumns) {\r\n        const rootGroup = new Group();\r\n        rootGroup.expanded = true;\r\n        return this.getSublevel(data, 0, groupByColumns, rootGroup);\r\n    }\r\n    getSublevel(data, level, groupByColumns, parent) {\r\n        if (level >= groupByColumns.length) {\r\n            return data;\r\n        }\r\n        const groups = this.uniqueBy(data.map(row => {\r\n            const result = new Group();\r\n            result.level = level + 1;\r\n            result.parent = parent;\r\n            for (let i = 0; i <= level; i++) {\r\n                result[groupByColumns[i]] = row[groupByColumns[i]];\r\n            }\r\n            return result;\r\n        }), JSON.stringify);\r\n        const currentColumn = groupByColumns[level];\r\n        let subGroups = [];\r\n        groups.forEach(group => {\r\n            const rowsInGroup = data.filter(row => group[currentColumn] === row[currentColumn]);\r\n            group.totalCounts = rowsInGroup.length;\r\n            const subGroup = this.getSublevel(rowsInGroup, level + 1, groupByColumns, group);\r\n            subGroup.unshift(group);\r\n            subGroups = subGroups.concat(subGroup);\r\n        });\r\n        this._allGroup = subGroups;\r\n        return subGroups;\r\n    }\r\n    isGroup(item) {\r\n        return item.level;\r\n    }\r\n    uniqueBy(a, key) {\r\n        const seen = {};\r\n        return a.filter((item) => {\r\n            const k = key(item);\r\n            return seen.hasOwnProperty(k) ? false : (seen[k] = true);\r\n        });\r\n    }\r\n}\r\nGroupsService.ɵfac = function GroupsService_Factory(t) { return new (t || GroupsService)(); };\r\nGroupsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: GroupsService, factory: GroupsService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}