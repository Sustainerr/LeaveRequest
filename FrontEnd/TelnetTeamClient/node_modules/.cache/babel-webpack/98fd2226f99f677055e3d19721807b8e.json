{"ast":null,"code":"import { throwError as observableThrowError } from 'rxjs/index';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/services/shared\";\nexport let HttpClientInterceptor = /*#__PURE__*/(() => {\n  class HttpClientInterceptor {\n    constructor(authenticationService) {\n      this.authenticationService = authenticationService;\n    }\n\n    intercept(request, next) {\n      let clonedrequest;\n\n      if (this.authenticationService.isAuthenticatedButTokenExpired()) {\n        return observableThrowError('Your session has expired. Please log in again.');\n      }\n\n      if (this.authenticationService.isAuthenticated()) {\n        if (request.url.indexOf('i18n') >= 0) {\n          // get translation files from localUrl\n          clonedrequest = request.clone({\n            url: environment.localUrl + request.url\n          });\n        } else {\n          // add access token and usernumber to request's header\n          let clonedheaders = request.headers.set('Authorization', 'Bearer ' + this.authenticationService.getProfile().access_token);\n          clonedheaders = clonedheaders.append('tt-usernumber', this.authenticationService.getProfile().currentUser.userNumber);\n          clonedrequest = request.clone({\n            url: environment.apiUrl + request.url,\n            headers: clonedheaders\n          });\n        }\n      } else {\n        clonedrequest = request.clone({\n          url: environment.apiUrl + request.url\n        });\n      }\n\n      return next.handle(clonedrequest);\n    }\n\n  }\n\n  HttpClientInterceptor.ɵfac = function HttpClientInterceptor_Factory(t) {\n    return new (t || HttpClientInterceptor)(i0.ɵɵinject(i1.AuthenticationService));\n  };\n\n  HttpClientInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpClientInterceptor,\n    factory: HttpClientInterceptor.ɵfac\n  });\n  return HttpClientInterceptor;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/interceptors/httpClient.interceptor.ts"],"names":["throwError","observableThrowError","environment","i0","i1","HttpClientInterceptor","constructor","authenticationService","intercept","request","next","clonedrequest","isAuthenticatedButTokenExpired","isAuthenticated","url","indexOf","clone","localUrl","clonedheaders","headers","set","getProfile","access_token","append","currentUser","userNumber","apiUrl","handle","ɵfac","HttpClientInterceptor_Factory","t","ɵɵinject","AuthenticationService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"AAAA,SAASA,UAAU,IAAIC,oBAAvB,QAAmD,YAAnD;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,qBAApB;AACA,WAAaC,qBAAb;AAAO,QAAMA,qBAAN,CAA4B;AAC/BC,IAAAA,WAAW,CAACC,qBAAD,EAAwB;AAC/B,WAAKA,qBAAL,GAA6BA,qBAA7B;AACH;;AACDC,IAAAA,SAAS,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACrB,UAAIC,aAAJ;;AACA,UAAI,KAAKJ,qBAAL,CAA2BK,8BAA3B,EAAJ,EAAiE;AAC7D,eAAOX,oBAAoB,CAAC,gDAAD,CAA3B;AACH;;AACD,UAAI,KAAKM,qBAAL,CAA2BM,eAA3B,EAAJ,EAAkD;AAC9C,YAAIJ,OAAO,CAACK,GAAR,CAAYC,OAAZ,CAAoB,MAApB,KAA+B,CAAnC,EAAsC;AAClC;AACAJ,UAAAA,aAAa,GAAGF,OAAO,CAACO,KAAR,CAAc;AAC1BF,YAAAA,GAAG,EAAEZ,WAAW,CAACe,QAAZ,GAAuBR,OAAO,CAACK;AADV,WAAd,CAAhB;AAGH,SALD,MAMK;AACD;AACA,cAAII,aAAa,GAAGT,OAAO,CAACU,OAAR,CAAgBC,GAAhB,CAAoB,eAApB,EAAqC,YAAY,KAAKb,qBAAL,CAA2Bc,UAA3B,GAAwCC,YAAzF,CAApB;AACAJ,UAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqB,eAArB,EAAsC,KAAKhB,qBAAL,CAA2Bc,UAA3B,GAAwCG,WAAxC,CAAoDC,UAA1F,CAAhB;AACAd,UAAAA,aAAa,GAAGF,OAAO,CAACO,KAAR,CAAc;AAC1BF,YAAAA,GAAG,EAAEZ,WAAW,CAACwB,MAAZ,GAAqBjB,OAAO,CAACK,GADR;AAE1BK,YAAAA,OAAO,EAAED;AAFiB,WAAd,CAAhB;AAIH;AACJ,OAhBD,MAiBK;AACDP,QAAAA,aAAa,GAAGF,OAAO,CAACO,KAAR,CAAc;AAC1BF,UAAAA,GAAG,EAAEZ,WAAW,CAACwB,MAAZ,GAAqBjB,OAAO,CAACK;AADR,SAAd,CAAhB;AAGH;;AACD,aAAOJ,IAAI,CAACiB,MAAL,CAAYhB,aAAZ,CAAP;AACH;;AAhC8B;;AAkCnCN,EAAAA,qBAAqB,CAACuB,IAAtB,GAA6B,SAASC,6BAAT,CAAuCC,CAAvC,EAA0C;AAAE,WAAO,KAAKA,CAAC,IAAIzB,qBAAV,EAAiCF,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,qBAAf,CAAjC,CAAP;AAAiF,GAA1J;;AACA3B,EAAAA,qBAAqB,CAAC4B,KAAtB,GAA8B,aAAc9B,EAAE,CAAC+B,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAE9B,qBAAT;AAAgC+B,IAAAA,OAAO,EAAE/B,qBAAqB,CAACuB;AAA/D,GAAtB,CAA5C;AAnCA,SAAavB,qBAAb;AAAA","sourcesContent":["import { throwError as observableThrowError } from 'rxjs/index';\r\nimport { environment } from '../../environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"app/services/shared\";\r\nexport class HttpClientInterceptor {\r\n    constructor(authenticationService) {\r\n        this.authenticationService = authenticationService;\r\n    }\r\n    intercept(request, next) {\r\n        let clonedrequest;\r\n        if (this.authenticationService.isAuthenticatedButTokenExpired()) {\r\n            return observableThrowError('Your session has expired. Please log in again.');\r\n        }\r\n        if (this.authenticationService.isAuthenticated()) {\r\n            if (request.url.indexOf('i18n') >= 0) {\r\n                // get translation files from localUrl\r\n                clonedrequest = request.clone({\r\n                    url: environment.localUrl + request.url\r\n                });\r\n            }\r\n            else {\r\n                // add access token and usernumber to request's header\r\n                let clonedheaders = request.headers.set('Authorization', 'Bearer ' + this.authenticationService.getProfile().access_token);\r\n                clonedheaders = clonedheaders.append('tt-usernumber', this.authenticationService.getProfile().currentUser.userNumber);\r\n                clonedrequest = request.clone({\r\n                    url: environment.apiUrl + request.url,\r\n                    headers: clonedheaders\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            clonedrequest = request.clone({\r\n                url: environment.apiUrl + request.url\r\n            });\r\n        }\r\n        return next.handle(clonedrequest);\r\n    }\r\n}\r\nHttpClientInterceptor.ɵfac = function HttpClientInterceptor_Factory(t) { return new (t || HttpClientInterceptor)(i0.ɵɵinject(i1.AuthenticationService)); };\r\nHttpClientInterceptor.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HttpClientInterceptor, factory: HttpClientInterceptor.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}