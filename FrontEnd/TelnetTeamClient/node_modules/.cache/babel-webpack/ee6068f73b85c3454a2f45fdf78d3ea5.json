{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Directive, EventEmitter, Inject, ChangeDetectorRef, Optional, Input, Output, ViewChild, ElementRef, ContentChild, HostBinding, Component, forwardRef, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { MatSelect } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/checkbox';\nimport * as ɵngcc6 from '@angular/material/tooltip';\nimport * as ɵngcc7 from '@angular/material/progress-spinner';\nimport * as ɵngcc8 from '@angular/material/button';\nimport * as ɵngcc9 from '@angular/material/icon';\nimport * as ɵngcc10 from '@angular/material/select';\nimport * as ɵngcc11 from '@angular/material/core';\nimport * as ɵngcc12 from '@angular/material/form-field';\nconst _c0 = [\"searchSelectInput\"];\nconst _c1 = [\"innerSelectSearch\"];\n\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    ɵngcc0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6._emitSelectAllBooleanToParent($event.checked);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toogleAllCheckboxTooltipPosition);\n  }\n}\n\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-icon\");\n    ɵngcc0.ɵɵtext(1, \"close\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11._reset(true);\n    });\n    ɵngcc0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    ɵngcc0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 0, \"ng-template\", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r9 = ɵngcc0.ɵɵreference(3);\n\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.noEntriesFoundLabel, \"\\n\");\n  }\n}\n\nconst _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]]];\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\n\nconst _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\"];\nlet MatSelectSearchClearDirective = /*#__PURE__*/(() => {\n  let MatSelectSearchClearDirective = class MatSelectSearchClearDirective {};\n\n  MatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) {\n    return new (t || MatSelectSearchClearDirective)();\n  };\n\n  MatSelectSearchClearDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatSelectSearchClearDirective,\n    selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n  });\n  /**\n   * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n\n  return MatSelectSearchClearDirective;\n})();\nvar MatSelectSearchComponent_1;\n/** The max height of the select's overlay panel. */\n\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n\nlet MatSelectSearchComponent = MatSelectSearchComponent_1 = class MatSelectSearchComponent {\n  constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null) {\n    this.matSelect = matSelect;\n    this.changeDetectorRef = changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this.matOption = matOption;\n    this.liveAnnouncer = liveAnnouncer;\n    this.matFormField = matFormField;\n    /** Label of the search placeholder */\n\n    this.placeholderLabel = 'Suche';\n    /** Type of the search input field */\n\n    this.type = 'text';\n    /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n\n    this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n    /**\n     *  Text that is appended to the currently active item label announced by screen readers,\n     *  informing the user of the current index, value and total options.\n     *  eg: Bank R (Germany) 1 of 6\n    */\n\n    this.indexAndLengthScreenReaderText = ' of ';\n    /**\n      * Whether or not the search field should be cleared after the dropdown menu is closed.\n      * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n      */\n\n    this.clearSearchInput = true;\n    /** Whether to show the search-in-progress indicator */\n\n    this.searching = false;\n    /** Disables initial focusing of the input field */\n\n    this.disableInitialFocus = false;\n    /** Enable clear input on escape pressed */\n\n    this.enableClearOnEscapePressed = false;\n    /**\n     * Prevents home / end key being propagated to mat-select,\n     * allowing to move the cursor within the search input instead of navigating the options\n     */\n\n    this.preventHomeEndKeyPropagation = false;\n    /** Disables scrolling to active options when option list changes. Useful for server-side search */\n\n    this.disableScrollToActiveOnOptionsChanged = false;\n    /** Adds 508 screen reader support for search box */\n\n    this.ariaLabel = 'dropdown search';\n    /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n\n    this.showToggleAllCheckbox = false;\n    /** select all checkbox checked state */\n\n    this.toggleAllCheckboxChecked = false;\n    /** select all checkbox indeterminate state */\n\n    this.toggleAllCheckboxIndeterminate = false;\n    /** Display a message in a tooltip on the toggle-all checkbox */\n\n    this.toggleAllCheckboxTooltipMessage = '';\n    /** Define the position of the tooltip on the toggle-all checkbox. */\n\n    this.toogleAllCheckboxTooltipPosition = 'below';\n    /** Show/Hide the search clear button of the search input */\n\n    this.hideClearSearchButton = false;\n    /**\n     * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n     * Defaults to false, so selected options are only restored while filtering is active.\n     */\n\n    this.alwaysRestoreSelectedOptionsMulti = false;\n    /** Output emitter to send to parent component with the toggle all boolean */\n\n    this.toggleAll = new EventEmitter();\n\n    this.onTouched = _ => {};\n\n    this._options$ = new BehaviorSubject(null);\n    this.optionsList$ = this._options$.pipe(switchMap(_options => _options ? _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n    this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n    this._formControl = new FormControl('');\n    /** whether to show the no entries found message */\n\n    this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value && optionsLength === this.getOptionsLengthOffset()));\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n  }\n\n  get isInsideMatOption() {\n    return !!this.matOption;\n  }\n  /** Current search value */\n\n\n  get value() {\n    return this._formControl.value;\n  }\n  /** Reference to the MatSelect options */\n\n\n  set _options(_options) {\n    this._options$.next(_options);\n  }\n\n  get _options() {\n    return this._options$.getValue();\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        this.matSelect.panelClass.push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    } // set custom mat-option class if the component was placed inside a mat-option\n\n\n    if (this.matOption) {\n      this.matOption.disabled = true;\n\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    } // when the select dropdown panel is opened or closed\n\n\n    this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(opened => {\n      if (opened) {\n        this.updateInputWidth(); // focus the search field when opening\n\n        if (!this.disableInitialFocus) {\n          this._focus();\n        }\n      } else {\n        // clear it when closing\n        if (this.clearSearchInput) {\n          this._reset();\n        }\n      }\n    }); // set the first item active after the options changed\n\n    this.matSelect.openedChange.pipe(take(1)).pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      if (this.matSelect._keyManager) {\n        this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n      } else {\n        console.log('_keyManager was not initialized.');\n      }\n\n      this._options = this.matSelect.options; // Closure variable for tracking the most recent first option.\n      // In order to avoid avoid causing the list to\n      // scroll to the top when options are added to the bottom of\n      // the list (eg: infinite scroll), we compare only\n      // the changes to the first options to determine if we\n      // should set the first item as active.\n      // This prevents unnecessary scrolling to the top of the list\n      // when options are appended, but allows the first item\n      // in the list to be set as active by default when there\n      // is no active selection\n\n      let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n\n      this._options.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        // avoid \"expression has been changed\" error\n        setTimeout(() => {\n          // Convert the QueryList to an array\n          const options = this._options.toArray(); // The true first item is offset by 1\n\n\n          const currentFirstOption = options[this.getOptionsLengthOffset()];\n          const keyManager = this.matSelect._keyManager;\n\n          if (keyManager && this.matSelect.panelOpen) {\n            // set first item active and input width\n            // Check to see if the first option in these changes is different from the previous.\n            const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption); // CASE: The first option is different now.\n            // Indiciates we should set it as active and scroll to the top.\n\n            if (firstOptionIsChanged || !keyManager.activeItem || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n              keyManager.setFirstItemActive();\n            } // wait for panel width changes\n\n\n            setTimeout(() => {\n              this.updateInputWidth();\n            });\n\n            if (!this.disableScrollToActiveOnOptionsChanged) {\n              this.adjustScrollTopToFitActiveOptionIntoView();\n            }\n          } // Update our reference\n\n\n          previousFirstOption = currentFirstOption;\n        });\n      });\n    }); // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n\n    this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    }); // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n\n\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      if (this.matSelect.panelOpen) {\n        this.updateInputWidth();\n      }\n    });\n\n    this.initMultipleHandling();\n    this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  _emitSelectAllBooleanToParent(state) {\n    this.toggleAll.emit(state);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n\n    this._onDestroy.complete();\n  }\n\n  _isToggleAllCheckboxVisible() {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n\n\n  _handleKeydown(event) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n      event.stopPropagation();\n    }\n\n    if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n      // Regain focus after multiselect, so we can further type\n      setTimeout(() => this._focus());\n    } // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n\n\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n      this._reset(true);\n\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n\n\n  _handleKeyup(event) {\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n\n      if (index !== -1) {\n        const activeDescendant = this._options.toArray()[index];\n\n        this.liveAnnouncer.announce(activeDescendant.viewValue + ' ' + this.getAriaIndex(index) + this.indexAndLengthScreenReaderText + this.getAriaLength());\n      }\n    }\n  }\n  /**\n   * Calculate the index of the current option, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n   */\n\n\n  getAriaIndex(optionIndex) {\n    if (this.getOptionsLengthOffset() === 0) {\n      return optionIndex + 1;\n    }\n\n    return optionIndex;\n  }\n  /**\n   * Calculate the length of the options, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n   *    Case 2 [1, 2, 3] will have length of options.length.\n   */\n\n\n  getAriaLength() {\n    return this._options.toArray().length - this.getOptionsLengthOffset();\n  }\n\n  writeValue(value) {\n    this._lastExternalInputValue = value;\n\n    this._formControl.setValue(value);\n\n    this.changeDetectorRef.markForCheck();\n  }\n\n  onBlur() {\n    this.onTouched();\n  }\n\n  registerOnChange(fn) {\n    this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Focuses the search input field\n   */\n\n\n  _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    } // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n\n\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop; // focus\n\n    this.searchSelectInput.nativeElement.focus();\n    panel.scrollTop = scrollTop;\n  }\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n\n\n  _reset(focus) {\n    this._formControl.setValue('');\n\n    if (focus) {\n      this._focus();\n    }\n  }\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n\n\n  initMultipleHandling() {\n    if (!this.matSelect.ngControl) {\n      if (this.matSelect.multiple) {\n        // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n        // is necessary to properly work in multi-selection mode.\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n      }\n\n      return;\n    } // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n\n\n    this.previousSelectedValues = this.matSelect.ngControl.value;\n    this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(values => {\n      let restoreSelectedValues = false;\n\n      if (this.matSelect.multiple) {\n        if ((this.alwaysRestoreSelectedOptionsMulti || this._formControl.value && this._formControl.value.length) && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n          if (!values || !Array.isArray(values)) {\n            values = [];\n          }\n\n          const optionValues = this.matSelect.options.map(option => option.value);\n          this.previousSelectedValues.forEach(previousValue => {\n            if (!values.some(v => this.matSelect.compareWith(v, previousValue)) && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n              // if a value that was selected before is deselected and not found in the options, it was deselected\n              // due to the filtering, so we restore it.\n              values.push(previousValue);\n              restoreSelectedValues = true;\n            }\n          });\n        }\n      }\n\n      this.previousSelectedValues = values;\n\n      if (restoreSelectedValues) {\n        this.matSelect._onChange(values);\n      }\n    });\n  }\n  /**\n   * Scrolls the currently active option into the view if it is not yet visible.\n   */\n\n\n  adjustScrollTopToFitActiveOptionIntoView() {\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\n      const matOptionHeight = this.getMatOptionHeight();\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups); // If the component is in a MatOption, the activeItemIndex will be offset by one.\n\n\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n      }\n    }\n  }\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n\n\n  updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n\n    let element = this.innerSelectSearch.nativeElement;\n    let panelElement;\n\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  getMatOptionHeight() {\n    if (this.matSelect.options.length > 0) {\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n    }\n\n    return 0;\n  }\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n\n\n  getOptionsLengthOffset() {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n};\n\nMatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) {\n  return new (t || MatSelectSearchComponent)(ɵngcc0.ɵɵdirectiveInject(MatSelect), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MatOption, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MatFormField, 8));\n};\n\nMatSelectSearchComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSelectSearchComponent,\n  selectors: [[\"ngx-mat-select-search\"]],\n  contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n    }\n  },\n  viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 7, ElementRef);\n      ɵngcc0.ɵɵviewQuery(_c1, 7, ElementRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n    }\n  },\n  inputs: {\n    placeholderLabel: \"placeholderLabel\",\n    type: \"type\",\n    noEntriesFoundLabel: \"noEntriesFoundLabel\",\n    indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\",\n    clearSearchInput: \"clearSearchInput\",\n    searching: \"searching\",\n    disableInitialFocus: \"disableInitialFocus\",\n    enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n    preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n    disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n    ariaLabel: \"ariaLabel\",\n    showToggleAllCheckbox: \"showToggleAllCheckbox\",\n    toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n    toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n    toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n    toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\",\n    hideClearSearchButton: \"hideClearSearchButton\",\n    alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\"\n  },\n  outputs: {\n    toggleAll: \"toggleAll\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSelectSearchComponent_1),\n    multi: true\n  }])],\n  ngContentSelectors: _c4,\n  decls: 11,\n  vars: 14,\n  consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [1, \"mat-select-search-no-entries-found\"]],\n  template: function MatSelectSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelement(0, \"input\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n      ɵngcc0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n      ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n        return ctx._handleKeydown($event);\n      })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n        return ctx._handleKeyup($event);\n      })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n        return ctx.onBlur();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n      ɵngcc0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n      ɵngcc0.ɵɵprojection(8);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 2, 1, \"div\", 8);\n      ɵngcc0.ɵɵpipe(10, \"async\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.searching);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n    }\n  },\n  directives: [ɵngcc3.NgClass, ɵngcc3.NgIf, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlDirective, ɵngcc5.MatCheckbox, ɵngcc6.MatTooltip, ɵngcc7.MatSpinner, ɵngcc8.MatButton, ɵngcc9.MatIcon],\n  pipes: [ɵngcc3.AsyncPipe],\n  styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"],\n  changeDetection: 0\n});\n\nMatSelectSearchComponent.ctorParameters = () => [{\n  type: MatSelect,\n  decorators: [{\n    type: Inject,\n    args: [MatSelect]\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: MatOption,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MatOption]\n  }]\n}, {\n  type: LiveAnnouncer\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MatFormField]\n  }]\n}];\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"placeholderLabel\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"type\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"noEntriesFoundLabel\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"indexAndLengthScreenReaderText\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"clearSearchInput\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"searching\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"disableInitialFocus\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"enableClearOnEscapePressed\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"preventHomeEndKeyPropagation\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"disableScrollToActiveOnOptionsChanged\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"ariaLabel\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"showToggleAllCheckbox\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"toggleAllCheckboxChecked\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"toggleAllCheckboxIndeterminate\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"toggleAllCheckboxTooltipMessage\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"toogleAllCheckboxTooltipPosition\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"hideClearSearchButton\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"alwaysRestoreSelectedOptionsMulti\", void 0);\n\n__decorate([Output()], MatSelectSearchComponent.prototype, \"toggleAll\", void 0);\n\n__decorate([ViewChild('searchSelectInput', {\n  read: ElementRef,\n  static: true\n})], MatSelectSearchComponent.prototype, \"searchSelectInput\", void 0);\n\n__decorate([ViewChild('innerSelectSearch', {\n  read: ElementRef,\n  static: true\n})], MatSelectSearchComponent.prototype, \"innerSelectSearch\", void 0);\n\n__decorate([ContentChild(MatSelectSearchClearDirective, {\n  static: false\n})], MatSelectSearchComponent.prototype, \"clearIcon\", void 0);\n\n__decorate([HostBinding('class.mat-select-search-inside-mat-option')], MatSelectSearchComponent.prototype, \"isInsideMatOption\", null);\n\nMatSelectSearchComponent = MatSelectSearchComponent_1 = __decorate([__param(0, Inject(MatSelect)), __param(3, Optional()), __param(3, Inject(MatOption)), __param(5, Optional()), __param(5, Inject(MatFormField))], MatSelectSearchComponent);\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst MatSelectSearchVersion = '3.3.3';\nlet NgxMatSelectSearchModule = /*#__PURE__*/(() => {\n  let NgxMatSelectSearchModule = class NgxMatSelectSearchModule {};\n\n  NgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) {\n    return new (t || NgxMatSelectSearchModule)();\n  };\n\n  NgxMatSelectSearchModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxMatSelectSearchModule\n  });\n  NgxMatSelectSearchModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule]]\n  });\n  return NgxMatSelectSearchModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMatSelectSearchModule, {\n    declarations: function () {\n      return [MatSelectSearchComponent, MatSelectSearchClearDirective];\n    },\n    imports: function () {\n      return [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule];\n    },\n    exports: function () {\n      return [MatSelectSearchComponent, MatSelectSearchClearDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, MatSelectSearchClearDirective as ɵa };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/ngx-mat-select-search/__ivy_ngcc__/fesm2015/ngx-mat-select-search.js"],"names":["__decorate","__param","Directive","EventEmitter","Inject","ChangeDetectorRef","Optional","Input","Output","ViewChild","ElementRef","ContentChild","HostBinding","Component","forwardRef","ChangeDetectionStrategy","NgModule","FormControl","NG_VALUE_ACCESSOR","ReactiveFormsModule","_countGroupLabelsBeforeOption","MatOption","MatSelect","MatFormField","A","Z","ZERO","NINE","SPACE","HOME","END","ENTER","ESCAPE","UP_ARROW","DOWN_ARROW","ViewportRuler","LiveAnnouncer","BehaviorSubject","of","combineLatest","Subject","switchMap","map","startWith","delay","takeUntil","take","filter","tap","MatButtonModule","MatCheckboxModule","MatIconModule","MatProgressSpinnerModule","MatTooltipModule","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","ɵngcc9","ɵngcc10","ɵngcc11","ɵngcc12","_c0","_c1","MatSelectSearchComponent_mat_checkbox_3_Template","rf","ctx","_r7","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener","$event","ɵɵrestoreView","ctx_r6","ɵɵnextContext","_emitSelectAllBooleanToParent","checked","ɵɵelementEnd","ctx_r1","ɵɵproperty","matFormField","color","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toogleAllCheckboxTooltipPosition","MatSelectSearchComponent_mat_spinner_6_Template","ɵɵelement","MatSelectSearchComponent_button_7_ng_content_1_Template","ɵɵprojection","MatSelectSearchComponent_button_7_ng_template_2_Template","ɵɵtext","MatSelectSearchComponent_button_7_Template","_r12","MatSelectSearchComponent_button_7_Template_button_click_0_listener","ctx_r11","_reset","ɵɵtemplate","ɵɵtemplateRefExtractor","_r9","ɵɵreference","ctx_r4","ɵɵadvance","clearIcon","MatSelectSearchComponent_div_9_Template","ctx_r5","ɵɵtextInterpolate1","noEntriesFoundLabel","_c2","_c3","a0","a1","_c4","MatSelectSearchClearDirective","ɵfac","MatSelectSearchClearDirective_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","MatSelectSearchComponent_1","SELECT_PANEL_MAX_HEIGHT","MatSelectSearchComponent","constructor","matSelect","changeDetectorRef","_viewportRuler","matOption","liveAnnouncer","placeholderLabel","indexAndLengthScreenReaderText","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","toggleAll","onTouched","_","_options$","optionsList$","pipe","_options","changes","options","toArray","optionsLength$","length","_formControl","_showNoEntriesFound$","valueChanges","value","optionsLength","getOptionsLengthOffset","_onDestroy","isInsideMatOption","next","getValue","ngOnInit","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","console","error","openedChange","subscribe","opened","updateInputWidth","_focus","_keyManager","change","adjustScrollTopToFitActiveOptionIntoView","log","previousFirstOption","setTimeout","currentFirstOption","keyManager","panelOpen","firstOptionIsChanged","compareWith","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","initMultipleHandling","markForCheck","state","emit","ngOnDestroy","complete","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","key","keyCode","stopPropagation","_handleKeyup","ariaActiveDescendantId","_getAriaActiveDescendant","index","findIndex","item","id","activeDescendant","announce","viewValue","getAriaIndex","getAriaLength","optionIndex","writeValue","_lastExternalInputValue","setValue","onBlur","registerOnChange","fn","undefined","registerOnTouched","searchSelectInput","panel","nativeElement","scrollTop","focus","ngControl","previousSelectedValues","values","restoreSelectedValues","optionValues","forEach","previousValue","some","v","_onChange","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","indexOfFirstVisibleOption","round","element","panelElement","parentElement","contains","style","width","clientWidth","first","getBoundingClientRect","height","MatSelectSearchComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelectSearchComponent_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatSelectSearchComponent_Query","ɵɵviewQuery","hostVars","hostBindings","MatSelectSearchComponent_HostBindings","ɵɵclassProp","inputs","outputs","features","ɵɵProvidersFeature","provide","useExisting","multi","ngContentSelectors","decls","vars","consts","template","MatSelectSearchComponent_Template","ɵɵprojectionDef","MatSelectSearchComponent_Template_input_keydown_4_listener","MatSelectSearchComponent_Template_input_keyup_4_listener","MatSelectSearchComponent_Template_input_blur_4_listener","ɵɵpipe","ɵɵpureFunction2","ɵɵattribute","ɵɵpipeBind1","directives","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","FormControlDirective","MatCheckbox","MatTooltip","MatSpinner","MatButton","MatIcon","pipes","AsyncPipe","styles","changeDetection","ctorParameters","decorators","args","prototype","read","static","MatSelectSearchVersion","NgxMatSelectSearchModule","NgxMatSelectSearchModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngDevMode","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵa"],"mappings":"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","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { Directive, EventEmitter, Inject, ChangeDetectorRef, Optional, Input, Output, ViewChild, ElementRef, ContentChild, HostBinding, Component, forwardRef, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { MatSelect } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/checkbox';\nimport * as ɵngcc6 from '@angular/material/tooltip';\nimport * as ɵngcc7 from '@angular/material/progress-spinner';\nimport * as ɵngcc8 from '@angular/material/button';\nimport * as ɵngcc9 from '@angular/material/icon';\nimport * as ɵngcc10 from '@angular/material/select';\nimport * as ɵngcc11 from '@angular/material/core';\nimport * as ɵngcc12 from '@angular/material/form-field';\n\nconst _c0 = [\"searchSelectInput\"];\nconst _c1 = [\"innerSelectSearch\"];\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    ɵngcc0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6._emitSelectAllBooleanToParent($event.checked); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toogleAllCheckboxTooltipPosition);\n} }\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-spinner\", 10);\n} }\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n} }\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-icon\");\n    ɵngcc0.ɵɵtext(1, \"close\");\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11._reset(true); });\n    ɵngcc0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    ɵngcc0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 0, \"ng-template\", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _r9 = ɵngcc0.ɵɵreference(3);\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n} }\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.noEntriesFoundLabel, \"\\n\");\n} }\nconst _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]]];\nconst _c3 = function (a0, a1) { return { \"mat-select-search-inner-multiple\": a0, \"mat-select-search-inner-toggle-all\": a1 }; };\nconst _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\"];\nlet MatSelectSearchClearDirective = class MatSelectSearchClearDirective {\n};\nMatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) { return new (t || MatSelectSearchClearDirective)(); };\nMatSelectSearchClearDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectSearchClearDirective, selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]] });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatSelectSearchComponent_1;\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nlet MatSelectSearchComponent = MatSelectSearchComponent_1 = class MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.liveAnnouncer = liveAnnouncer;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n         *  Text that is appended to the currently active item label announced by screen readers,\n         *  informing the user of the current index, value and total options.\n         *  eg: Bank R (Germany) 1 of 6\n        */\n        this.indexAndLengthScreenReaderText = ' of ';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toogleAllCheckboxTooltipPosition = 'below';\n        /** Show/Hide the search clear button of the search input */\n        this.hideClearSearchButton = false;\n        /**\n         * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n         * Defaults to false, so selected options are only restored while filtering is active.\n         */\n        this.alwaysRestoreSelectedOptionsMulti = false;\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = (_) => { };\n        this._options$ = new BehaviorSubject(null);\n        this.optionsList$ = this._options$.pipe(switchMap(_options => _options ?\n            _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n        this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this.optionsLength$\n        ]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n            && optionsLength === this.getOptionsLengthOffset()));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n    }\n    get isInsideMatOption() {\n        return !!this.matOption;\n    }\n    /** Current search value */\n    get value() {\n        return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n    set _options(_options) {\n        this._options$.next(_options);\n    }\n    get _options() {\n        return this._options$.getValue();\n    }\n    ngOnInit() {\n        // set custom panel class\n        const panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                this.matSelect.panelClass.push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect._keyManager) {\n                this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n                    .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n            }\n            else {\n                console.log('_keyManager was not initialized.');\n            }\n            this._options = this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n            this._options.changes\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => {\n                // avoid \"expression has been changed\" error\n                setTimeout(() => {\n                    // Convert the QueryList to an array\n                    const options = this._options.toArray();\n                    // The true first item is offset by 1\n                    const currentFirstOption = options[this.getOptionsLengthOffset()];\n                    const keyManager = this.matSelect._keyManager;\n                    if (keyManager && this.matSelect.panelOpen) {\n                        // set first item active and input width\n                        // Check to see if the first option in these changes is different from the previous.\n                        const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged\n                            || !keyManager.activeItem\n                            || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // wait for panel width changes\n                        setTimeout(() => {\n                            this.updateInputWidth();\n                        });\n                        if (!this.disableScrollToActiveOnOptionsChanged) {\n                            this.adjustScrollTopToFitActiveOptionIntoView();\n                        }\n                    }\n                    // Update our reference\n                    previousFirstOption = currentFirstOption;\n                });\n            });\n        });\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n            // set no entries found class on mat option\n            if (this.matOption) {\n                if (showNoEntriesFound) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            // update view when available options change\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n            // Regain focus after multiselect, so we can further type\n            setTimeout(() => this._focus());\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n            const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n            if (index !== -1) {\n                const activeDescendant = this._options.toArray()[index];\n                this.liveAnnouncer.announce(activeDescendant.viewValue + ' '\n                    + this.getAriaIndex(index)\n                    + this.indexAndLengthScreenReaderText\n                    + this.getAriaLength());\n            }\n        }\n    }\n    /**\n     * Calculate the index of the current option, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n     */\n    getAriaIndex(optionIndex) {\n        if (this.getOptionsLengthOffset() === 0) {\n            return optionIndex + 1;\n        }\n        return optionIndex;\n    }\n    /**\n     * Calculate the length of the options, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n     *    Case 2 [1, 2, 3] will have length of options.length.\n     */\n    getAriaLength() {\n        return this._options.toArray().length - this.getOptionsLengthOffset();\n    }\n    writeValue(value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n    onBlur() {\n        this.onTouched();\n    }\n    registerOnChange(fn) {\n        this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        const panel = this.matSelect.panel.nativeElement;\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    _reset(focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    initMultipleHandling() {\n        if (!this.matSelect.ngControl) {\n            if (this.matSelect.multiple) {\n                // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n                // is necessary to properly work in multi-selection mode.\n                console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n            }\n            return;\n        }\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((values) => {\n            let restoreSelectedValues = false;\n            if (this.matSelect.multiple) {\n                if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                            && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n            }\n            this.previousSelectedValues = values;\n            if (restoreSelectedValues) {\n                this.matSelect._onChange(values);\n            }\n        });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n    adjustScrollTopToFitActiveOptionIntoView() {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n            const matOptionHeight = this.getMatOptionHeight();\n            const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\n            const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n            const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n            const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n            const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n            const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n            }\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n                    - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n            }\n        }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        let element = this.innerSelectSearch.nativeElement;\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    getMatOptionHeight() {\n        if (this.matSelect.options.length > 0) {\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n        return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    getOptionsLengthOffset() {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n};\nMatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) { return new (t || MatSelectSearchComponent)(ɵngcc0.ɵɵdirectiveInject(MatSelect), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MatOption, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MatFormField, 8)); };\nMatSelectSearchComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelectSearchComponent, selectors: [[\"ngx-mat-select-search\"]], contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n    } }, viewQuery: function MatSelectSearchComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7, ElementRef);\n        ɵngcc0.ɵɵviewQuery(_c1, 7, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    } }, hostVars: 2, hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n    } }, inputs: { placeholderLabel: \"placeholderLabel\", type: \"type\", noEntriesFoundLabel: \"noEntriesFoundLabel\", indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\", clearSearchInput: \"clearSearchInput\", searching: \"searching\", disableInitialFocus: \"disableInitialFocus\", enableClearOnEscapePressed: \"enableClearOnEscapePressed\", preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\", disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\", ariaLabel: \"ariaLabel\", showToggleAllCheckbox: \"showToggleAllCheckbox\", toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\", toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\", toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\", toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\", hideClearSearchButton: \"hideClearSearchButton\", alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\" }, outputs: { toggleAll: \"toggleAll\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MatSelectSearchComponent_1),\n                multi: true\n            }\n        ])], ngContentSelectors: _c4, decls: 11, vars: 14, consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [1, \"mat-select-search-no-entries-found\"]], template: function MatSelectSearchComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelement(0, \"input\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) { return ctx._handleKeydown($event); })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) { return ctx._handleKeyup($event); })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() { return ctx.onBlur(); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n        ɵngcc0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n        ɵngcc0.ɵɵprojection(8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 2, 1, \"div\", 8);\n        ɵngcc0.ɵɵpipe(10, \"async\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.searching);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n    } }, directives: [ɵngcc3.NgClass, ɵngcc3.NgIf, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlDirective, ɵngcc5.MatCheckbox, ɵngcc6.MatTooltip, ɵngcc7.MatSpinner, ɵngcc8.MatButton, ɵngcc9.MatIcon], pipes: [ɵngcc3.AsyncPipe], styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"], changeDetection: 0 });\nMatSelectSearchComponent.ctorParameters = () => [\n    { type: MatSelect, decorators: [{ type: Inject, args: [MatSelect,] }] },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: MatOption, decorators: [{ type: Optional }, { type: Inject, args: [MatOption,] }] },\n    { type: LiveAnnouncer },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MatFormField,] }] }\n];\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"placeholderLabel\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"type\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"noEntriesFoundLabel\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"indexAndLengthScreenReaderText\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"clearSearchInput\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"searching\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"disableInitialFocus\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"enableClearOnEscapePressed\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"preventHomeEndKeyPropagation\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"disableScrollToActiveOnOptionsChanged\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"ariaLabel\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"showToggleAllCheckbox\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"toggleAllCheckboxChecked\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"toggleAllCheckboxIndeterminate\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"toggleAllCheckboxTooltipMessage\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"toogleAllCheckboxTooltipPosition\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"hideClearSearchButton\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"alwaysRestoreSelectedOptionsMulti\", void 0);\n__decorate([\n    Output()\n], MatSelectSearchComponent.prototype, \"toggleAll\", void 0);\n__decorate([\n    ViewChild('searchSelectInput', { read: ElementRef, static: true })\n], MatSelectSearchComponent.prototype, \"searchSelectInput\", void 0);\n__decorate([\n    ViewChild('innerSelectSearch', { read: ElementRef, static: true })\n], MatSelectSearchComponent.prototype, \"innerSelectSearch\", void 0);\n__decorate([\n    ContentChild(MatSelectSearchClearDirective, { static: false })\n], MatSelectSearchComponent.prototype, \"clearIcon\", void 0);\n__decorate([\n    HostBinding('class.mat-select-search-inside-mat-option')\n], MatSelectSearchComponent.prototype, \"isInsideMatOption\", null);\nMatSelectSearchComponent = MatSelectSearchComponent_1 = __decorate([ __param(0, Inject(MatSelect)),\n    __param(3, Optional()), __param(3, Inject(MatOption)),\n    __param(5, Optional()), __param(5, Inject(MatFormField))\n], MatSelectSearchComponent);\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '3.3.3';\nlet NgxMatSelectSearchModule = class NgxMatSelectSearchModule {\n};\nNgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) { return new (t || NgxMatSelectSearchModule)(); };\nNgxMatSelectSearchModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxMatSelectSearchModule });\nNgxMatSelectSearchModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatButtonModule,\n            MatCheckboxModule,\n            MatIconModule,\n            MatProgressSpinnerModule,\n            MatTooltipModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectSearchClearDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxMatSelectSearchClear]'\n            }]\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectSearchComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-select-search',\n                template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon>close</mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  {{noEntriesFoundLabel}}\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\",\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MatSelectSearchComponent_1),\n                        multi: true\n                    }\n                ],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\"]\n            }]\n    }], function () { return [{ type: ɵngcc10.MatSelect, decorators: [{\n                type: Inject,\n                args: [MatSelect]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc11.MatOption, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MatOption]\n            }] }, { type: ɵngcc2.LiveAnnouncer }, { type: ɵngcc12.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MatFormField]\n            }] }]; }, { placeholderLabel: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], noEntriesFoundLabel: [{\n            type: Input\n        }], indexAndLengthScreenReaderText: [{\n            type: Input\n        }], clearSearchInput: [{\n            type: Input\n        }], searching: [{\n            type: Input\n        }], disableInitialFocus: [{\n            type: Input\n        }], enableClearOnEscapePressed: [{\n            type: Input\n        }], preventHomeEndKeyPropagation: [{\n            type: Input\n        }], disableScrollToActiveOnOptionsChanged: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input\n        }], showToggleAllCheckbox: [{\n            type: Input\n        }], toggleAllCheckboxChecked: [{\n            type: Input\n        }], toggleAllCheckboxIndeterminate: [{\n            type: Input\n        }], toggleAllCheckboxTooltipMessage: [{\n            type: Input\n        }], toogleAllCheckboxTooltipPosition: [{\n            type: Input\n        }], hideClearSearchButton: [{\n            type: Input\n        }], alwaysRestoreSelectedOptionsMulti: [{\n            type: Input\n        }], toggleAll: [{\n            type: Output\n        }], isInsideMatOption: [{\n            type: HostBinding,\n            args: ['class.mat-select-search-inside-mat-option']\n        }], searchSelectInput: [{\n            type: ViewChild,\n            args: ['searchSelectInput', { read: ElementRef, static: true }]\n        }], innerSelectSearch: [{\n            type: ViewChild,\n            args: ['innerSelectSearch', { read: ElementRef, static: true }]\n        }], clearIcon: [{\n            type: ContentChild,\n            args: [MatSelectSearchClearDirective, { static: false }]\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxMatSelectSearchModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatButtonModule,\n                    MatCheckboxModule,\n                    MatIconModule,\n                    MatProgressSpinnerModule,\n                    MatTooltipModule\n                ],\n                declarations: [\n                    MatSelectSearchComponent,\n                    MatSelectSearchClearDirective\n                ],\n                exports: [\n                    MatSelectSearchComponent,\n                    MatSelectSearchClearDirective\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMatSelectSearchModule, { declarations: function () { return [MatSelectSearchComponent, MatSelectSearchClearDirective]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule]; }, exports: function () { return [MatSelectSearchComponent, MatSelectSearchClearDirective]; } }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, MatSelectSearchClearDirective as ɵa };\n\n"]},"metadata":{},"sourceType":"module"}