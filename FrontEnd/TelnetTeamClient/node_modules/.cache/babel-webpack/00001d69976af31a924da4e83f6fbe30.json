{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.token = null;\n      this.apiUrl = 'https://localhost:7216/api/Utilisateur'; // Replace with your actual API URL\n    }\n\n    login(Matricule, password) {\n      return this.http.post(`https://localhost:7216/api/Utilisateur/login`, {\n        matricule,\n        password\n      });\n    }\n\n    setToken(token) {\n      console.log('Setting token:', token); // Add this line\n\n      this.token = token;\n      localStorage.setItem('token', token); // Save token to localStorage\n    }\n\n    getToken() {\n      const token = this.token || localStorage.getItem('token');\n      console.log('Retrieved token:', token); // Add this line\n\n      return token;\n    }\n\n    isLoggedIn() {\n      // Check if user is logged in based on token existence\n      return !!this.getToken();\n    }\n\n    getUserById(userId) {\n      const url = `${this.apiUrl}/${userId}`;\n      return this.http.get(url);\n    }\n\n    logout() {\n      localStorage.removeItem('token'); // Remove token from localStorage\n      // Redirect to login page or any other desired action\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/src/app/auth.service.ts"],"names":["i0","i1","AuthService","constructor","http","token","apiUrl","login","Matricule","password","post","matricule","setToken","console","log","localStorage","setItem","getToken","getItem","isLoggedIn","getUserById","userId","url","get","logout","removeItem","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,WAAaC,WAAb;AAAO,QAAMA,WAAN,CAAkB;AACrBC,IAAAA,WAAW,CAACC,IAAD,EAAO;AACd,WAAKA,IAAL,GAAYA,IAAZ;AACA,WAAKC,KAAL,GAAa,IAAb;AACA,WAAKC,MAAL,GAAc,wCAAd,CAHc,CAG0C;AAC3D;;AACDC,IAAAA,KAAK,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AACvB,aAAO,KAAKL,IAAL,CAAUM,IAAV,CAAgB,8CAAhB,EAA+D;AAAEC,QAAAA,SAAF;AAAaF,QAAAA;AAAb,OAA/D,CAAP;AACH;;AACDG,IAAAA,QAAQ,CAACP,KAAD,EAAQ;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BT,KAA9B,EADY,CAC0B;;AACtC,WAAKA,KAAL,GAAaA,KAAb;AACAU,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BX,KAA9B,EAHY,CAG0B;AACzC;;AACDY,IAAAA,QAAQ,GAAG;AACP,YAAMZ,KAAK,GAAG,KAAKA,KAAL,IAAcU,YAAY,CAACG,OAAb,CAAqB,OAArB,CAA5B;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCT,KAAhC,EAFO,CAEiC;;AACxC,aAAOA,KAAP;AACH;;AACDc,IAAAA,UAAU,GAAG;AACT;AACA,aAAO,CAAC,CAAC,KAAKF,QAAL,EAAT;AACH;;AACDG,IAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,YAAMC,GAAG,GAAI,GAAE,KAAKhB,MAAO,IAAGe,MAAO,EAArC;AACA,aAAO,KAAKjB,IAAL,CAAUmB,GAAV,CAAcD,GAAd,CAAP;AACH;;AACDE,IAAAA,MAAM,GAAG;AACLT,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB,EADK,CAC6B;AAClC;AACH;;AA9BoB;;AAgCzBvB,EAAAA,WAAW,CAACwB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,WAAO,KAAKA,CAAC,IAAI1B,WAAV,EAAuBF,EAAE,CAAC6B,QAAH,CAAY5B,EAAE,CAAC6B,UAAf,CAAvB,CAAP;AAA4D,GAAjH;;AACA5B,EAAAA,WAAW,CAAC6B,KAAZ,GAAoB,aAAc/B,EAAE,CAACgC,kBAAH,CAAsB;AAAE3B,IAAAA,KAAK,EAAEH,WAAT;AAAsB+B,IAAAA,OAAO,EAAE/B,WAAW,CAACwB,IAA3C;AAAiDQ,IAAAA,UAAU,EAAE;AAA7D,GAAtB,CAAlC;AAjCA,SAAahC,WAAb;AAAA","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class AuthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.token = null;\r\n        this.apiUrl = 'https://localhost:7216/api/Utilisateur'; // Replace with your actual API URL\r\n    }\r\n    login(Matricule, password) {\r\n        return this.http.post(`https://localhost:7216/api/Utilisateur/login`, { matricule, password });\r\n    }\r\n    setToken(token) {\r\n        console.log('Setting token:', token); // Add this line\r\n        this.token = token;\r\n        localStorage.setItem('token', token); // Save token to localStorage\r\n    }\r\n    getToken() {\r\n        const token = this.token || localStorage.getItem('token');\r\n        console.log('Retrieved token:', token); // Add this line\r\n        return token;\r\n    }\r\n    isLoggedIn() {\r\n        // Check if user is logged in based on token existence\r\n        return !!this.getToken();\r\n    }\r\n    getUserById(userId) {\r\n        const url = `${this.apiUrl}/${userId}`;\r\n        return this.http.get(url);\r\n    }\r\n    logout() {\r\n        localStorage.removeItem('token'); // Remove token from localStorage\r\n        // Redirect to login page or any other desired action\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}