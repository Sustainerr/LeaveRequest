{"ast":null,"code":"import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event object emitted by MatChip when selected or deselected. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nconst _c0 = [\"*\"];\n\nclass MatChipSelectionChange {\n  constructor(\n  /** Reference to the chip that emitted the event. */\n  source,\n  /** Whether the chip that emitted the event is selected. */\n  selected,\n  /** Whether the selection change was a result of a user interaction. */\n  isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_CHIP_REMOVE = /*#__PURE__*/new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_CHIP_AVATAR = /*#__PURE__*/new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_CHIP_TRAILING_ICON = /*#__PURE__*/new InjectionToken('MatChipTrailingIcon'); // Boilerplate for applying mixins to MatChip.\n\n/** @docs-private */\n\nclass MatChipBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nconst _MatChipMixinBase = /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinColor( /*#__PURE__*/mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n\n\nlet MatChipAvatar = /*#__PURE__*/(() => {\n  class MatChipAvatar {}\n\n  MatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n    return new (t || MatChipAvatar)();\n  };\n\n  MatChipAvatar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChipAvatar,\n    selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n    hostAttrs: [1, \"mat-chip-avatar\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_CHIP_AVATAR,\n      useExisting: MatChipAvatar\n    }])]\n  });\n  return MatChipAvatar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n\n\nlet MatChipTrailingIcon = /*#__PURE__*/(() => {\n  class MatChipTrailingIcon {}\n\n  MatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n    return new (t || MatChipTrailingIcon)();\n  };\n\n  MatChipTrailingIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChipTrailingIcon,\n    selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n    hostAttrs: [1, \"mat-chip-trailing-icon\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_CHIP_TRAILING_ICON,\n      useExisting: MatChipTrailingIcon\n    }])]\n  });\n  return MatChipTrailingIcon;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nlet MatChip = /*#__PURE__*/(() => {\n  class MatChip extends _MatChipMixinBase {\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n      super(elementRef);\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Whether the chip has focus. */\n\n      this._hasFocus = false;\n      /** Whether the chip list is selectable */\n\n      this.chipListSelectable = true;\n      /** Whether the chip list is in multi-selection mode. */\n\n      this._chipListMultiple = false;\n      /** Whether the chip list as a whole is disabled. */\n\n      this._chipListDisabled = false;\n      this._selected = false;\n      this._selectable = true;\n      this._disabled = false;\n      this._removable = true;\n      /** Emits when the chip is focused. */\n\n      this._onFocus = new Subject();\n      /** Emits when the chip is blured. */\n\n      this._onBlur = new Subject();\n      /** Emitted when the chip is selected or deselected. */\n\n      this.selectionChange = new EventEmitter();\n      /** Emitted when the chip is destroyed. */\n\n      this.destroyed = new EventEmitter();\n      /** Emitted when a chip is to be removed. */\n\n      this.removed = new EventEmitter();\n\n      this._addHostClassName(); // Dynamically create the ripple target, append it within the chip, and use it as the\n      // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n      // the proper styles.\n\n\n      this._chipRippleTarget = _document.createElement('div');\n\n      this._chipRippleTarget.classList.add('mat-chip-ripple');\n\n      this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n\n      this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n\n      this._chipRipple.setupTriggerEvents(elementRef);\n\n      this.rippleConfig = globalRippleOptions || {};\n      this._animationsDisabled = animationMode === 'NoopAnimations';\n      this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n\n\n    get rippleDisabled() {\n      return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(value) {\n      const coercedValue = coerceBooleanProperty(value);\n\n      if (coercedValue !== this._selected) {\n        this._selected = coercedValue;\n\n        this._dispatchSelectionChange();\n      }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n\n\n    get value() {\n      return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n    }\n\n    set value(value) {\n      this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n\n\n    get selectable() {\n      return this._selectable && this.chipListSelectable;\n    }\n\n    set selectable(value) {\n      this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n\n\n    get disabled() {\n      return this._chipListDisabled || this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n\n\n    get removable() {\n      return this._removable;\n    }\n\n    set removable(value) {\n      this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n\n\n    get ariaSelected() {\n      // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n      // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n      return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n    }\n\n    _addHostClassName() {\n      const basicChipAttrName = 'mat-basic-chip';\n      const element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n        element.classList.add(basicChipAttrName);\n        return;\n      } else {\n        element.classList.add('mat-standard-chip');\n      }\n    }\n\n    ngOnDestroy() {\n      this.destroyed.emit({\n        chip: this\n      });\n\n      this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n\n\n    select() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Deselects the chip. */\n\n\n    deselect() {\n      if (this._selected) {\n        this._selected = false;\n\n        this._dispatchSelectionChange();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Select this chip and emit selected event */\n\n\n    selectViaInteraction() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange(true);\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Toggles the current selected state of this chip. */\n\n\n    toggleSelected(isUserInput = false) {\n      this._selected = !this.selected;\n\n      this._dispatchSelectionChange(isUserInput);\n\n      this._changeDetectorRef.markForCheck();\n\n      return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n\n\n    focus() {\n      if (!this._hasFocus) {\n        this._elementRef.nativeElement.focus();\n\n        this._onFocus.next({\n          chip: this\n        });\n      }\n\n      this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n\n\n    remove() {\n      if (this.removable) {\n        this.removed.emit({\n          chip: this\n        });\n      }\n    }\n    /** Handles click events on the chip. */\n\n\n    _handleClick(event) {\n      if (this.disabled) {\n        event.preventDefault();\n      } else {\n        event.stopPropagation();\n      }\n    }\n    /** Handle custom key presses. */\n\n\n    _handleKeydown(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case DELETE:\n        case BACKSPACE:\n          // If we are removable, remove the focused chip\n          this.remove(); // Always prevent so page navigation does not occur\n\n          event.preventDefault();\n          break;\n\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this.toggleSelected(true);\n          } // Always prevent space from scrolling the page since the list has focus\n\n\n          event.preventDefault();\n          break;\n      }\n    }\n\n    _blur() {\n      // When animations are enabled, Angular may end up removing the chip from the DOM a little\n      // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n      // that moves focus not the next item. To work around the issue, we defer marking the chip\n      // as not focused until the next time the zone stabilizes.\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n\n          this._onBlur.next({\n            chip: this\n          });\n        });\n      });\n    }\n\n    _dispatchSelectionChange(isUserInput = false) {\n      this.selectionChange.emit({\n        source: this,\n        isUserInput,\n        selected: this._selected\n      });\n    }\n\n  }\n\n  MatChip.ɵfac = function MatChip_Factory(t) {\n    return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatChip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChip,\n    selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n    contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n    hostVars: 14,\n    hostBindings: function MatChip_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"focus\", function MatChip_focus_HostBindingHandler() {\n          return ctx.focus();\n        })(\"blur\", function MatChip_blur_HostBindingHandler() {\n          return ctx._blur();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\",\n      selected: \"selected\",\n      value: \"value\",\n      selectable: \"selectable\",\n      disabled: \"disabled\",\n      removable: \"removable\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\",\n      destroyed: \"destroyed\",\n      removed: \"removed\"\n    },\n    exportAs: [\"matChip\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatChip;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nlet MatChipRemove = /*#__PURE__*/(() => {\n  class MatChipRemove {\n    constructor(_parentChip, elementRef) {\n      this._parentChip = _parentChip;\n\n      if (elementRef.nativeElement.nodeName === 'BUTTON') {\n        elementRef.nativeElement.setAttribute('type', 'button');\n      }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n\n\n    _handleClick(event) {\n      const parentChip = this._parentChip;\n\n      if (parentChip.removable && !parentChip.disabled) {\n        parentChip.remove();\n      } // We need to stop event propagation because otherwise the event will bubble up to the\n      // form field and cause the `onContainerClick` method to be invoked. This method would then\n      // reset the focused chip that has been focused after chip removal. Usually the parent\n      // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n      // that the chip is being removed before the event bubbles up.\n\n\n      event.stopPropagation();\n    }\n\n  }\n\n  MatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n    return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MatChipRemove.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChipRemove,\n    selectors: [[\"\", \"matChipRemove\", \"\"]],\n    hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n    hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_CHIP_REMOVE,\n      useExisting: MatChipRemove\n    }])]\n  });\n  return MatChipRemove;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for the chips module. */\n\n\nconst MAT_CHIPS_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-chips-default-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/** @docs-private */\n\nconst _MatChipListBase = /*#__PURE__*/mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}); // Increasing integer for generating unique ids for chip-list components.\n\n\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\n\nclass MatChipListChange {\n  constructor(\n  /** Chip list that emitted the event. */\n  source,\n  /** Value of the chip list when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nlet MatChipList = /*#__PURE__*/(() => {\n  class MatChipList extends _MatChipListBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n      super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      this._elementRef = _elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dir = _dir;\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      this.controlType = 'mat-chip-list';\n      /**\n       * When a chip is destroyed, we store the index of the destroyed chip until the chips\n       * query list notifies about the update. This is necessary because we cannot determine an\n       * appropriate chip that should receive focus until the array of chips updated completely.\n       */\n\n      this._lastDestroyedChipIndex = null;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._destroyed = new Subject();\n      /** Uid of the chip list */\n\n      this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n      /** Tab index for the chip list. */\n\n      this._tabIndex = 0;\n      /**\n       * User defined tab index.\n       * When it is not null, use user defined tab index. Otherwise use _tabIndex\n       */\n\n      this._userTabIndex = null;\n      /** Function when touched */\n\n      this._onTouched = () => {};\n      /** Function when changed */\n\n\n      this._onChange = () => {};\n\n      this._multiple = false;\n\n      this._compareWith = (o1, o2) => o1 === o2;\n\n      this._required = false;\n      this._disabled = false;\n      /** Orientation of the chip list. */\n\n      this.ariaOrientation = 'horizontal';\n      this._selectable = true;\n      /** Event emitted when the selected chip list value has been changed by the user. */\n\n      this.change = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n\n      this.valueChange = new EventEmitter();\n\n      if (this.ngControl) {\n        this.ngControl.valueAccessor = this;\n      }\n    }\n    /** The array of selected chips inside chip list. */\n\n\n    get selected() {\n      var _a, _b;\n\n      return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n\n\n    get role() {\n      return this.empty ? null : 'listbox';\n    }\n    /** Whether the user should be allowed to select multiple chips. */\n\n\n    get multiple() {\n      return this._multiple;\n    }\n\n    set multiple(value) {\n      this._multiple = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n\n\n    get compareWith() {\n      return this._compareWith;\n    }\n\n    set compareWith(fn) {\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      this.writeValue(value);\n      this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get id() {\n      return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get required() {\n      return this._required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get placeholder() {\n      return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n\n\n    get focused() {\n      return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get empty() {\n      return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get shouldLabelFloat() {\n      return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get disabled() {\n      return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n\n\n    get selectable() {\n      return this._selectable;\n    }\n\n    set selectable(value) {\n      this._selectable = coerceBooleanProperty(value);\n\n      if (this.chips) {\n        this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n      }\n    }\n\n    set tabIndex(value) {\n      this._userTabIndex = value;\n      this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n\n\n    get chipSelectionChanges() {\n      return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n\n\n    get chipFocusChanges() {\n      return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n\n\n    get chipBlurChanges() {\n      return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n\n\n    get chipRemoveChanges() {\n      return merge(...this.chips.map(chip => chip.destroyed));\n    }\n\n    ngAfterContentInit() {\n      this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n      if (this._dir) {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n      }\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._allowFocusEscape();\n      }); // When the list changes, re-subscribe\n\n\n      this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n        if (this.disabled) {\n          // Since this happens after the content has been\n          // checked, we need to defer it to the next tick.\n          Promise.resolve().then(() => {\n            this._syncChipsState();\n          });\n        }\n\n        this._resetChips(); // Reset chips selected/deselected status\n\n\n        this._initializeSelection(); // Check to see if we need to update our tab index\n\n\n        this._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n        this._updateFocusForDestroyedChips();\n\n        this.stateChanges.next();\n      });\n    }\n\n    ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n      this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n\n        if (this.ngControl.disabled !== this._disabled) {\n          this.disabled = !!this.ngControl.disabled;\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this.stateChanges.complete();\n\n      this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n\n\n    registerInput(inputElement) {\n      this._chipInput = inputElement; // We use this attribute to match the chip list to its input in test harnesses.\n      // Set the attribute directly here to avoid \"changed after checked\" errors.\n\n      this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    } // Implemented as part of ControlValueAccessor.\n\n\n    writeValue(value) {\n      if (this.chips) {\n        this._setSelectionByValue(value, false);\n      }\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    onContainerClick(event) {\n      if (!this._originatesFromChip(event)) {\n        this.focus();\n      }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n\n\n    focus(options) {\n      if (this.disabled) {\n        return;\n      } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n      // Focus on first element if there's no chipInput inside chip-list\n\n\n      if (this._chipInput && this._chipInput.focused) {// do nothing\n      } else if (this.chips.length > 0) {\n        this._keyManager.setFirstItemActive();\n\n        this.stateChanges.next();\n      } else {\n        this._focusInput(options);\n\n        this.stateChanges.next();\n      }\n    }\n    /** Attempt to focus an input if we have one. */\n\n\n    _focusInput(options) {\n      if (this._chipInput) {\n        this._chipInput.focus(options);\n      }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n\n\n    _keydown(event) {\n      const target = event.target;\n\n      if (target && target.classList.contains('mat-chip')) {\n        this._keyManager.onKeydown(event);\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n\n\n    _updateTabIndex() {\n      // If we have 0 chips, we should not allow keyboard focus\n      this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n\n\n    _updateFocusForDestroyedChips() {\n      // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n      if (this._lastDestroyedChipIndex != null) {\n        if (this.chips.length) {\n          const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n          this._keyManager.setActiveItem(newChipIndex);\n        } else {\n          this.focus();\n        }\n      }\n\n      this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n\n\n    _isValidIndex(index) {\n      return index >= 0 && index < this.chips.length;\n    }\n\n    _setSelectionByValue(value, isUserInput = true) {\n      this._clearSelection();\n\n      this.chips.forEach(chip => chip.deselect());\n\n      if (Array.isArray(value)) {\n        value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n\n        this._sortValues();\n      } else {\n        const correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what chip the user interacted with last.\n\n\n        if (correspondingChip) {\n          if (isUserInput) {\n            this._keyManager.setActiveItem(correspondingChip);\n          }\n        }\n      }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n\n\n    _selectValue(value, isUserInput = true) {\n      const correspondingChip = this.chips.find(chip => {\n        return chip.value != null && this._compareWith(chip.value, value);\n      });\n\n      if (correspondingChip) {\n        isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n        this._selectionModel.select(correspondingChip);\n      }\n\n      return correspondingChip;\n    }\n\n    _initializeSelection() {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        if (this.ngControl || this._value) {\n          this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n\n          this.stateChanges.next();\n        }\n      });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n\n\n    _clearSelection(skip) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip !== skip) {\n          chip.deselect();\n        }\n      });\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n\n\n    _sortValues() {\n      if (this._multiple) {\n        this._selectionModel.clear();\n\n        this.chips.forEach(chip => {\n          if (chip.selected) {\n            this._selectionModel.select(chip);\n          }\n        });\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n\n\n    _propagateChanges(fallbackValue) {\n      let valueToEmit = null;\n\n      if (Array.isArray(this.selected)) {\n        valueToEmit = this.selected.map(chip => chip.value);\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.change.emit(new MatChipListChange(this, valueToEmit));\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n\n\n    _blur() {\n      if (!this._hasFocusedChip()) {\n        this._keyManager.setActiveItem(-1);\n      }\n\n      if (!this.disabled) {\n        if (this._chipInput) {\n          // If there's a chip input, we should check whether the focus moved to chip input.\n          // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n          // to chip input, do nothing.\n          // Timeout is needed to wait for the focus() event trigger on chip input.\n          setTimeout(() => {\n            if (!this.focused) {\n              this._markAsTouched();\n            }\n          });\n        } else {\n          // If there's no chip input, then mark the field as touched.\n          this._markAsTouched();\n        }\n      }\n    }\n    /** Mark the field as touched */\n\n\n    _markAsTouched() {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n\n\n    _allowFocusEscape() {\n      if (this._tabIndex !== -1) {\n        this._tabIndex = -1;\n        setTimeout(() => {\n          this._tabIndex = this._userTabIndex || 0;\n\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n\n    _resetChips() {\n      this._dropSubscriptions();\n\n      this._listenToChipsFocus();\n\n      this._listenToChipsSelection();\n\n      this._listenToChipsRemoved();\n    }\n\n    _dropSubscriptions() {\n      if (this._chipFocusSubscription) {\n        this._chipFocusSubscription.unsubscribe();\n\n        this._chipFocusSubscription = null;\n      }\n\n      if (this._chipBlurSubscription) {\n        this._chipBlurSubscription.unsubscribe();\n\n        this._chipBlurSubscription = null;\n      }\n\n      if (this._chipSelectionSubscription) {\n        this._chipSelectionSubscription.unsubscribe();\n\n        this._chipSelectionSubscription = null;\n      }\n\n      if (this._chipRemoveSubscription) {\n        this._chipRemoveSubscription.unsubscribe();\n\n        this._chipRemoveSubscription = null;\n      }\n    }\n    /** Listens to user-generated selection events on each chip. */\n\n\n    _listenToChipsSelection() {\n      this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n        event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n        if (!this.multiple) {\n          this.chips.forEach(chip => {\n            if (!this._selectionModel.isSelected(chip) && chip.selected) {\n              chip.deselect();\n            }\n          });\n        }\n\n        if (event.isUserInput) {\n          this._propagateChanges();\n        }\n      });\n    }\n    /** Listens to user-generated selection events on each chip. */\n\n\n    _listenToChipsFocus() {\n      this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n        let chipIndex = this.chips.toArray().indexOf(event.chip);\n\n        if (this._isValidIndex(chipIndex)) {\n          this._keyManager.updateActiveItem(chipIndex);\n        }\n\n        this.stateChanges.next();\n      });\n      this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n        this._blur();\n\n        this.stateChanges.next();\n      });\n    }\n\n    _listenToChipsRemoved() {\n      this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n        const chip = event.chip;\n        const chipIndex = this.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n        // the index in order to be able to determine an appropriate sibling chip that will\n        // receive focus.\n\n        if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n          this._lastDestroyedChipIndex = chipIndex;\n        }\n      });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n\n\n    _originatesFromChip(event) {\n      let currentElement = event.target;\n\n      while (currentElement && currentElement !== this._elementRef.nativeElement) {\n        if (currentElement.classList.contains('mat-chip')) {\n          return true;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n\n      return false;\n    }\n    /** Checks whether any of the chips is focused. */\n\n\n    _hasFocusedChip() {\n      return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n\n\n    _syncChipsState() {\n      if (this.chips) {\n        this.chips.forEach(chip => {\n          chip._chipListDisabled = this._disabled;\n          chip._chipListMultiple = this.multiple;\n        });\n      }\n    }\n\n  }\n\n  MatChipList.ɵfac = function MatChipList_Factory(t) {\n    return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n  };\n\n  MatChipList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatChipList,\n    selectors: [[\"mat-chip-list\"]],\n    contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-chip-list\"],\n    hostVars: 15,\n    hostBindings: function MatChipList_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n          return ctx.focus();\n        })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n          return ctx._blur();\n        })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n      }\n    },\n    inputs: {\n      ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n      multiple: \"multiple\",\n      compareWith: \"compareWith\",\n      value: \"value\",\n      required: \"required\",\n      placeholder: \"placeholder\",\n      disabled: \"disabled\",\n      selectable: \"selectable\",\n      tabIndex: \"tabIndex\",\n      errorStateMatcher: \"errorStateMatcher\"\n    },\n    outputs: {\n      change: \"change\",\n      valueChange: \"valueChange\"\n    },\n    exportAs: [\"matChipList\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatChipList\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"mat-chip-list-wrapper\"]],\n    template: function MatChipList_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatChipList;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\n\n\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nlet MatChipInput = /*#__PURE__*/(() => {\n  class MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n      this._elementRef = _elementRef;\n      this._defaultOptions = _defaultOptions;\n      /** Whether the control is focused. */\n\n      this.focused = false;\n      this._addOnBlur = false;\n      /**\n       * The list of key codes that will trigger a chipEnd event.\n       *\n       * Defaults to `[ENTER]`.\n       */\n\n      this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n      /** Emitted when a chip is to be added. */\n\n      this.chipEnd = new EventEmitter();\n      /** The input's placeholder text. */\n\n      this.placeholder = '';\n      /** Unique id for the input. */\n\n      this.id = `mat-chip-list-input-${nextUniqueId++}`;\n      this._disabled = false;\n      this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n\n\n    set chipList(value) {\n      if (value) {\n        this._chipList = value;\n\n        this._chipList.registerInput(this);\n      }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n\n\n    get addOnBlur() {\n      return this._addOnBlur;\n    }\n\n    set addOnBlur(value) {\n      this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /** Whether the input is disabled. */\n\n\n    get disabled() {\n      return this._disabled || this._chipList && this._chipList.disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether the input is empty. */\n\n\n    get empty() {\n      return !this.inputElement.value;\n    }\n\n    ngOnChanges() {\n      this._chipList.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n      this.chipEnd.complete();\n    }\n\n    ngAfterContentInit() {\n      this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n\n\n    _keydown(event) {\n      if (event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n          this._chipList._allowFocusEscape();\n        } // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n        // We focus the last chip on backspace only after the user has released the backspace button,\n        // and the input is empty (see behaviour in _keyup)\n\n\n        if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n          this._chipList._keyManager.setLastItemActive();\n\n          event.preventDefault();\n          return;\n        } else {\n          this._focusLastChipOnBackspace = false;\n        }\n      }\n\n      this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n\n\n    _keyup(event) {\n      // Allow user to move focus to chips next time he presses backspace\n      if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n        this._focusLastChipOnBackspace = true;\n        event.preventDefault();\n      }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n\n\n    _blur() {\n      if (this.addOnBlur) {\n        this._emitChipEnd();\n      }\n\n      this.focused = false; // Blur the chip list if it is not focused\n\n      if (!this._chipList.focused) {\n        this._chipList._blur();\n      }\n\n      this._chipList.stateChanges.next();\n    }\n\n    _focus() {\n      this.focused = true;\n      this._focusLastChipOnBackspace = this.empty;\n\n      this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n\n\n    _emitChipEnd(event) {\n      if (!this.inputElement.value && !!event) {\n        this._chipList._keydown(event);\n      }\n\n      if (!event || this._isSeparatorKey(event)) {\n        this.chipEnd.emit({\n          input: this.inputElement,\n          value: this.inputElement.value,\n          chipInput: this\n        });\n        event === null || event === void 0 ? void 0 : event.preventDefault();\n      }\n    }\n\n    _onInput() {\n      // Let chip list know whenever the value changes.\n      this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n\n\n    focus(options) {\n      this.inputElement.focus(options);\n    }\n    /** Clears the input */\n\n\n    clear() {\n      this.inputElement.value = '';\n      this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n\n\n    _isSeparatorKey(event) {\n      return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n\n  }\n\n  MatChipInput.ɵfac = function MatChipInput_Factory(t) {\n    return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n  };\n\n  MatChipInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatChipInput,\n    selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n    hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n    hostVars: 5,\n    hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) {\n          return ctx._keyup($event);\n        })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n          return ctx._blur();\n        })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n          return ctx._focus();\n        })(\"input\", function MatChipInput_input_HostBindingHandler() {\n          return ctx._onInput();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n      }\n    },\n    inputs: {\n      separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n      placeholder: \"placeholder\",\n      id: \"id\",\n      chipList: [\"matChipInputFor\", \"chipList\"],\n      addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n      disabled: \"disabled\"\n    },\n    outputs: {\n      chipEnd: \"matChipInputTokenEnd\"\n    },\n    exportAs: [\"matChipInput\", \"matChipInputFor\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatChipInput;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nconst ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\nlet MatChipsModule = /*#__PURE__*/(() => {\n  class MatChipsModule {}\n\n  MatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n    return new (t || MatChipsModule)();\n  };\n\n  MatChipsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatChipsModule\n  });\n  MatChipsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ErrorStateMatcher, {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: ɵ0\n    }],\n    imports: [[MatCommonModule]]\n  });\n  return MatChipsModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: function () {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js"],"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","InjectionToken","Directive","EventEmitter","ElementRef","NgZone","Optional","Inject","ChangeDetectorRef","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","ErrorStateMatcher","MatCommonModule","coerceBooleanProperty","Platform","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","Directionality","SelectionModel","NgForm","FormGroupDirective","NgControl","MatFormFieldControl","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","constructor","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","features","ɵɵProvidersFeature","provide","useExisting","ngDevMode","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","rippleDisabled","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","removable","ariaSelected","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","chip","_removeTriggerEvents","select","markForCheck","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","_blur","onStable","pipe","subscribe","run","MatChip_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","MatChip_keydown_HostBindingHandler","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","ɵɵattribute","ɵɵclassProp","inputs","color","outputs","exportAs","ɵɵInheritDefinitionFeature","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","_MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","nextUniqueId$1","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","_a","_b","multiple","_selectionModel","role","empty","_syncChipsState","compareWith","fn","_initializeSelection","writeValue","id","_chipInput","required","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","options","setFirstItemActive","_focusInput","_keydown","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItem","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","ɵɵhostProperty","errorState","errorStateMatcher","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","chipList","_chipList","addOnBlur","ngOnChanges","_focusLastChipOnBackspace","setLastItemActive","_emitChipEnd","_keyup","_focus","_isSeparatorKey","input","chipInput","_onInput","Set","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_keyup_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","MatChipInput_input_HostBindingHandler","invalid","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","useValue","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? (((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || []) :\n            (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this.inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) { return ctx._keyup($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(keyup)': '_keyup($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [[MatCommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n"]},"metadata":{},"sourceType":"module"}