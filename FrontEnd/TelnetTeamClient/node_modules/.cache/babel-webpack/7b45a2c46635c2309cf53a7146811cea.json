{"ast":null,"code":"import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.action();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\n\nconst MAT_SNACK_BAR_DATA = /*#__PURE__*/new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n    this.duration = 0;\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n\n    this.verticalPosition = 'bottom';\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\n\nconst MAX_TIMEOUT = /*#__PURE__*/Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance; // Dismiss snackbar on action.\n\n    this.onAction().subscribe(() => this.dismiss());\n\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n\n\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n\n\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n\n      this._onAction.next();\n\n      this._onAction.complete();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n\n\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n\n\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n\n\n  _finishDismiss() {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n\n    this._afterDismissed.complete();\n\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n\n\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n\n\n  onAction() {\n    return this._onAction;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nlet SimpleSnackBar = /*#__PURE__*/(() => {\n  class SimpleSnackBar {\n    constructor(snackBarRef, data) {\n      this.snackBarRef = snackBarRef;\n      this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n\n\n    action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n\n\n    get hasAction() {\n      return !!this.data.action;\n    }\n\n  }\n\n  SimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n    return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n  };\n\n  SimpleSnackBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: SimpleSnackBar,\n    selectors: [[\"simple-snack-bar\"]],\n    hostAttrs: [1, \"mat-simple-snackbar\"],\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n    template: function SimpleSnackBar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n    styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SimpleSnackBar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('void, hidden', /*#__PURE__*/style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), /*#__PURE__*/transition('* => visible', /*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)')), /*#__PURE__*/transition('* => void, * => hidden', /*#__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\nlet MatSnackBarContainer = /*#__PURE__*/(() => {\n  class MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform,\n    /** The snack bar configuration. */\n    snackBarConfig) {\n      super();\n      this._ngZone = _ngZone;\n      this._elementRef = _elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._platform = _platform;\n      this.snackBarConfig = snackBarConfig;\n      /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n      this._announceDelay = 150;\n      /** Whether the component has been destroyed. */\n\n      this._destroyed = false;\n      /** Subject for notifying that the snack bar has announced to screen readers. */\n\n      this._onAnnounce = new Subject();\n      /** Subject for notifying that the snack bar has exited from view. */\n\n      this._onExit = new Subject();\n      /** Subject for notifying that the snack bar has finished entering the view. */\n\n      this._onEnter = new Subject();\n      /** The state of the snack bar animations. */\n\n      this._animationState = 'void';\n      /**\n       * Attaches a DOM portal to the snack bar container.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      this.attachDomPortal = portal => {\n        this._assertNotAttached();\n\n        this._applySnackBarClasses();\n\n        return this._portalOutlet.attachDomPortal(portal);\n      }; // Use aria-live rather than a live role like 'alert' or 'status'\n      // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n      if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n        this._live = 'assertive';\n      } else if (snackBarConfig.politeness === 'off') {\n        this._live = 'off';\n      } else {\n        this._live = 'polite';\n      } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n      // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n      if (this._platform.FIREFOX) {\n        if (this._live === 'polite') {\n          this._role = 'status';\n        }\n\n        if (this._live === 'assertive') {\n          this._role = 'alert';\n        }\n      }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n\n\n    attachComponentPortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n\n\n    attachTemplatePortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n\n\n    onAnimationEnd(event) {\n      const {\n        fromState,\n        toState\n      } = event;\n\n      if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n        this._completeExit();\n      }\n\n      if (toState === 'visible') {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n        const onEnter = this._onEnter;\n\n        this._ngZone.run(() => {\n          onEnter.next();\n          onEnter.complete();\n        });\n      }\n    }\n    /** Begin animation of snack bar entrance into view. */\n\n\n    enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n\n        this._changeDetectorRef.detectChanges();\n\n        this._screenReaderAnnounce();\n      }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n\n\n    exit() {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n\n      this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n      // long enough to visually read it either, so clear the timeout for announcing.\n\n\n      clearTimeout(this._announceTimeoutId);\n      return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n\n    ngOnDestroy() {\n      this._destroyed = true;\n\n      this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n\n\n    _completeExit() {\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n        this._onExit.next();\n\n        this._onExit.complete();\n      });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n\n\n    _applySnackBarClasses() {\n      const element = this._elementRef.nativeElement;\n      const panelClasses = this.snackBarConfig.panelClass;\n\n      if (panelClasses) {\n        if (Array.isArray(panelClasses)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClasses.forEach(cssClass => element.classList.add(cssClass));\n        } else {\n          element.classList.add(panelClasses);\n        }\n      }\n\n      if (this.snackBarConfig.horizontalPosition === 'center') {\n        element.classList.add('mat-snack-bar-center');\n      }\n\n      if (this.snackBarConfig.verticalPosition === 'top') {\n        element.classList.add('mat-snack-bar-top');\n      }\n    }\n    /** Asserts that no content is already attached to the container. */\n\n\n    _assertNotAttached() {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Attempting to attach snack bar content after content is already attached');\n      }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n\n\n    _screenReaderAnnounce() {\n      if (!this._announceTimeoutId) {\n        this._ngZone.runOutsideAngular(() => {\n          this._announceTimeoutId = setTimeout(() => {\n            const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n            const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n            if (inertElement && liveElement) {\n              // If an element in the snack bar content is focused before being moved\n              // track it and restore focus after moving to the live region.\n              let focusedElement = null;\n\n              if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n                focusedElement = document.activeElement;\n              }\n\n              inertElement.removeAttribute('aria-hidden');\n              liveElement.appendChild(inertElement);\n              focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n\n              this._onAnnounce.next();\n\n              this._onAnnounce.complete();\n            }\n          }, this._announceDelay);\n        });\n      }\n    }\n\n  }\n\n  MatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n    return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n  };\n\n  MatSnackBarContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSnackBarContainer,\n    selectors: [[\"snack-bar-container\"]],\n    viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-snack-bar-container\"],\n    hostVars: 1,\n    hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n          return ctx.onAnimationEnd($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n    template: function MatSnackBarContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n      }\n    },\n    directives: [ɵngcc4.CdkPortalOutlet],\n    styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSnackBarAnimations.snackBarState]\n    }\n  });\n  return MatSnackBarContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatSnackBarModule = /*#__PURE__*/(() => {\n  class MatSnackBarModule {}\n\n  MatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n    return new (t || MatSnackBarModule)();\n  };\n\n  MatSnackBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSnackBarModule\n  });\n  MatSnackBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule]\n  });\n  return MatSnackBarModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function () {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function () {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to specify default snack bar. */\n\n\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nlet MatSnackBar = /*#__PURE__*/(() => {\n  class MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n      this._overlay = _overlay;\n      this._live = _live;\n      this._injector = _injector;\n      this._breakpointObserver = _breakpointObserver;\n      this._parentSnackBar = _parentSnackBar;\n      this._defaultConfig = _defaultConfig;\n      /**\n       * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n       * If there is a parent snack-bar service, all operations should delegate to that parent\n       * via `_openedSnackBarRef`.\n       */\n\n      this._snackBarRefAtThisLevel = null;\n      /** The component that should be rendered as the snack bar's simple component. */\n\n      this.simpleSnackBarComponent = SimpleSnackBar;\n      /** The container component that attaches the provided template or component. */\n\n      this.snackBarContainerComponent = MatSnackBarContainer;\n      /** The CSS class to apply for handset mode. */\n\n      this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n\n\n    get _openedSnackBarRef() {\n      const parent = this._parentSnackBar;\n      return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n\n    set _openedSnackBarRef(value) {\n      if (this._parentSnackBar) {\n        this._parentSnackBar._openedSnackBarRef = value;\n      } else {\n        this._snackBarRefAtThisLevel = value;\n      }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n\n\n    openFromComponent(component, config) {\n      return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n\n\n    openFromTemplate(template, config) {\n      return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n\n\n    open(message, action = '', config) {\n      const _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can\n      // override the data to pass in our own message and action.\n\n\n      _config.data = {\n        message,\n        action\n      }; // Since the snack bar has `role=\"alert\"`, we don't\n      // want to announce the same message twice.\n\n      if (_config.announcementMessage === message) {\n        _config.announcementMessage = undefined;\n      }\n\n      return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n\n\n    dismiss() {\n      if (this._openedSnackBarRef) {\n        this._openedSnackBarRef.dismiss();\n      }\n    }\n\n    ngOnDestroy() {\n      // Only dismiss the snack bar at the current level on destroy.\n      if (this._snackBarRefAtThisLevel) {\n        this._snackBarRefAtThisLevel.dismiss();\n      }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n\n\n    _attachSnackBarContainer(overlayRef, config) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      const injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarConfig,\n          useValue: config\n        }]\n      });\n      const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n      const containerRef = overlayRef.attach(containerPortal);\n      containerRef.instance.snackBarConfig = config;\n      return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n\n\n    _attach(content, userConfig) {\n      const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n\n      const overlayRef = this._createOverlay(config);\n\n      const container = this._attachSnackBarContainer(overlayRef, config);\n\n      const snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n      if (content instanceof TemplateRef) {\n        const portal = new TemplatePortal(content, null, {\n          $implicit: config.data,\n          snackBarRef\n        });\n        snackBarRef.instance = container.attachTemplatePortal(portal);\n      } else {\n        const injector = this._createInjector(config, snackBarRef);\n\n        const portal = new ComponentPortal(content, undefined, injector);\n        const contentRef = container.attachComponentPortal(portal); // We can't pass this via the injector, because the injector is created earlier.\n\n        snackBarRef.instance = contentRef.instance;\n      } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n      // appropriate. This class is applied to the overlay element because the overlay must expand to\n      // fill the width of the screen for full width snackbars.\n\n\n      this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n        const classList = overlayRef.overlayElement.classList;\n        state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n      });\n\n      if (config.announcementMessage) {\n        // Wait until the snack bar contents have been announced then deliver this message.\n        container._onAnnounce.subscribe(() => {\n          this._live.announce(config.announcementMessage, config.politeness);\n        });\n      }\n\n      this._animateSnackBar(snackBarRef, config);\n\n      this._openedSnackBarRef = snackBarRef;\n      return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n\n\n    _animateSnackBar(snackBarRef, config) {\n      // When the snackbar is dismissed, clear the reference to it.\n      snackBarRef.afterDismissed().subscribe(() => {\n        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n        if (this._openedSnackBarRef == snackBarRef) {\n          this._openedSnackBarRef = null;\n        }\n\n        if (config.announcementMessage) {\n          this._live.clear();\n        }\n      });\n\n      if (this._openedSnackBarRef) {\n        // If a snack bar is already in view, dismiss it and enter the\n        // new snack bar after exit animation is complete.\n        this._openedSnackBarRef.afterDismissed().subscribe(() => {\n          snackBarRef.containerInstance.enter();\n        });\n\n        this._openedSnackBarRef.dismiss();\n      } else {\n        // If no snack bar is in view, enter the new snack bar.\n        snackBarRef.containerInstance.enter();\n      } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n      if (config.duration && config.duration > 0) {\n        snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n      }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n\n\n    _createOverlay(config) {\n      const overlayConfig = new OverlayConfig();\n      overlayConfig.direction = config.direction;\n\n      let positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n      const isRtl = config.direction === 'rtl';\n      const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n      const isRight = !isLeft && config.horizontalPosition !== 'center';\n\n      if (isLeft) {\n        positionStrategy.left('0');\n      } else if (isRight) {\n        positionStrategy.right('0');\n      } else {\n        positionStrategy.centerHorizontally();\n      } // Set horizontal position.\n\n\n      if (config.verticalPosition === 'top') {\n        positionStrategy.top('0');\n      } else {\n        positionStrategy.bottom('0');\n      }\n\n      overlayConfig.positionStrategy = positionStrategy;\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n\n\n    _createInjector(config, snackBarRef) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarRef,\n          useValue: snackBarRef\n        }, {\n          provide: MAT_SNACK_BAR_DATA,\n          useValue: config.data\n        }]\n      });\n    }\n\n  }\n\n  MatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n    return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  };\n\n  MatSnackBar.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function MatSnackBar_Factory() {\n      return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n    },\n    token: MatSnackBar,\n    providedIn: MatSnackBarModule\n  });\n  return MatSnackBar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"sources":["C:/Users/pprod/Desktop/satge PFE/satge PFE/TelnetTeamClient/node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js"],"names":["i1","OverlayModule","OverlayConfig","Overlay","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","NgZone","ElementRef","ChangeDetectorRef","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","MatButtonModule","Subject","Platform","take","takeUntil","trigger","state","style","transition","animate","i2","LiveAnnouncer","i3","Breakpoints","BreakpointObserver","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","data","MatSnackBarContainer_ng_template_1_Template","MAT_SNACK_BAR_DATA","MatSnackBarConfig","constructor","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","hasAction","ɵfac","SimpleSnackBar_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","directives","NgIf","MatButton","styles","encapsulation","changeDetection","ngDevMode","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","ɵɵelement","ɵɵattribute","animation","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","_config","Object","assign","undefined","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","matches","remove","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","MatSnackBar_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","INJECTOR","token"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    } }, directives: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n"]},"metadata":{},"sourceType":"module"}